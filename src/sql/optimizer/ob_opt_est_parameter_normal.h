/**
 * Copyright (c) 2021 OceanBase
 * OceanBase CE is licensed under Mulan PubL v2.
 * You can use this software according to the terms and conditions of the Mulan PubL v2.
 * You may obtain a copy of Mulan PubL v2 at:
 *          http://license.coscl.org.cn/MulanPubL-2.0
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PubL v2 for more details.
 */

#ifndef OCEANBASE_SQL_OPTIMIZER_OB_OPT_EST_PARAMETER_NORMAL_
#define OCEANBASE_SQL_OPTIMIZER_OB_OPT_EST_PARAMETER_NORMAL_
#include "ob_opt_est_cost_model.h"

namespace oceanbase
{
namespace sql
{

const static double NORMAL_CPU_TUPLE_COST = 0.01752438306007;
const static double NORMAL_TABLE_SCAN_CPU_TUPLE_COST_WIDE = 0.3717749711890249146505031527;
const static double NORMAL_TABLE_SCAN_CPU_TUPLE_COST_NARROW = 0.01385665017331767839130522724;
const static double NORMAL_MICRO_BLOCK_SEQ_COST = 30.24966849986740;
const static double NORMAL_MICRO_BLOCK_RND_COST = 45.35521602973162;
const static double NORMAL_PROJECT_COLUMN_SEQ_INT_COST = 0.02997280000000;
const static double NORMAL_PROJECT_COLUMN_SEQ_NUMBER_COST = 0.03838696447368;
const static double NORMAL_PROJECT_COLUMN_SEQ_CHAR_COST = 0.00071939876645;
const static double NORMAL_PROJECT_COLUMN_RND_INT_COST = 0.05290079605263;
const static double NORMAL_PROJECT_COLUMN_RND_NUMBER_COST = 0.07649711710526;
const static double NORMAL_PROJECT_COLUMN_RND_CHAR_COST = 0.001773425263158;
const static double NORMAL_FETCH_ROW_RND_COST = 3.01295075040000;
const static double NORMAL_CMP_INT_COST = 0.02535601865079;
const static double NORMAL_CMP_NUMBER_COST = 0.01210283968254;
const static double NORMAL_CMP_CHAR_COST = 0.05871144722222;
const static double NORMAL_INVALID_CMP_COST = -1;
const static double NORMAL_HASH_INT_COST = 0.01483029682540;
const static double NORMAL_HASH_NUMBER_COST = 0.02080071190476;
const static double NORMAL_HASH_CHAR_COST = 0.20116138531746;
const static double NORMAL_INVALID_HASH_COST = -1;
const static double NORMAL_MATERIALIZE_PER_BYTE_WRITE_COST = 0.00089446250000;
const static double NORMAL_READ_MATERIALIZED_PER_ROW_COST = 0.05451728888889;
const static double NORMAL_PER_AGGR_FUNC_COST = 0.01788231481481;
const static double NORMAL_PER_WIN_FUNC_COST = 0.50410275000000;
const static double NORMAL_CPU_OPERATOR_COST = 0.01788231481481;
const static double NORMAL_JOIN_PER_ROW_COST = 0.20314443995581;
const static double NORMAL_BUILD_HASH_PER_ROW_COST = 0.20571789841270;
const static double NORMAL_PROBE_HASH_PER_ROW_COST = 0.20668206321880;
const static double NORMAL_RESCAN_COST = 0.82979800000000;
const static double NORMAL_NETWORK_SER_PER_BYTE_COST = 0.0094539370039375;
const static double NORMAL_NETWORK_DESER_PER_BYTE_COST = 0.0094539370039375;
const static double NORMAL_NETWORK_TRANS_PER_BYTE_COST = 0.011832508338;
const static double NORMAL_PX_RESCAN_PER_ROW_COST = 398.267410467;
const static double NORMAL_PX_BATCH_RESCAN_PER_ROW_COST = 49.5841472833;
const static double NORMAL_NL_SCAN_COST = 5.74;
const static double NORMAL_BATCH_NL_SCAN_COST = 4.34;
const static double NORMAL_NL_GET_COST = 3.4;
const static double NORMAL_BATCH_NL_GET_COST = 3.1;
const static double NORMAL_TABLE_LOOPUP_PER_ROW_RPC_COST = 20.9591092914652749211572741;
const static double NORMAL_INSERT_PER_ROW_COST = 6.330037500000001;
const static double NORMAL_INSERT_INDEX_PER_ROW_COST = 6.583673124999999;
const static double NORMAL_INSERT_CHECK_PER_ROW_COST = 96.2424;
const static double NORMAL_UPDATE_PER_ROW_COST = 7.562755000000001;
const static double NORMAL_UPDATE_INDEX_PER_ROW_COST = 23.969286875;
const static double NORMAL_UPDATE_CHECK_PER_ROW_COST = 92.15352;
const static double NORMAL_DELETE_PER_ROW_COST = 5.0310162499999995;
const static double NORMAL_DELETE_INDEX_PER_ROW_COST = 6.549611874999999;
const static double NORMAL_DELETE_CHECK_PER_ROW_COST = 59.4583275;

const static double comparison_params_normal[ObMaxTC+1] = {
  NORMAL_CMP_INT_COST,            // null
  NORMAL_CMP_INT_COST,            // int8, int16, int24, int32, int64.
  NORMAL_CMP_INT_COST,            // uint8, uint16, uint24, uint32, uint64.
  NORMAL_CMP_INT_COST,            // float, ufloat.
  NORMAL_CMP_INT_COST,            // double, udouble.
  NORMAL_CMP_NUMBER_COST,         // number, unumber.
  NORMAL_CMP_INT_COST,            // datetime, timestamp.
  NORMAL_CMP_INT_COST,            // date
  NORMAL_CMP_INT_COST,            // time
  NORMAL_CMP_INT_COST,            // year
  NORMAL_CMP_CHAR_COST,           // varchar, char, varbinary, binary.
  NORMAL_CMP_INT_COST,            // extend
  NORMAL_INVALID_CMP_COST,        // unknown
  NORMAL_CMP_CHAR_COST,           // TinyText,MediumText, Text ,LongText
};

const static double hash_params_normal[ObMaxTC+1] = {
  NORMAL_HASH_INT_COST,            // null
  NORMAL_HASH_INT_COST,            // int8, int16, int24, int32, int64.
  NORMAL_HASH_INT_COST,            // uint8, uint16, uint24, uint32, uint64.
  NORMAL_HASH_INT_COST,            // float, ufloat.
  NORMAL_HASH_INT_COST,            // double, udouble.
  NORMAL_HASH_NUMBER_COST,         // number, unumber.
  NORMAL_HASH_INT_COST,            // datetime, timestamp.
  NORMAL_HASH_INT_COST,            // date
  NORMAL_HASH_INT_COST,            // time
  NORMAL_HASH_INT_COST,            // year
  NORMAL_HASH_CHAR_COST,           // varchar, char, varbinary, binary.
  NORMAL_HASH_INT_COST,            // extend
  NORMAL_INVALID_HASH_COST,        // unknown
  NORMAL_HASH_CHAR_COST,           // TinyText,MediumText, Text ,LongText
};

const static ObOptEstCostModel::ObCostParams cost_params_normal(
    NORMAL_CPU_TUPLE_COST,
    NORMAL_TABLE_SCAN_CPU_TUPLE_COST_WIDE,
    NORMAL_TABLE_SCAN_CPU_TUPLE_COST_NARROW,
    NORMAL_MICRO_BLOCK_SEQ_COST,
    NORMAL_MICRO_BLOCK_RND_COST,
    NORMAL_PROJECT_COLUMN_SEQ_INT_COST,
    NORMAL_PROJECT_COLUMN_SEQ_NUMBER_COST,
    NORMAL_PROJECT_COLUMN_SEQ_CHAR_COST,
    NORMAL_PROJECT_COLUMN_RND_INT_COST,
    NORMAL_PROJECT_COLUMN_RND_NUMBER_COST,
    NORMAL_PROJECT_COLUMN_RND_CHAR_COST,
    NORMAL_FETCH_ROW_RND_COST,
    NORMAL_CMP_INT_COST,
    NORMAL_CMP_NUMBER_COST,
    NORMAL_CMP_CHAR_COST,
    NORMAL_INVALID_CMP_COST,
    NORMAL_HASH_INT_COST,
    NORMAL_HASH_NUMBER_COST,
    NORMAL_HASH_CHAR_COST,
    NORMAL_INVALID_HASH_COST,
    NORMAL_MATERIALIZE_PER_BYTE_WRITE_COST,
    NORMAL_READ_MATERIALIZED_PER_ROW_COST,
    NORMAL_PER_AGGR_FUNC_COST,
    NORMAL_PER_WIN_FUNC_COST,
    NORMAL_CPU_OPERATOR_COST,
    NORMAL_JOIN_PER_ROW_COST,
    NORMAL_BUILD_HASH_PER_ROW_COST,
    NORMAL_PROBE_HASH_PER_ROW_COST,
    NORMAL_RESCAN_COST,
    NORMAL_NETWORK_SER_PER_BYTE_COST,
    NORMAL_NETWORK_DESER_PER_BYTE_COST,
    NORMAL_NETWORK_TRANS_PER_BYTE_COST,
    NORMAL_PX_RESCAN_PER_ROW_COST,
    NORMAL_PX_BATCH_RESCAN_PER_ROW_COST,
    NORMAL_NL_SCAN_COST,
    NORMAL_BATCH_NL_SCAN_COST,
    NORMAL_NL_GET_COST,
    NORMAL_BATCH_NL_GET_COST,
    NORMAL_TABLE_LOOPUP_PER_ROW_RPC_COST,
    NORMAL_INSERT_PER_ROW_COST,
    NORMAL_INSERT_INDEX_PER_ROW_COST,
    NORMAL_INSERT_CHECK_PER_ROW_COST,
    NORMAL_UPDATE_PER_ROW_COST,
    NORMAL_UPDATE_INDEX_PER_ROW_COST,
    NORMAL_UPDATE_CHECK_PER_ROW_COST,
    NORMAL_DELETE_PER_ROW_COST,
    NORMAL_DELETE_INDEX_PER_ROW_COST,
    NORMAL_DELETE_CHECK_PER_ROW_COST
);

}
}
#endif /*OCEANBASE_SQL_OPTIMIZER_OB_OPT_EST_PARAMETER_NORMAL_*/