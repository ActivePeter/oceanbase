/**
 * Copyright (c) 2021 OceanBase
 * OceanBase CE is licensed under Mulan PubL v2.
 * You can use this software according to the terms and conditions of the Mulan PubL v2.
 * You may obtain a copy of Mulan PubL v2 at:
 *          http://license.coscl.org.cn/MulanPubL-2.0
 * THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
 * EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
 * MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
 * See the Mulan PubL v2 for more details.
 */

#ifndef OCEANBASE_SQL_OPTIMIZER_OB_OPT_EST_PARAMETER_VECTOR_
#define OCEANBASE_SQL_OPTIMIZER_OB_OPT_EST_PARAMETER_VECTOR_
#include "ob_opt_est_cost_model.h"

namespace oceanbase
{
namespace sql
{

const static double VECTOR_CPU_TUPLE_COST = 0.00071335579909;
const static double VECTOR_TABLE_SCAN_CPU_TUPLE_COST_WIDE = 0.7354866412649211585537447628;
const static double VECTOR_TABLE_SCAN_CPU_TUPLE_COST_NARROW = 0.01385665017331767839130522724;
const static double VECTOR_MICRO_BLOCK_SEQ_COST = 29.50053820021528008611203444;
const static double VECTOR_MICRO_BLOCK_RND_COST = 45.35521602973162;
const static double VECTOR_PROJECT_COLUMN_SEQ_INT_COST = 0.01223016447368421052631578948;
const static double VECTOR_PROJECT_COLUMN_SEQ_NUMBER_COST = 0.01544295526315789473684210526;
const static double VECTOR_PROJECT_COLUMN_SEQ_CHAR_COST = 0.0002345658305921052631578947369;
const static double VECTOR_PROJECT_COLUMN_RND_INT_COST = 0.0677263565789473684210526316;
const static double VECTOR_PROJECT_COLUMN_RND_NUMBER_COST = 0.1174616828947368421052631579;
const static double VECTOR_PROJECT_COLUMN_RND_CHAR_COST = 0.0038935326625386996;
const static double VECTOR_FETCH_ROW_RND_COST = 3.01295075040000;
const static double VECTOR_CMP_INT_COST = 0.00880672460317;
const static double VECTOR_CMP_NUMBER_COST = 0.01185056468254;
const static double VECTOR_CMP_CHAR_COST = 0.00104555896577375;
const static double VECTOR_INVALID_CMP_COST = -1;
const static double VECTOR_HASH_INT_COST = 0.00942096904762;
const static double VECTOR_HASH_NUMBER_COST = 0.01259242103175;
const static double VECTOR_HASH_CHAR_COST = 0.18676667182540;
const static double VECTOR_INVALID_HASH_COST = -1;
const static double VECTOR_MATERIALIZE_PER_BYTE_WRITE_COST = 0.00076495625000;
const static double VECTOR_READ_MATERIALIZED_PER_ROW_COST = 0.01837096666667;
const static double VECTOR_PER_AGGR_FUNC_COST = 0.00499322222222;
const static double VECTOR_PER_WIN_FUNC_COST = 0.43170775000000;
const static double VECTOR_CPU_OPERATOR_COST = 0.00499322222222;
const static double VECTOR_JOIN_PER_ROW_COST = 0.02466797713742;
const static double VECTOR_BUILD_HASH_PER_ROW_COST = 0.12472949246032;
const static double VECTOR_PROBE_HASH_PER_ROW_COST = 0.06248105381496;
const static double VECTOR_RESCAN_COST = 1.04405600000000;
const static double VECTOR_NETWORK_SER_PER_BYTE_COST = 0.0094539370039375;
const static double VECTOR_NETWORK_DESER_PER_BYTE_COST = 0.0094539370039375;
const static double VECTOR_NETWORK_TRANS_PER_BYTE_COST = 0.011832508338;
const static double VECTOR_PX_RESCAN_PER_ROW_COST = 398.267410467;
const static double VECTOR_PX_BATCH_RESCAN_PER_ROW_COST = 49.5841472833;
const static double VECTOR_NL_SCAN_COST = 6.21;
const static double VECTOR_BATCH_NL_SCAN_COST = 6.18;
const static double VECTOR_NL_GET_COST = 3.5;
const static double VECTOR_BATCH_NL_GET_COST = 3.45;
const static double VECTOR_TABLE_LOOPUP_PER_ROW_RPC_COST = 20.9591092914652749211572741;
const static double VECTOR_INSERT_PER_ROW_COST = 6.330037500000001;
const static double VECTOR_INSERT_INDEX_PER_ROW_COST = 6.583673124999999;
const static double VECTOR_INSERT_CHECK_PER_ROW_COST = 96.2424;
const static double VECTOR_UPDATE_PER_ROW_COST = 7.562755000000001;
const static double VECTOR_UPDATE_INDEX_PER_ROW_COST = 23.969286875;
const static double VECTOR_UPDATE_CHECK_PER_ROW_COST = 92.15352;
const static double VECTOR_DELETE_PER_ROW_COST = 5.0310162499999995;
const static double VECTOR_DELETE_INDEX_PER_ROW_COST = 6.549611874999999;
const static double VECTOR_DELETE_CHECK_PER_ROW_COST = 59.4583275;

const static double comparison_params_vector[ObMaxTC+1] = {
  VECTOR_CMP_INT_COST,            // null
  VECTOR_CMP_INT_COST,            // int8, int16, int24, int32, int64.
  VECTOR_CMP_INT_COST,            // uint8, uint16, uint24, uint32, uint64.
  VECTOR_CMP_INT_COST,            // float, ufloat.
  VECTOR_CMP_INT_COST,            // double, udouble.
  VECTOR_CMP_NUMBER_COST,         // number, unumber.
  VECTOR_CMP_INT_COST,            // datetime, timestamp.
  VECTOR_CMP_INT_COST,            // date
  VECTOR_CMP_INT_COST,            // time
  VECTOR_CMP_INT_COST,            // year
  VECTOR_CMP_CHAR_COST,           // varchar, char, varbinary, binary.
  VECTOR_CMP_INT_COST,            // extend
  VECTOR_INVALID_CMP_COST,        // unknown
  VECTOR_CMP_CHAR_COST,           // TinyText,MediumText, Text ,LongText
};

const static double hash_params_vector[ObMaxTC+1] = {
  VECTOR_HASH_INT_COST,            // null
  VECTOR_HASH_INT_COST,            // int8, int16, int24, int32, int64.
  VECTOR_HASH_INT_COST,            // uint8, uint16, uint24, uint32, uint64.
  VECTOR_HASH_INT_COST,            // float, ufloat.
  VECTOR_HASH_INT_COST,            // double, udouble.
  VECTOR_HASH_NUMBER_COST,         // number, unumber.
  VECTOR_HASH_INT_COST,            // datetime, timestamp.
  VECTOR_HASH_INT_COST,            // date
  VECTOR_HASH_INT_COST,            // time
  VECTOR_HASH_INT_COST,            // year
  VECTOR_HASH_CHAR_COST,           // varchar, char, varbinary, binary.
  VECTOR_HASH_INT_COST,            // extend
  VECTOR_INVALID_HASH_COST,        // unknown
  VECTOR_HASH_CHAR_COST,           // TinyText,MediumText, Text ,LongText
};

const static ObOptEstCostModel::ObCostParams cost_params_vector(
   VECTOR_CPU_TUPLE_COST,
   VECTOR_TABLE_SCAN_CPU_TUPLE_COST_WIDE,
   VECTOR_TABLE_SCAN_CPU_TUPLE_COST_NARROW,
   VECTOR_MICRO_BLOCK_SEQ_COST,
   VECTOR_MICRO_BLOCK_RND_COST,
   VECTOR_PROJECT_COLUMN_SEQ_INT_COST,
   VECTOR_PROJECT_COLUMN_SEQ_NUMBER_COST,
   VECTOR_PROJECT_COLUMN_SEQ_CHAR_COST,
   VECTOR_PROJECT_COLUMN_RND_INT_COST,
   VECTOR_PROJECT_COLUMN_RND_NUMBER_COST,
   VECTOR_PROJECT_COLUMN_RND_CHAR_COST,
   VECTOR_FETCH_ROW_RND_COST,
   VECTOR_CMP_INT_COST,
   VECTOR_CMP_NUMBER_COST,
   VECTOR_CMP_CHAR_COST,
   VECTOR_INVALID_CMP_COST,
   VECTOR_HASH_INT_COST,
   VECTOR_HASH_NUMBER_COST,
   VECTOR_HASH_CHAR_COST,
   VECTOR_INVALID_HASH_COST,
   VECTOR_MATERIALIZE_PER_BYTE_WRITE_COST,
   VECTOR_READ_MATERIALIZED_PER_ROW_COST,
   VECTOR_PER_AGGR_FUNC_COST,
   VECTOR_PER_WIN_FUNC_COST,
   VECTOR_CPU_OPERATOR_COST,
   VECTOR_JOIN_PER_ROW_COST,
   VECTOR_BUILD_HASH_PER_ROW_COST,
   VECTOR_PROBE_HASH_PER_ROW_COST,
   VECTOR_RESCAN_COST,
   VECTOR_NETWORK_SER_PER_BYTE_COST,
   VECTOR_NETWORK_DESER_PER_BYTE_COST,
   VECTOR_NETWORK_TRANS_PER_BYTE_COST,
   VECTOR_PX_RESCAN_PER_ROW_COST,
   VECTOR_PX_BATCH_RESCAN_PER_ROW_COST,
   VECTOR_NL_SCAN_COST,
   VECTOR_BATCH_NL_SCAN_COST,
   VECTOR_NL_GET_COST,
   VECTOR_BATCH_NL_GET_COST,
   VECTOR_TABLE_LOOPUP_PER_ROW_RPC_COST,
   VECTOR_INSERT_PER_ROW_COST,
   VECTOR_INSERT_INDEX_PER_ROW_COST,
   VECTOR_INSERT_CHECK_PER_ROW_COST,
   VECTOR_UPDATE_PER_ROW_COST,
   VECTOR_UPDATE_INDEX_PER_ROW_COST,
   VECTOR_UPDATE_CHECK_PER_ROW_COST,
   VECTOR_DELETE_PER_ROW_COST,
   VECTOR_DELETE_INDEX_PER_ROW_COST,
   VECTOR_DELETE_CHECK_PER_ROW_COST
);

}
}
#endif /*OCEANBASE_SQL_OPTIMIZER_OB_OPT_EST_PARAMETER_VECTOR_*/