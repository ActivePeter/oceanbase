drop tenant dump_tenant force;
drop resource pool new_pool1;
drop resource unit new_box1;
set global parallel_servers_target=10;
alter system set _sort_area_size='2M';
alter system set _hash_area_size='4M';
drop table t11_set;
drop table t22_set;
drop table t111_var;
drop table t333_var;
create table t11_set(c1 int,c2 int);
create table t22_set(c1 int,c2 int);
insert into t11_set values(null,null);
insert into t11_set values(1,1);
insert into t11_set values(5,5);
insert into t11_set values(1,1);
insert into t11_set values(5,5);
insert into t11_set values(12,12);
insert into t11_set values(12,12);
insert into t11_set values(22,22);
insert into t11_set values(26,26);
insert into t11_set values(22,22);
insert into t11_set values(26,26);
insert into t22_set select * from t11_set;
create table t111_var(c0 bigint primary key,c1 varchar(4000), c2 varchar(4000), c3 varchar(4000), c4 varchar(4000), c5 varchar(4000),c6 varchar(4000), c7 longtext);
insert into t111_var values(1,repeat('ab',1000),repeat('ab',1000),repeat('ab',1000),repeat('ab',1000),repeat('ab',1000),repeat('ab',1000),repeat('a',4000));
insert into t111_var select c0+1,c1,c2,c3,c4,c5,c6,c7 from t111_var;
insert into t111_var select c0+10,c1,c2,c3,c4,c5,c6,c7 from t111_var;
insert into t111_var select c0+100,c1,c2,c3,c4,c5,c6,c7 from t111_var;
insert into t111_var select c0+1000,c1,c2,c3,c4,c5,c6,c7 from t111_var;
insert into t111_var select c0+10000,c1,c2,c3,c4,c5,c6,c7 from t111_var;
insert into t111_var select c0+100000,c1,c2,c3,c4,c5,c6,c7 from t111_var;
insert into t111_var select c0+1000000,c1,c2,c3,c4,c5,c6,c7 from t111_var;
insert into t111_var select c0+10000000,c1,c2,c3,c4,c5,c6,c7 from t111_var;
insert into t111_var select c0+100000000,c1,c2,c3,c4,c5,c6,c7 from t111_var;
commit;
create table t333_var(c0 bigint ,c1 varchar(4000), c2 varchar(4000), c3 varchar(4000), c4 varchar(4000), c5 varchar(4000),c6 varchar(4000), c7 longtext);
insert into t333_var values(1,repeat('ab',1000),repeat('ab',1000),repeat('ab',1000),repeat('ab',1000),repeat('ab',1000),repeat('ab',1000),repeat('a',4000));
insert into t333_var select c0+1,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var select c0+10,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var select c0+100,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var select c0+1000,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var select c0+10000,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var select c0+100000,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var select c0+1000000,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var select c0+10000000,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var select c0+100000000,c1,c2,c3,c4,c5,c6,c7 from t333_var;
insert into t333_var values(null,null,null,null,null,null,null,null);
commit;
result_format: 4
explain_protocol: 1
EXPLAIN BASIC select c1,c2 from t11_set union select c1,c2 from t22_set where c1 > 5 and c1 != 12;
Query Plan
================================
|ID|OPERATOR           |NAME   |
--------------------------------
|0 |HASH UNION DISTINCT|       |
|1 | TABLE SCAN        |t11_set|
|2 | TABLE SCAN        |t22_set|
================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter(nil), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter([t22_set.c1 > 5], [t22_set.c1 != 12]), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set union select c1,c2 from t22_set where c1 > 5 and c1 != 12;
+------+------+
| c1   | c2   |
+------+------+
| NULL | NULL |
|    1 |    1 |
|    5 |    5 |
|   12 |   12 |
|   22 |   22 |
|   26 |   26 |
+------+------+
EXPLAIN BASIC select c1,c2 from t11_set intersect select c1,c2 from t22_set where c1 > 5 and c1 != 12;
Query Plan
====================================
|ID|OPERATOR               |NAME   |
------------------------------------
|0 |HASH INTERSECT DISTINCT|       |
|1 | TABLE SCAN            |t11_set|
|2 | TABLE SCAN            |t22_set|
====================================

Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])], [INTERSECT([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter([t11_set.c1 > 5], [t11_set.c1 != 12]), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter([t22_set.c1 > 5], [t22_set.c1 != 12]), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set intersect select c1,c2 from t22_set where c1 > 5 and c1 != 12;
+------+------+
| c1   | c2   |
+------+------+
|   22 |   22 |
|   26 |   26 |
+------+------+
EXPLAIN BASIC select c1,c2 from t11_set minus select c1,c2 from t22_set where c1 > 5 and c1 != 12;
Query Plan
=================================
|ID|OPERATOR            |NAME   |
---------------------------------
|0 |HASH EXCEPT DISTINCT|       |
|1 | TABLE SCAN         |t11_set|
|2 | TABLE SCAN         |t22_set|
=================================

Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])], [EXCEPT([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter(nil), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter([t22_set.c1 > 5], [t22_set.c1 != 12]), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set minus select c1,c2 from t22_set where c1 > 5 and c1 != 12;
+------+------+
| c1   | c2   |
+------+------+
| NULL | NULL |
|    1 |    1 |
|    5 |    5 |
|   12 |   12 |
+------+------+

EXPLAIN BASIC select c1,c2 from t11_set where c1 > 5 and c1 != 12 union select c1,c2 from t22_set;
Query Plan
================================
|ID|OPERATOR           |NAME   |
--------------------------------
|0 |HASH UNION DISTINCT|       |
|1 | TABLE SCAN        |t11_set|
|2 | TABLE SCAN        |t22_set|
================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter([t11_set.c1 > 5], [t11_set.c1 != 12]), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter(nil), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set where c1 > 5 and c1 != 12 union select c1,c2 from t22_set;
+------+------+
| c1   | c2   |
+------+------+
|   22 |   22 |
|   26 |   26 |
| NULL | NULL |
|    1 |    1 |
|    5 |    5 |
|   12 |   12 |
+------+------+
EXPLAIN BASIC select c1,c2 from t11_set where c1 > 5 and c1 != 12 intersect select c1,c2 from t22_set;
Query Plan
====================================
|ID|OPERATOR               |NAME   |
------------------------------------
|0 |HASH INTERSECT DISTINCT|       |
|1 | TABLE SCAN            |t11_set|
|2 | TABLE SCAN            |t22_set|
====================================

Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])], [INTERSECT([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter([t11_set.c1 > 5], [t11_set.c1 != 12]), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter([t22_set.c1 > 5], [t22_set.c1 != 12]), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set where c1 > 5 and c1 != 12 intersect select c1,c2 from t22_set;
+------+------+
| c1   | c2   |
+------+------+
|   22 |   22 |
|   26 |   26 |
+------+------+
EXPLAIN BASIC select c1,c2 from t11_set where c1 > 5 and c1 != 12 minus select c1,c2 from t22_set;
Query Plan
=================================
|ID|OPERATOR            |NAME   |
---------------------------------
|0 |HASH EXCEPT DISTINCT|       |
|1 | TABLE SCAN         |t11_set|
|2 | TABLE SCAN         |t22_set|
=================================

Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])], [EXCEPT([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter([t11_set.c1 > 5], [t11_set.c1 != 12]), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter([t22_set.c1 > 5], [t22_set.c1 != 12]), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set where c1 > 5 and c1 != 12 minus select c1,c2 from t22_set;
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN BASIC select c1,c2 from t11_set union select c1,c2 from t22_set where c1 <22;
Query Plan
================================
|ID|OPERATOR           |NAME   |
--------------------------------
|0 |HASH UNION DISTINCT|       |
|1 | TABLE SCAN        |t11_set|
|2 | TABLE SCAN        |t22_set|
================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter(nil), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter([t22_set.c1 < 22]), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set union select c1,c2 from t22_set where c1 <22;
+------+------+
| c1   | c2   |
+------+------+
| NULL | NULL |
|    1 |    1 |
|    5 |    5 |
|   12 |   12 |
|   22 |   22 |
|   26 |   26 |
+------+------+
EXPLAIN BASIC select c1,c2 from t11_set intersect select c1,c2 from t22_set where c1 <22;
Query Plan
====================================
|ID|OPERATOR               |NAME   |
------------------------------------
|0 |HASH INTERSECT DISTINCT|       |
|1 | TABLE SCAN            |t11_set|
|2 | TABLE SCAN            |t22_set|
====================================

Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])], [INTERSECT([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter([t11_set.c1 < 22]), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter([t22_set.c1 < 22]), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set intersect select c1,c2 from t22_set where c1 <22;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    5 |    5 |
|   12 |   12 |
+------+------+
EXPLAIN BASIC select c1,c2 from t11_set minus select c1,c2 from t22_set where c1 <22;
Query Plan
=================================
|ID|OPERATOR            |NAME   |
---------------------------------
|0 |HASH EXCEPT DISTINCT|       |
|1 | TABLE SCAN         |t11_set|
|2 | TABLE SCAN         |t22_set|
=================================

Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])], [EXCEPT([2])]), filter(nil), rowset=256
  1 - output([t11_set.c1], [t11_set.c2]), filter(nil), rowset=256,
      access([t11_set.c1], [t11_set.c2]), partitions(p0)
  2 - output([t22_set.c1], [t22_set.c2]), filter([t22_set.c1 < 22]), rowset=256,
      access([t22_set.c1], [t22_set.c2]), partitions(p0)

select c1,c2 from t11_set minus select c1,c2 from t22_set where c1 <22;
+------+------+
| c1   | c2   |
+------+------+
| NULL | NULL |
|   22 |   22 |
|   26 |   26 |
+------+------+

## dump
set ob_query_timeout=30000000;
EXPLAIN BASIC select /*+ use_merge(a b) */SQL_CALC_FOUND_ROWS sum(c0),sum(length(c1)),count(c2),count(c3),count(c4),count(c5),count(c6),count(c7)
from (select * from t111_var a union select * from t333_var b) order by c1 limit 1;
Query Plan
===========================================
|ID|OPERATOR              |NAME           |
-------------------------------------------
|0 |LIMIT                 |               |
|1 | SCALAR GROUP BY      |               |
|2 |  SUBPLAN SCAN        |ANONYMOUS_VIEW1|
|3 |   HASH UNION DISTINCT|               |
|4 |    TABLE SCAN        |a              |
|5 |    TABLE SCAN        |b              |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)]), filter(nil), limit(1), offset(nil)
  1 - output([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)]), filter(nil),
      group(nil), agg_func([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)])
  2 - output([.c0], [.c1], [.c2], [.c3], [.c4], [.c5], [.c6], [.c7]), filter(nil),
      access([.c0], [.c1], [.c2], [.c3], [.c4], [.c5], [.c6], [.c7])
  3 - output([UNION([1])], [UNION([2])], [UNION([3])], [UNION([4])], [UNION([5])], [UNION([6])], [UNION([7])], [UNION([8])]), filter(nil)
  4 - output([a.c0], [a.c1], [a.c2], [a.c3], [a.c4], [a.c5], [a.c6], [a.c7]), filter(nil),
      access([a.c0], [a.c1], [a.c2], [a.c3], [a.c4], [a.c5], [a.c6], [a.c7]), partitions(p0)
  5 - output([b.c0], [b.c1], [b.c2], [b.c3], [b.c4], [b.c5], [b.c6], [b.c7]), filter(nil),
      access([b.c0], [b.c1], [b.c2], [b.c3], [b.c4], [b.c5], [b.c6], [b.c7]), partitions(p0)

select /*+ use_merge(a b) */SQL_CALC_FOUND_ROWS sum(c0),sum(length(c1)),count(c2),count(c3),count(c4),count(c5),count(c6),count(c7)
from (select * from t111_var a union select * from t333_var b) order by c1 limit 1;
+-------------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+
| sum(c0)     | sum(length(c1)) | count(c2) | count(c3) | count(c4) | count(c5) | count(c6) | count(c7) |
+-------------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+
| 28444444928 |         1024000 |       512 |       512 |       512 |       512 |       512 |       512 |
+-------------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+

EXPLAIN BASIC select /*+ use_merge(a b) */SQL_CALC_FOUND_ROWS sum(c0),sum(length(c1)),count(c2),count(c3),count(c4),count(c5),count(c6),count(c7)
from (select * from t111_var a intersect select * from t333_var b) order by c1 limit 1;
Query Plan
===============================================
|ID|OPERATOR                  |NAME           |
-----------------------------------------------
|0 |LIMIT                     |               |
|1 | SCALAR GROUP BY          |               |
|2 |  SUBPLAN SCAN            |ANONYMOUS_VIEW1|
|3 |   HASH INTERSECT DISTINCT|               |
|4 |    TABLE SCAN            |b              |
|5 |    TABLE SCAN            |a              |
===============================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)]), filter(nil), limit(1), offset(nil)
  1 - output([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)]), filter(nil),
      group(nil), agg_func([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)])
  2 - output([.c0], [.c1], [.c2], [.c3], [.c4], [.c5], [.c6], [.c7]), filter(nil),
      access([.c0], [.c1], [.c2], [.c3], [.c4], [.c5], [.c6], [.c7])
  3 - output([INTERSECT([1])], [INTERSECT([2])], [INTERSECT([3])], [INTERSECT([4])], [INTERSECT([5])], [INTERSECT([6])], [INTERSECT([7])], [INTERSECT([8])]), filter(nil)
  4 - output([b.c0], [b.c1], [b.c2], [b.c3], [b.c4], [b.c5], [b.c6], [b.c7]), filter(nil),
      access([b.c0], [b.c1], [b.c2], [b.c3], [b.c4], [b.c5], [b.c6], [b.c7]), partitions(p0)
  5 - output([a.c0], [a.c1], [a.c2], [a.c3], [a.c4], [a.c5], [a.c6], [a.c7]), filter(nil),
      access([a.c0], [a.c1], [a.c2], [a.c3], [a.c4], [a.c5], [a.c6], [a.c7]), partitions(p0)

select /*+ use_merge(a b) */SQL_CALC_FOUND_ROWS sum(c0),sum(length(c1)),count(c2),count(c3),count(c4),count(c5),count(c6),count(c7)
from (select * from t111_var a intersect select * from t333_var b) order by c1 limit 1;
+-------------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+
| sum(c0)     | sum(length(c1)) | count(c2) | count(c3) | count(c4) | count(c5) | count(c6) | count(c7) |
+-------------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+
| 28444444928 |         1024000 |       512 |       512 |       512 |       512 |       512 |       512 |
+-------------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+

##bug todo @yanhua
EXPLAIN BASIC select /*+ use_merge(a b) */SQL_CALC_FOUND_ROWS sum(c0),sum(length(c1)),count(c2),count(c3),count(c4),count(c5),count(c6),count(c7)
from (select * from t111_var a minus select * from t333_var b) order by c1 limit 1;
Query Plan
============================================
|ID|OPERATOR               |NAME           |
--------------------------------------------
|0 |LIMIT                  |               |
|1 | SCALAR GROUP BY       |               |
|2 |  SUBPLAN SCAN         |ANONYMOUS_VIEW1|
|3 |   HASH EXCEPT DISTINCT|               |
|4 |    TABLE SCAN         |a              |
|5 |    TABLE SCAN         |b              |
============================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)]), filter(nil), limit(1), offset(nil)
  1 - output([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)]), filter(nil),
      group(nil), agg_func([T_FUN_SUM(.c0)], [T_FUN_SUM(length(.c1))], [T_FUN_COUNT(.c2)], [T_FUN_COUNT(.c3)], [T_FUN_COUNT(.c4)], [T_FUN_COUNT(.c5)], [T_FUN_COUNT(.c6)], [T_FUN_COUNT(.c7)])
  2 - output([.c0], [.c1], [.c2], [.c3], [.c4], [.c5], [.c6], [.c7]), filter(nil),
      access([.c0], [.c1], [.c2], [.c3], [.c4], [.c5], [.c6], [.c7])
  3 - output([EXCEPT([1])], [EXCEPT([2])], [EXCEPT([3])], [EXCEPT([4])], [EXCEPT([5])], [EXCEPT([6])], [EXCEPT([7])], [EXCEPT([8])]), filter(nil)
  4 - output([a.c0], [a.c1], [a.c2], [a.c3], [a.c4], [a.c5], [a.c6], [a.c7]), filter(nil),
      access([a.c0], [a.c1], [a.c2], [a.c3], [a.c4], [a.c5], [a.c6], [a.c7]), partitions(p0)
  5 - output([b.c0], [b.c1], [b.c2], [b.c3], [b.c4], [b.c5], [b.c6], [b.c7]), filter(nil),
      access([b.c0], [b.c1], [b.c2], [b.c3], [b.c4], [b.c5], [b.c6], [b.c7]), partitions(p0)

select /*+ use_merge(a b) */SQL_CALC_FOUND_ROWS sum(c0),sum(length(c1)),count(c2),count(c3),count(c4),count(c5),count(c6),count(c7)
from (select * from t111_var a minus select * from t333_var b) order by c1 limit 1;
+---------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+
| sum(c0) | sum(length(c1)) | count(c2) | count(c3) | count(c4) | count(c5) | count(c6) | count(c7) |
+---------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+
|    NULL |            NULL |         0 |         0 |         0 |         0 |         0 |         0 |
+---------+-----------------+-----------+-----------+-----------+-----------+-----------+-----------+

CREATE TABLE `tbl_379` (
  `col_2194` datetime NOT NULL DEFAULT '2023-02-25 00:00:00',
  `col_2195` year(4) NOT NULL DEFAULT '2021',
  `col_2196` varchar(292) NOT NULL,
  `col_2198` set('Alice','Bob','Charlie','David') NOT NULL DEFAULT 'Bob',
  `col_2199` blob DEFAULT NULL,
  `col_2201` time NOT NULL,
  `col_2202` int(10) unsigned NOT NULL DEFAULT '1522071894',
  `col_2203` time NOT NULL,
  `col_2204` varchar(46) NOT NULL,
  `col_2205` char(81) NOT NULL DEFAULT 'mCTOI',
  `col_20957` varchar(153) NOT NULL DEFAULT 'y@Q3E*O65wK',
  PRIMARY KEY (`col_2202`, `col_2196`, `col_2194`, `col_2201`)
) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0
 partition by hash(col_2202)
(partition p0,
partition p1,
partition p2,
partition p3,
partition p4,
partition p5,
partition p6,
partition p7,
partition p8,
partition p9,
partition p10,
partition p11,
partition p12,
partition p13,
partition p14,
partition p15,
partition p16,
partition p17,
partition p18,
partition p19,
partition p20,
partition p21,
partition p22,
partition p23,
partition p24,
partition p25,
partition p26,
partition p27,
partition p28,
partition p29,
partition p30,
partition p31,
partition p32,
partition p33,
partition p34,
partition p35,
partition p36,
partition p37,
partition p38,
partition p39,
partition p40,
partition p41,
partition p42,
partition p43,
partition p44,
partition p45,
partition p46,
partition p47,
partition p48,
partition p49,
partition p50,
partition p51,
partition p52,
partition p53,
partition p54,
partition p55,
partition p56,
partition p57,
partition p58,
partition p59,
partition p60,
partition p61,
partition p62,
partition p63,
partition p64,
partition p65,
partition p66,
partition p67,
partition p68,
partition p69,
partition p70,
partition p71,
partition p72,
partition p73,
partition p74,
partition p75,
partition p76,
partition p77,
partition p78,
partition p79,
partition p80,
partition p81,
partition p82,
partition p83,
partition p84,
partition p85,
partition p86,
partition p87);

CREATE TABLE `tbl_711` (
  `col_11992` smallint(5) unsigned DEFAULT '48585',
  `col_11994` text DEFAULT NULL,
  `col_11995` char(236) NOT NULL,
  `col_11996` char(50) NOT NULL,
  `col_11997` char(55) ,
  `col_11998` decimal(65,29) DEFAULT NULL,
  `col_11999` tinyint(3) unsigned NOT NULL,
  PRIMARY KEY (`col_11995`, `col_11996`, `col_11999`),
  UNIQUE KEY `idx_1523` (`col_11992`, `col_11998`, `col_11995`(3)) BLOCK_SIZE 16384 GLOBAL,
  KEY `idx_1524` (`col_11997`) BLOCK_SIZE 16384 GLOBAL
) DEFAULT CHARSET = utf8mb4 ROW_FORMAT = DYNAMIC COMPRESSION = 'zstd_1.3.8' REPLICA_NUM = 1 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = FALSE TABLET_SIZE = 134217728 PCTFREE = 0;

explain_protocol: 0
ERROR 42000: Invalid numeric
ERROR HY000: Incorrect integer value
ERROR 42000: Invalid numeric
ERROR HY000: Incorrect integer value
ERROR 42000: Invalid numeric
ERROR 42000: Invalid numeric
ERROR HY000: Incorrect integer value
ERROR 42000: Invalid numeric
ERROR 42000: Invalid numeric
ERROR 42000: Invalid numeric
explain_protocol: 1
set global ob_sql_work_area_percentage = 80;

EXPLAIN BASIC select count(*) from (  (SELECT /*+ PARALLEL( 3 ) */ tbl_711.col_11997 AS r0 ,
        min( tbl_711.col_11992 )
      OVER w AS r1 , repeat( tbl_711.col_11994 , tbl_711.col_11992 ) AS r2 , last_value( tbl_711.col_11997 )
      OVER w AS r3 , CUME_DIST()
      OVER w AS r4 , ucase( tbl_711.col_11994 ) AS r5 , nullif( tbl_711.col_11995 , tbl_711.col_11995 ) AS r6 , last_value( tbl_711.col_11992 )
      OVER w AS r7
  FROM tbl_711 window w AS (
  ORDER BY  col_11995,col_11998,col_11997,col_11992,col_11996,col_11999,col_11994 )
  ORDER BY  r0,r1,r2,r3,r4,r5,r6,r7 ) except
  (SELECT /*+ PARALLEL( 3 ) */ row_number()
      OVER w AS r0 , var_samp( tbl_379.col_2204 ) AS r1 , var_pop( tbl_379.col_2203 ) AS r2 , min( tbl_379.col_2202 )
      OVER w AS r3 , length( tbl_379.col_2205 ) AS r4 , rank()
      OVER w AS r5 , tbl_379.col_2203 AS r6 , tbl_379.col_2198 AS r7
  FROM tbl_379
  WHERE not( tbl_379.col_2205
      BETWEEN 'Q$*P&QBAHS'
          AND '9K26b0IOapA%' )
          AND not( tbl_379.col_2202 < 3742580860 ) window w AS ( partition by col_2201,col_2196,col_2195,col_2202,col_20957,col_2198,col_2205,col_2204,col_2203,col_2194,col_2199
  ORDER BY  col_2199,col_2194,col_2195,col_2203,col_2204,col_2205,col_2198,col_20957,col_2196,col_2201,col_2202 )
  ORDER BY  r0,r1,r2,r3,r4,r5,r6,r7 )
ORDER BY  1 limit 589);
Query Plan
=====================================================
|ID|OPERATOR                        |NAME           |
-----------------------------------------------------
|0 |SCALAR GROUP BY                 |               |
|1 | SUBPLAN SCAN                   |ANONYMOUS_VIEW1|
|2 |  TOP-N SORT                    |               |
|3 |   HASH EXCEPT DISTINCT         |               |
|4 |    SORT                        |               |
|5 |     WINDOW FUNCTION            |               |
|6 |      PX COORDINATOR MERGE SORT |               |
|7 |       EXCHANGE OUT DISTR       |:EX10000       |
|8 |        SORT                    |               |
|9 |         PX BLOCK ITERATOR      |               |
|10|          TABLE SCAN            |tbl_711        |
|11|    WINDOW FUNCTION             |               |
|12|     SCALAR GROUP BY            |               |
|13|      PX COORDINATOR            |               |
|14|       EXCHANGE OUT DISTR       |:EX20000       |
|15|        MERGE GROUP BY          |               |
|16|         PX PARTITION ITERATOR  |               |
|17|          TABLE SCAN            |tbl_379        |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(*)]), filter(nil),
      group(nil), agg_func([T_FUN_COUNT(*)])
  1 - output(nil), filter(nil),
      access(nil)
  2 - output([EXCEPT([1])], [EXCEPT([2])], [EXCEPT([3])], [EXCEPT([4])], [EXCEPT([5])], [EXCEPT([6])], [EXCEPT([7])], [EXCEPT([8])]), filter(nil), sort_keys([EXCEPT([1]), ASC]), topn(589)
  3 - output([EXCEPT([1])], [EXCEPT([2])], [EXCEPT([3])], [EXCEPT([4])], [EXCEPT([5])], [EXCEPT([6])], [EXCEPT([7])], [EXCEPT([8])]), filter(nil)
  4 - output([tbl_711.col_11997], [cast(T_FUN_MIN(tbl_711.col_11992), DOUBLE(-1, -1))], [repeat(cast(tbl_711.col_11994, VARCHAR(1048576)), cast(tbl_711.col_11992, BIGINT(-1, 0)))], [T_WIN_FUN_NTH_VALUE(tbl_711.col_11997,1)], [T_WIN_FUN_CUME_DIST()], [upper(cast(tbl_711.col_11994, LONGTEXT(536870911)))], [nullif(tbl_711.col_11995, tbl_711.col_11995)], [cast(T_WIN_FUN_NTH_VALUE(tbl_711.col_11992,1), VARCHAR(23))]), filter(nil), sort_keys([tbl_711.col_11997, ASC], [T_FUN_MIN(tbl_711.col_11992), ASC], [repeat(cast(tbl_711.col_11994, VARCHAR(1048576)), cast(tbl_711.col_11992, BIGINT(-1, 0))), ASC], [T_WIN_FUN_NTH_VALUE(tbl_711.col_11997,1), ASC], [T_WIN_FUN_CUME_DIST(), ASC], [upper(cast(tbl_711.col_11994, LONGTEXT(536870911))), ASC], [nullif(tbl_711.col_11995, tbl_711.col_11995), ASC], [T_WIN_FUN_NTH_VALUE(tbl_711.col_11992,1), ASC])
  5 - output([tbl_711.col_11997], [T_FUN_MIN(tbl_711.col_11992)], [T_WIN_FUN_NTH_VALUE(tbl_711.col_11997,1)], [T_WIN_FUN_CUME_DIST()], [T_WIN_FUN_NTH_VALUE(tbl_711.col_11992,1)], [tbl_711.col_11992], [tbl_711.col_11995], [tbl_711.col_11994]), filter(nil),
      win_expr(T_FUN_MIN(tbl_711.col_11992)), partition_by(nil), order_by([tbl_711.col_11995, ASC], [tbl_711.col_11998, ASC], [tbl_711.col_11997, ASC], [tbl_711.col_11992, ASC], [tbl_711.col_11996, ASC], [tbl_711.col_11999, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
      win_expr(T_WIN_FUN_NTH_VALUE(tbl_711.col_11997,1)), partition_by(nil), order_by([tbl_711.col_11995, ASC], [tbl_711.col_11998, ASC], [tbl_711.col_11997, ASC], [tbl_711.col_11992, ASC], [tbl_711.col_11996, ASC], [tbl_711.col_11999, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
      win_expr(T_WIN_FUN_CUME_DIST()), partition_by(nil), order_by([tbl_711.col_11995, ASC], [tbl_711.col_11998, ASC], [tbl_711.col_11997, ASC], [tbl_711.col_11992, ASC], [tbl_711.col_11996, ASC], [tbl_711.col_11999, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(UNBOUNDED FOLLOWING)
      win_expr(T_WIN_FUN_NTH_VALUE(tbl_711.col_11992,1)), partition_by(nil), order_by([tbl_711.col_11995, ASC], [tbl_711.col_11998, ASC], [tbl_711.col_11997, ASC], [tbl_711.col_11992, ASC], [tbl_711.col_11996, ASC], [tbl_711.col_11999, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
  6 - output([tbl_711.col_11997], [tbl_711.col_11992], [tbl_711.col_11995], [tbl_711.col_11998], [tbl_711.col_11996], [tbl_711.col_11999], [tbl_711.col_11994]), filter(nil), sort_keys([tbl_711.col_11995, ASC], [tbl_711.col_11998, ASC], [tbl_711.col_11997, ASC], [tbl_711.col_11992, ASC], [tbl_711.col_11996, ASC], [tbl_711.col_11999, ASC])
  7 - output([tbl_711.col_11997], [tbl_711.col_11992], [tbl_711.col_11995], [tbl_711.col_11998], [tbl_711.col_11996], [tbl_711.col_11999], [tbl_711.col_11994]), filter(nil), dop=3
  8 - output([tbl_711.col_11997], [tbl_711.col_11992], [tbl_711.col_11995], [tbl_711.col_11998], [tbl_711.col_11996], [tbl_711.col_11999], [tbl_711.col_11994]), filter(nil), sort_keys([tbl_711.col_11995, ASC], [tbl_711.col_11998, ASC], [tbl_711.col_11997, ASC], [tbl_711.col_11992, ASC], [tbl_711.col_11996, ASC], [tbl_711.col_11999, ASC])
  9 - output([tbl_711.col_11995], [tbl_711.col_11996], [tbl_711.col_11999], [tbl_711.col_11998], [tbl_711.col_11997], [tbl_711.col_11992], [tbl_711.col_11994]), filter(nil)
  10 - output([tbl_711.col_11995], [tbl_711.col_11996], [tbl_711.col_11999], [tbl_711.col_11998], [tbl_711.col_11997], [tbl_711.col_11992], [tbl_711.col_11994]), filter(nil),
      access([tbl_711.col_11995], [tbl_711.col_11996], [tbl_711.col_11999], [tbl_711.col_11998], [tbl_711.col_11997], [tbl_711.col_11992], [tbl_711.col_11994]), partitions(p0)
  11 - output([cast(T_WIN_FUN_ROW_NUMBER(), CHAR(55))], [cast(cast(T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)) * cast(tbl_379.col_2204, DOUBLE(-1, -1)))), DECIMAL(65, 30)) - cast(T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)))), DECIMAL(65, 30)) * cast(T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)))), DECIMAL(65, 30)) / cast(T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1)))), DECIMAL(20, 0)) / cast(CASE WHEN T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1)))) - 1 != 0 THEN T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1)))) - 1 ELSE NULL END, DECIMAL(20, 0)), DOUBLE(-1, -1))], [cast(cast(cast(T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))), DECIMAL(65, 30)) / cast(T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))), DECIMAL(20, 0)) - cast(T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)))), DECIMAL(65, 30)) * cast(T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)))), DECIMAL(65, 30)) / cast(T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)))) * T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)))), DECIMAL(40, 0)), DOUBLE(-1, -1)), LONGTEXT(536870911))], [cast(T_FUN_MIN(tbl_379.col_2202), CHAR(55))], [cast(length(cast(tbl_379.col_2205, VARCHAR(1048576))), DOUBLE(-1, -1))], [cast(T_WIN_FUN_RANK(), LONGTEXT(536870911))], [cast(tbl_379.col_2203, CHAR(236))], [cast(set_to_str('', tbl_379.col_2198), VARCHAR(23))]), filter(nil),
      win_expr(T_WIN_FUN_ROW_NUMBER()), partition_by([tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201]), order_by([tbl_379.col_2199, ASC], [tbl_379.col_2194, ASC], [tbl_379.col_2195, ASC], [tbl_379.col_2203, ASC], [tbl_379.col_2204, ASC], [tbl_379.col_2205, ASC], [tbl_379.col_2198, ASC], [tbl_379.col_20957, ASC], [tbl_379.col_2196, ASC], [tbl_379.col_2201, ASC], [tbl_379.col_2202, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(UNBOUNDED FOLLOWING)
      win_expr(T_FUN_MIN(tbl_379.col_2202)), partition_by([tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201]), order_by([tbl_379.col_2199, ASC], [tbl_379.col_2194, ASC], [tbl_379.col_2195, ASC], [tbl_379.col_2203, ASC], [tbl_379.col_2204, ASC], [tbl_379.col_2205, ASC], [tbl_379.col_2198, ASC], [tbl_379.col_20957, ASC], [tbl_379.col_2196, ASC], [tbl_379.col_2201, ASC], [tbl_379.col_2202, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
      win_expr(T_WIN_FUN_RANK()), partition_by([tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201]), order_by([tbl_379.col_2199, ASC], [tbl_379.col_2194, ASC], [tbl_379.col_2195, ASC], [tbl_379.col_2203, ASC], [tbl_379.col_2204, ASC], [tbl_379.col_2205, ASC], [tbl_379.col_2198, ASC], [tbl_379.col_20957, ASC], [tbl_379.col_2196, ASC], [tbl_379.col_2201, ASC], [tbl_379.col_2202, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(UNBOUNDED FOLLOWING)
  12 - output([T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1))))], [tbl_379.col_2204], [T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)) * cast(tbl_379.col_2204, DOUBLE(-1, -1))))], [T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1))))], [T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1))))], [tbl_379.col_2203], [T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1))))], [T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1))))], [T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1))))], [tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201], [tbl_379.col_2205], [tbl_379.col_2195], [tbl_379.col_20957], [tbl_379.col_2198], [tbl_379.col_2199]), filter(nil),
      group(nil), agg_func([T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1))))], [T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)) * cast(tbl_379.col_2204, DOUBLE(-1, -1))))], [T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1))))], [T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1))))], [T_FUN_SUM(T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1))))], [T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1))))], [T_FUN_COUNT_SUM(T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1))))])
  13 - output([tbl_379.col_2204], [tbl_379.col_2203], [T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)) * cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201], [tbl_379.col_2205], [tbl_379.col_2195], [tbl_379.col_20957], [tbl_379.col_2198], [tbl_379.col_2199]), filter(nil)
  14 - output([tbl_379.col_2204], [tbl_379.col_2203], [T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)) * cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201], [tbl_379.col_2205], [tbl_379.col_2195], [tbl_379.col_20957], [tbl_379.col_2198], [tbl_379.col_2199]), filter(nil), dop=3
  15 - output([tbl_379.col_2204], [tbl_379.col_2203], [T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)) * cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201], [tbl_379.col_2205], [tbl_379.col_2195], [tbl_379.col_20957], [tbl_379.col_2198], [tbl_379.col_2199]), filter(nil),
      group(nil), agg_func([T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2204, DOUBLE(-1, -1)) * cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2204, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)))], [T_FUN_COUNT(cast(tbl_379.col_2203, DOUBLE(-1, -1)) * cast(tbl_379.col_2203, DOUBLE(-1, -1)))])
  16 - output([tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201], [tbl_379.col_2205], [tbl_379.col_2195], [tbl_379.col_20957], [tbl_379.col_2198], [tbl_379.col_2204], [tbl_379.col_2203], [tbl_379.col_2199]), filter(nil)
  17 - output([tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201], [tbl_379.col_2205], [tbl_379.col_2195], [tbl_379.col_20957], [tbl_379.col_2198], [tbl_379.col_2204], [tbl_379.col_2203], [tbl_379.col_2199]), filter([tbl_379.col_2205 < 'Q$*P&QBAHS' OR tbl_379.col_2205 > '9K26b0IOapA%']),
      access([tbl_379.col_2202], [tbl_379.col_2196], [tbl_379.col_2194], [tbl_379.col_2201], [tbl_379.col_2205], [tbl_379.col_2195], [tbl_379.col_20957], [tbl_379.col_2198], [tbl_379.col_2204], [tbl_379.col_2203], [tbl_379.col_2199]), partitions(p[0-87])

select count(*) from (  (SELECT /*+ PARALLEL( 3 ) */ tbl_711.col_11997 AS r0 ,
        min( tbl_711.col_11992 )
      OVER w AS r1 , repeat( tbl_711.col_11994 , tbl_711.col_11992 ) AS r2 , last_value( tbl_711.col_11997 )
      OVER w AS r3 , CUME_DIST()
      OVER w AS r4 , ucase( tbl_711.col_11994 ) AS r5 , nullif( tbl_711.col_11995 , tbl_711.col_11995 ) AS r6 , last_value( tbl_711.col_11992 )
      OVER w AS r7
  FROM tbl_711 window w AS (
  ORDER BY  col_11995,col_11998,col_11997,col_11992,col_11996,col_11999,col_11994 )
  ORDER BY  r0,r1,r2,r3,r4,r5,r6,r7 ) except
  (SELECT /*+ PARALLEL( 3 ) */ row_number()
      OVER w AS r0 , var_samp( tbl_379.col_2204 ) AS r1 , var_pop( tbl_379.col_2203 ) AS r2 , min( tbl_379.col_2202 )
      OVER w AS r3 , length( tbl_379.col_2205 ) AS r4 , rank()
      OVER w AS r5 , tbl_379.col_2203 AS r6 , tbl_379.col_2198 AS r7
  FROM tbl_379
  WHERE not( tbl_379.col_2205
      BETWEEN 'Q$*P&QBAHS'
          AND '9K26b0IOapA%' )
          AND not( tbl_379.col_2202 < 3742580860 ) window w AS ( partition by col_2201,col_2196,col_2195,col_2202,col_20957,col_2198,col_2205,col_2204,col_2203,col_2194,col_2199
  ORDER BY  col_2199,col_2194,col_2195,col_2203,col_2204,col_2205,col_2198,col_20957,col_2196,col_2201,col_2202 )
  ORDER BY  r0,r1,r2,r3,r4,r5,r6,r7 )
ORDER BY  1 limit 589);
+----------+
| count(*) |
+----------+
|      189 |
+----------+

set global ob_sql_work_area_percentage = 5;
drop table tbl_711;
drop table tbl_379;

drop tenant dump_tenant force;
drop resource pool new_pool1;
drop resource unit new_box1;
