result_format: 4
explain_protocol: 2
DROP DATABASE IF EXISTS DB_SIMPLIFY;
CREATE DATABASE DB_SIMPLIFY;
USE DB_SIMPLIFY;

********************* test for basic transform *********
drop table if exists t1, t2, t3;
create table t1(c1 int primary key);
create table t2(c2 int primary key);
create table t3(c3 int primary key);
EXPLAIN insert into t1 values(1),(2),(3),(4),(5);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |5        |39  |
|1 | EXPRESSION       |    |5        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t1: ({t1: (t1.c1)})}]),
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.c1)])
  1 - output([__values.c1]), filter(nil)
      values({1}, {2}, {3}, {4}, {5})

insert into t1 values(1),(2),(3),(4),(5);
EXPLAIN insert into t2 values(11),(12),(13),(14),(15);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |5        |39  |
|1 | EXPRESSION       |    |5        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t2: ({t2: (t2.c2)})}]),
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.c2)])
  1 - output([__values.c2]), filter(nil)
      values({11}, {12}, {13}, {14}, {15})

insert into t2 values(11),(12),(13),(14),(15);
EXPLAIN insert into t3 values(111),(112),(113),(114),(115);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |5        |39  |
|1 | EXPRESSION       |    |5        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t3: ({t3: (t3.c3)})}]),
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.c3)])
  1 - output([__values.c3]), filter(nil)
      values({111}, {112}, {113}, {114}, {115})

insert into t3 values(111),(112),(113),(114),(115);

drop table if exists is_c1, is_c2;
create table is_c1(c1 int);
create table is_c2(c1 int, c2 int);

set autocommit = 0;

EXPLAIN select /*+no_rewrite*/ max(c1) from t1 group by c1 desc;
Query Plan
==============================================
|ID|OPERATOR      |NAME       |EST. ROWS|COST|
----------------------------------------------
|0 |MERGE GROUP BY|           |5        |46  |
|1 | TABLE SCAN   |t1(Reverse)|5        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(t1.c1)]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MAX(t1.c1)])
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ max(c1) from t1 group by c1 desc;
+---------+
| max(c1) |
+---------+
|       5 |
|       4 |
|       3 |
|       2 |
|       1 |
+---------+
EXPLAIN select max(c1) from t1 group by c1 desc;
Query Plan
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|5        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select max(c1) from t1 group by c1 desc;
+---------+
| max(c1) |
+---------+
|       5 |
|       4 |
|       3 |
|       2 |
|       1 |
+---------+

EXPLAIN select /*+no_rewrite*/ c1 from t1 order by c1,c1,c1;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ c1 from t1 order by c1,c1,c1;
+----+
| c1 |
+----+
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
+----+
EXPLAIN select c1 from t1 order by c1,c1,c1;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select c1 from t1 order by c1,c1,c1;
+----+
| c1 |
+----+
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
+----+
EXPLAIN insert into is_c1 select c1 from t1 order by c1,c1,c1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |5        |84  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|5        |46  |
|2 |  TABLE SCAN |t1             |5        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

insert into is_c1 select c1 from t1 order by c1,c1,c1;

## test for subquery transform  ###
EXPLAIN select /*+no_rewrite*/ * from (select max(c1) from t1 group by c1 desc) as tmp;
Query Plan
============================================
|ID|OPERATOR    |NAME       |EST. ROWS|COST|
--------------------------------------------
|0 |SUBPLAN SCAN|tmp        |5        |46  |
|1 | TABLE SCAN |t1(Reverse)|5        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output([tmp.max(c1)]), filter(nil), rowset=256,
      access([tmp.max(c1)])
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ * from (select max(c1) from t1 group by c1 desc) as tmp;
+---------+
| max(c1) |
+---------+
|       5 |
|       4 |
|       3 |
|       2 |
|       1 |
+---------+
EXPLAIN select * from (select max(c1) from t1 group by c1 desc) as tmp;
Query Plan
==========================================
|ID|OPERATOR  |NAME       |EST. ROWS|COST|
------------------------------------------
|0 |TABLE SCAN|t1(Reverse)|5        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select max(c1) from t1 group by c1 desc) as tmp;
+---------+
| max(c1) |
+---------+
|       5 |
|       4 |
|       3 |
|       2 |
|       1 |
+---------+
EXPLAIN update t2 set t2.c2 = t2.c2 + 1 where t2.c2 in (select max(c1) from t1 group by c1 desc);
Query Plan
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |UPDATE                 |    |5        |144 |
|1 | NESTED-LOOP JOIN      |    |5        |82  |
|2 |  TABLE SCAN           |t2  |5        |46  |
|3 |  DISTRIBUTED TABLE GET|t1  |1        |7   |
================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2: ({t2: (t2.c2)})}]),
      update([t2.c2=column_conv(INT,PS:(11,0),NOT NULL,cast(t2.c2 + 1, INT(-1, 0)))])
  1 - output([t2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t2.c2])
  2 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  3 - output(nil), filter(nil), rowset=256,
      access([GROUP_ID]), partitions(p0)

update t2 set t2.c2 = t2.c2 + 1 where t2.c2 in (select max(c1) from t1 group by c1 desc);
EXPLAIN select * from t2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)

select * from t2;
+----+
| c2 |
+----+
| 11 |
| 12 |
| 13 |
| 14 |
| 15 |
+----+
rollback;
EXPLAIN update /*+NO_REWRITE*/t2 set t2.c2 = t2.c2 + 1 where t2.c2 in (select /*+NO_REWRITE*/max(c1) from t1 group by c1 desc);
Query Plan
================================================
|ID|OPERATOR        |NAME       |EST. ROWS|COST|
------------------------------------------------
|0 |UPDATE          |           |3        |135 |
|1 | SUBPLAN FILTER |           |3        |92  |
|2 |  TABLE SCAN    |t2         |5        |46  |
|3 |  MERGE GROUP BY|           |5        |46  |
|4 |   TABLE SCAN   |t1(Reverse)|5        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2: ({t2: (t2.c2)})}]),
      update([t2.c2=column_conv(INT,PS:(11,0),NOT NULL,cast(t2.c2 + 1, INT(-1, 0)))])
  1 - output([t2.c2]), filter([t2.c2 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  3 - output([T_FUN_MAX(t1.c1)]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MAX(t1.c1)])
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

update /*+NO_REWRITE*/t2 set t2.c2 = t2.c2 + 1 where t2.c2 in (select /*+NO_REWRITE*/max(c1) from t1 group by c1 desc);
EXPLAIN select * from t2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)

select * from t2;
+----+
| c2 |
+----+
| 11 |
| 12 |
| 13 |
| 14 |
| 15 |
+----+
rollback;
EXPLAIN select /*+no_rewrite*/ c2 from t2 where c2 = (select max(c1) from t1 group by c1 desc limit 1);
Query Plan
==============================================
|ID|OPERATOR      |NAME       |EST. ROWS|COST|
----------------------------------------------
|0 |SUBPLAN FILTER|           |1        |91  |
|1 | TABLE GET    |t2         |1        |46  |
|2 | TABLE SCAN   |t1(Reverse)|1        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

select /*+no_rewrite*/ c2 from t2 where c2 = (select max(c1) from t1 group by c1 desc limit 1);
+----+
| c2 |
+----+
+----+
EXPLAIN select c2 from t2 where c2 = (select max(c1) from t1 group by c1 desc limit 1);
Query Plan
==============================================
|ID|OPERATOR      |NAME       |EST. ROWS|COST|
----------------------------------------------
|0 |SUBPLAN FILTER|           |1        |91  |
|1 | TABLE GET    |t2         |1        |46  |
|2 | TABLE SCAN   |t1(Reverse)|1        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

select c2 from t2 where c2 = (select max(c1) from t1 group by c1 desc limit 1);
+----+
| c2 |
+----+
+----+
EXPLAIN delete from t2 where c2 = (select max(c1) from t1 group by c1 desc limit 1);
Query Plan
===============================================
|ID|OPERATOR       |NAME       |EST. ROWS|COST|
-----------------------------------------------
|0 |DELETE         |           |1        |103 |
|1 | SUBPLAN FILTER|           |1        |91  |
|2 |  TABLE GET    |t2         |1        |46  |
|3 |  TABLE SCAN   |t1(Reverse)|1        |46  |
===============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2: ({t2: (t2.c2)})}])
  1 - output([t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

delete from t2 where c2 = (select max(c1) from t1 group by c1 desc limit 1);
EXPLAIN insert into is_c1 select c2 from t2 where c2 = (select max(c1) from t1 group by c1 desc limit 1);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |INSERT          |               |1        |104 |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |91  |
|2 |  SUBPLAN FILTER|               |1        |91  |
|3 |   TABLE GET    |t2             |1        |46  |
|4 |   TABLE SCAN   |t1(Reverse)    |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c2])
  2 - output([t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

insert into is_c1 select c2 from t2 where c2 = (select max(c1) from t1 group by c1 desc limit 1);

EXPLAIN select /*+no_rewrite*/ * from (select c1 from t1 order by c1,c1,c1) as tmp;
Query Plan
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |SUBPLAN SCAN|tmp |5        |46  |
|1 | TABLE SCAN |t1  |5        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([tmp.c1]), filter(nil), rowset=256,
      access([tmp.c1])
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ * from (select c1 from t1 order by c1,c1,c1) as tmp;
+----+
| c1 |
+----+
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
+----+
EXPLAIN select * from (select c1 from t1 order by c1,c1,c1) as tmp;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select c1 from t1 order by c1,c1,c1) as tmp;
+----+
| c1 |
+----+
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
+----+

EXPLAIN select /*+no_rewrite*/ c2 from t2 where c2 = (select c1 from t1 order by c1,c1,c1 limit 1);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE GET    |t2  |1        |46  |
|2 | TABLE SCAN   |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

select /*+no_rewrite*/ c2 from t2 where c2 = (select c1 from t1 order by c1,c1,c1 limit 1);
+----+
| c2 |
+----+
+----+
EXPLAIN select c2 from t2 where c2 = (select c1 from t1 order by c1,c1,c1 limit 1);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE GET    |t2  |1        |46  |
|2 | TABLE SCAN   |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

select c2 from t2 where c2 = (select c1 from t1 order by c1,c1,c1 limit 1);
+----+
| c2 |
+----+
+----+
EXPLAIN delete from t2 where c2 = (select c1 from t1 order by c1,c1,c1 limit 1);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |DELETE         |    |1        |103 |
|1 | SUBPLAN FILTER|    |1        |91  |
|2 |  TABLE GET    |t2  |1        |46  |
|3 |  TABLE SCAN   |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2: ({t2: (t2.c2)})}])
  1 - output([t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

delete from t2 where c2 = (select c1 from t1 order by c1,c1,c1 limit 1);
EXPLAIN insert into is_c1 select c2 from t2 where c2 = (select c1 from t1 order by c1,c1,c1 limit 1);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |INSERT          |               |1        |104 |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |91  |
|2 |  SUBPLAN FILTER|               |1        |91  |
|3 |   TABLE GET    |t2             |1        |46  |
|4 |   TABLE SCAN   |t1             |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c2])
  2 - output([t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

insert into is_c1 select c2 from t2 where c2 = (select c1 from t1 order by c1,c1,c1 limit 1);

EXPLAIN select /*+no_rewrite*/ * from ((select c1 from t1 order by c1) union (select c2 from t2)) as tmp;
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SUBPLAN SCAN         |tmp |10       |91  |
|1 | MERGE UNION DISTINCT|    |10       |91  |
|2 |  TABLE SCAN         |t1  |5        |46  |
|3 |  TABLE SCAN         |t2  |5        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([tmp.c1]), filter(nil), rowset=256,
      access([tmp.c1])
  1 - output([UNION([1])]), filter(nil), rowset=256
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)

select /*+no_rewrite*/ * from ((select c1 from t1 order by c1) union (select c2 from t2)) as tmp;
+----+
| c1 |
+----+
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
| 11 |
| 12 |
| 13 |
| 14 |
| 15 |
+----+
EXPLAIN select * from ((select c1 from t1 order by c1) union (select c2 from t2)) as tmp;
Query Plan
=============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |MERGE UNION DISTINCT|    |10       |91  |
|1 | TABLE SCAN         |t1  |5        |46  |
|2 | TABLE SCAN         |t2  |5        |46  |
=============================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=256
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)

select * from ((select c1 from t1 order by c1) union (select c2 from t2)) as tmp;
+----+
| c1 |
+----+
|  1 |
|  2 |
|  3 |
|  4 |
|  5 |
| 11 |
| 12 |
| 13 |
| 14 |
| 15 |
+----+
EXPLAIN select /*+no_rewrite*/ c3 from t3 where c3 in ((select c1 from t1 order by c1) union (select c2 from t2));
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |SUBPLAN FILTER       |    |3        |138 |
|1 | TABLE SCAN          |t3  |5        |46  |
|2 | MERGE UNION DISTINCT|    |10       |91  |
|3 |  TABLE SCAN         |t1  |5        |46  |
|4 |  TABLE SCAN         |t2  |5        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([t3.c3]), filter([t3.c3 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)

select /*+no_rewrite*/ c3 from t3 where c3 in ((select c1 from t1 order by c1) union (select c2 from t2));
+----+
| c3 |
+----+
+----+
EXPLAIN select c3 from t3 where c3 in ((select c1 from t1 order by c1) union (select c2 from t2));
Query Plan
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |MERGE JOIN            |     |5        |137 |
|1 | SUBPLAN SCAN         |VIEW1|10       |91  |
|2 |  MERGE UNION DISTINCT|     |10       |91  |
|3 |   TABLE SCAN         |t1   |5        |46  |
|4 |   TABLE SCAN         |t2   |5        |46  |
|5 | TABLE SCAN           |t3   |5        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t3.c3]), filter(nil), rowset=256,
      equal_conds([t3.c3 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  5 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)

select c3 from t3 where c3 in ((select c1 from t1 order by c1) union (select c2 from t2));
+----+
| c3 |
+----+
+----+
EXPLAIN delete from t3 where c3 in ((select c1 from t1 order by c1) union (select c2 from t2));
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |DELETE                 |     |5        |169 |
|1 | MERGE JOIN            |     |5        |137 |
|2 |  SUBPLAN SCAN         |VIEW1|10       |91  |
|3 |   MERGE UNION DISTINCT|     |10       |91  |
|4 |    TABLE SCAN         |t1   |5        |46  |
|5 |    TABLE SCAN         |t2   |5        |46  |
|6 |  TABLE SCAN           |t3   |5        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t3: ({t3: (t3.c3)})}])
  1 - output([t3.c3]), filter(nil), rowset=256,
      equal_conds([t3.c3 = VIEW1.c1]), other_conds(nil)
  2 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  3 - output([UNION([1])]), filter(nil), rowset=256
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  5 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  6 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)

delete from t3 where c3 in ((select c1 from t1 order by c1) union (select c2 from t2));
EXPLAIN insert into is_c1 select c3 from t3 where c3 in ((select c1 from t1 order by c1) union (select c2 from t2));
Query Plan
============================================================
|ID|OPERATOR                |NAME           |EST. ROWS|COST|
------------------------------------------------------------
|0 |INSERT                  |               |5        |175 |
|1 | SUBPLAN SCAN           |ANONYMOUS_VIEW1|5        |137 |
|2 |  MERGE JOIN            |               |5        |137 |
|3 |   SUBPLAN SCAN         |VIEW1          |10       |91  |
|4 |    MERGE UNION DISTINCT|               |10       |91  |
|5 |     TABLE SCAN         |t1             |5        |46  |
|6 |     TABLE SCAN         |t2             |5        |46  |
|7 |   TABLE SCAN           |t3             |5        |46  |
============================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c3)])
  1 - output([ANONYMOUS_VIEW1.c3]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c3])
  2 - output([t3.c3]), filter(nil), rowset=256,
      equal_conds([t3.c3 = VIEW1.c1]), other_conds(nil)
  3 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  4 - output([UNION([1])]), filter(nil), rowset=256
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  6 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  7 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)

insert into is_c1 select c3 from t3 where c3 in ((select c1 from t1 order by c1) union (select c2 from t2));

EXPLAIN select /*+no_rewrite*/ * from ((select c1 from t1) union all (select c2 from t2) limit 2) as tmp;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |SUBPLAN SCAN |tmp |2        |91  |
|1 | LIMIT       |    |2        |91  |
|2 |  UNION ALL  |    |2        |91  |
|3 |   TABLE SCAN|t1  |2        |46  |
|4 |   TABLE SCAN|t2  |2        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([tmp.c1]), filter(nil), rowset=256,
      access([tmp.c1])
  1 - output([UNION([1])]), filter(nil), rowset=256, limit(2), offset(nil)
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(2), offset(nil)
  4 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0),
      limit(2), offset(nil)

select /*+no_rewrite*/ * from ((select c1 from t1) union all (select c2 from t2) limit 2) as tmp;
+----+
| c1 |
+----+
|  1 |
|  2 |
+----+
EXPLAIN select * from ((select c1 from t1) union all (select c2 from t2) limit 2) as tmp;
Query Plan
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |LIMIT       |    |2        |91  |
|1 | UNION ALL  |    |2        |91  |
|2 |  TABLE SCAN|t1  |2        |46  |
|3 |  TABLE SCAN|t2  |2        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])]), filter(nil), rowset=256, limit(2), offset(nil)
  1 - output([UNION([1])]), filter(nil), rowset=256
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(2), offset(nil)
  3 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0),
      limit(2), offset(nil)

select * from ((select c1 from t1) union all (select c2 from t2) limit 2) as tmp;
+----+
| c1 |
+----+
|  1 |
|  2 |
+----+
EXPLAIN select /*+no_rewrite*/ c3 from t3 where c3 in ((select c1 from t1) union all (select c2 from t2) limit 2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |3        |137 |
|1 | TABLE SCAN   |t3  |5        |46  |
|2 | LIMIT        |    |2        |91  |
|3 |  UNION ALL   |    |2        |91  |
|4 |   TABLE SCAN |t1  |2        |46  |
|5 |   TABLE SCAN |t2  |2        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t3.c3]), filter([t3.c3 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)
  2 - output([UNION([1])]), filter(nil), rowset=256, limit(2), offset(nil)
  3 - output([UNION([1])]), filter(nil), rowset=256
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(2), offset(nil)
  5 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0),
      limit(2), offset(nil)

select /*+no_rewrite*/ c3 from t3 where c3 in ((select c1 from t1) union all (select c2 from t2) limit 2);
+----+
| c3 |
+----+
+----+
EXPLAIN select c3 from t3 where c3 in ((select c1 from t1) union all (select c2 from t2) limit 2);
Query Plan
=========================================
|ID|OPERATOR       |NAME |EST. ROWS|COST|
-----------------------------------------
|0 |MERGE SEMI JOIN|     |2        |137 |
|1 | TABLE SCAN    |t3   |5        |46  |
|2 | SORT          |     |2        |91  |
|3 |  SUBPLAN SCAN |VIEW1|2        |91  |
|4 |   LIMIT       |     |2        |91  |
|5 |    UNION ALL  |     |2        |91  |
|6 |     TABLE SCAN|t1   |2        |46  |
|7 |     TABLE SCAN|t2   |2        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t3.c3]), filter(nil), rowset=256,
      equal_conds([t3.c3 = VIEW1.c1]), other_conds(nil)
  1 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)
  2 - output([VIEW1.c1]), filter(nil), rowset=256, sort_keys([VIEW1.c1, ASC])
  3 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  4 - output([UNION([1])]), filter(nil), rowset=256, limit(2), offset(nil)
  5 - output([UNION([1])]), filter(nil), rowset=256
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(2), offset(nil)
  7 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0),
      limit(2), offset(nil)

select c3 from t3 where c3 in ((select c1 from t1) union all (select c2 from t2) limit 2);
+----+
| c3 |
+----+
+----+
EXPLAIN delete from t3 where c3 in ((select c1 from t1) union all (select c2 from t2) limit 2);
Query Plan
==========================================
|ID|OPERATOR        |NAME |EST. ROWS|COST|
------------------------------------------
|0 |DELETE          |     |2        |153 |
|1 | MERGE SEMI JOIN|     |2        |137 |
|2 |  TABLE SCAN    |t3   |5        |46  |
|3 |  SORT          |     |2        |91  |
|4 |   SUBPLAN SCAN |VIEW1|2        |91  |
|5 |    LIMIT       |     |2        |91  |
|6 |     UNION ALL  |     |2        |91  |
|7 |      TABLE SCAN|t1   |2        |46  |
|8 |      TABLE SCAN|t2   |2        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t3: ({t3: (t3.c3)})}])
  1 - output([t3.c3]), filter(nil), rowset=256,
      equal_conds([t3.c3 = VIEW1.c1]), other_conds(nil)
  2 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)
  3 - output([VIEW1.c1]), filter(nil), rowset=256, sort_keys([VIEW1.c1, ASC])
  4 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  5 - output([UNION([1])]), filter(nil), rowset=256, limit(2), offset(nil)
  6 - output([UNION([1])]), filter(nil), rowset=256
  7 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(2), offset(nil)
  8 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0),
      limit(2), offset(nil)

delete from t3 where c3 in ((select c1 from t1) union all (select c2 from t2) limit 2);
EXPLAIN insert into is_c1 select c3 from t3 where c3 in ((select c1 from t1) union all (select c2 from t2) limit 2);
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |INSERT           |               |2        |156 |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|2        |137 |
|2 |  MERGE SEMI JOIN|               |2        |137 |
|3 |   TABLE SCAN    |t3             |5        |46  |
|4 |   SORT          |               |2        |91  |
|5 |    SUBPLAN SCAN |VIEW1          |2        |91  |
|6 |     LIMIT       |               |2        |91  |
|7 |      UNION ALL  |               |2        |91  |
|8 |       TABLE SCAN|t1             |2        |46  |
|9 |       TABLE SCAN|t2             |2        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_c1: ({is_c1: (is_c1.__pk_increment, is_c1.c1)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c3)])
  1 - output([ANONYMOUS_VIEW1.c3]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c3])
  2 - output([t3.c3]), filter(nil), rowset=256,
      equal_conds([t3.c3 = VIEW1.c1]), other_conds(nil)
  3 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)
  4 - output([VIEW1.c1]), filter(nil), rowset=256, sort_keys([VIEW1.c1, ASC])
  5 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  6 - output([UNION([1])]), filter(nil), rowset=256, limit(2), offset(nil)
  7 - output([UNION([1])]), filter(nil), rowset=256
  8 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(2), offset(nil)
  9 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0),
      limit(2), offset(nil)

insert into is_c1 select c3 from t3 where c3 in ((select c1 from t1) union all (select c2 from t2) limit 2);

drop table is_c1, is_c2, t1,t2,t3;

set autocommit = 1;


*********************消除subquery中的order by子句 begin*****************

drop table if exists t1, t2;
create table t1(c1 int not null, c2 int, key idx_c1(c1));
create table t2(c1 int not null, c2 int, key idx_c2(c2));
create table is_t1(c1 int);
create table is_t2(c1 int, c2 int);
insert/*trace*/into t1 values(1,2),(2,3),(3,3), (4,3),(4,4),(6,5),(6,5),(10,20);

****** no limit, elimilate order by in subquery
EXPLAIN select /*+no_rewrite*/ sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c1, c2);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |93  |
|1 | SUBPLAN FILTER|    |4        |93  |
|2 |  TABLE SCAN   |t1  |8        |46  |
|3 |  SORT         |    |8        |47  |
|4 |   TABLE SCAN  |t1  |8        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  1 - output([t1.c2], [t1.c1]), filter([t1.c2 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)
  3 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/ sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c1, c2);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|      14 |      15 |
+---------+---------+
EXPLAIN select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c1, c2);
Query Plan
====================================================
|ID|OPERATOR             |NAME      |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY      |          |1        |93  |
|1 | HASH RIGHT SEMI JOIN|          |8        |93  |
|2 |  TABLE SCAN         |t1(idx_c1)|8        |46  |
|3 |  TABLE SCAN         |t1        |8        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  1 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t1.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)

select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c1, c2);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|      14 |      15 |
+---------+---------+
EXPLAIN update t1 set c2 = c1+1 where c2 in (select c1 from t1 order by c1, c1, c2);
Query Plan
====================================================
|ID|OPERATOR             |NAME      |EST. ROWS|COST|
----------------------------------------------------
|0 |UPDATE               |          |8        |178 |
|1 | HASH RIGHT SEMI JOIN|          |8        |93  |
|2 |  TABLE SCAN         |t1(idx_c1)|8        |46  |
|3 |  TABLE SCAN         |t1        |8        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}]),
      update([t1.c2=column_conv(INT,PS:(11,0),NULL,cast(t1.c1 + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t1.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([t1.__pk_increment], [t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c2], [t1.c1]), partitions(p0)

update t1 set c2 = c1+1 where c2 in (select c1 from t1 order by c1, c1, c2);
EXPLAIN delete from t1 where c2 in (select c1 from t1 order by c1, c1, c2);
Query Plan
====================================================
|ID|OPERATOR             |NAME      |EST. ROWS|COST|
----------------------------------------------------
|0 |DELETE               |          |8        |140 |
|1 | HASH RIGHT SEMI JOIN|          |8        |93  |
|2 |  TABLE SCAN         |t1(idx_c1)|8        |46  |
|3 |  TABLE SCAN         |t1        |8        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t1.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

delete from t1 where c2 in (select c1 from t1 order by c1, c1, c2);
EXPLAIN insert into is_t2 select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c1, c2);
Query Plan
======================================================
|ID|OPERATOR          |NAME           |EST. ROWS|COST|
------------------------------------------------------
|0 |INSERT            |               |1        |15  |
|1 | SUBPLAN SCAN     |ANONYMOUS_VIEW1|1        |2   |
|2 |  SCALAR GROUP BY |               |1        |2   |
|3 |   MERGE SEMI JOIN|               |5        |2   |
|4 |    SORT          |               |5        |1   |
|5 |     TABLE SCAN   |t1             |5        |1   |
|6 |    TABLE SCAN    |t1(idx_c1)     |5        |1   |
======================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,cast(ANONYMOUS_VIEW1.sum(c1), INT(-1, 0)))], [column_conv(INT,PS:(11,0),NULL,cast(ANONYMOUS_VIEW1.sum(c2), INT(-1, 0)))])
  1 - output([ANONYMOUS_VIEW1.sum(c1)], [ANONYMOUS_VIEW1.sum(c2)]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.sum(c1)], [ANONYMOUS_VIEW1.sum(c2)])
  2 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  3 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t1.c1]), other_conds(nil)
  4 - output([t1.c2], [t1.c1]), filter(nil), rowset=256, sort_keys([t1.c2, ASC])
  5 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

insert into is_t2 select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c1, c2);


****** has limit, can't elimilate order by in subquery
EXPLAIN select /*+no_rewrite*/sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
Query Plan
==============================================
|ID|OPERATOR       |NAME      |EST. ROWS|COST|
----------------------------------------------
|0 |SCALAR GROUP BY|          |1        |47  |
|1 | SUBPLAN FILTER|          |3        |47  |
|2 |  TABLE SCAN   |t1        |5        |1   |
|3 |  TOP-N SORT   |          |1        |46  |
|4 |   TABLE SCAN  |t1(idx_c1)|5        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  1 - output([t1.c2], [t1.c1]), filter([t1.c2 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)
  3 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(1), prefix_pos(1)
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|    NULL |    NULL |
+---------+---------+
EXPLAIN select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
Query Plan
==============================================
|ID|OPERATOR       |NAME      |EST. ROWS|COST|
----------------------------------------------
|0 |SCALAR GROUP BY|          |1        |47  |
|1 | HASH JOIN     |          |1        |47  |
|2 |  SUBPLAN SCAN |VIEW1     |1        |46  |
|3 |   TOP-N SORT  |          |1        |46  |
|4 |    TABLE SCAN |t1(idx_c1)|5        |46  |
|5 |  TABLE SCAN   |t1        |5        |1   |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  1 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      equal_conds([t1.c2 = VIEW1.c1]), other_conds(nil)
  2 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  3 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(1), prefix_pos(1)
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)
  5 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)

select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|    NULL |    NULL |
+---------+---------+
EXPLAIN update t1 set c2 = 1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
Query Plan
=============================================
|ID|OPERATOR      |NAME      |EST. ROWS|COST|
---------------------------------------------
|0 |UPDATE        |          |1        |79  |
|1 | HASH JOIN    |          |1        |47  |
|2 |  SUBPLAN SCAN|VIEW1     |1        |46  |
|3 |   TOP-N SORT |          |1        |46  |
|4 |    TABLE SCAN|t1(idx_c1)|5        |46  |
|5 |  TABLE SCAN  |t1        |5        |1   |
=============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)}), hash_distinct}]),
      update([t1.c2=column_conv(INT,PS:(11,0),NULL,cast(1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = VIEW1.c1]), other_conds(nil)
  2 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  3 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(1), prefix_pos(1)
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)
  5 - output([t1.__pk_increment], [t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c2], [t1.c1]), partitions(p0)

update t1 set c2 = 1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
EXPLAIN delete from t1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
Query Plan
=============================================
|ID|OPERATOR      |NAME      |EST. ROWS|COST|
---------------------------------------------
|0 |DELETE        |          |1        |59  |
|1 | HASH JOIN    |          |1        |47  |
|2 |  SUBPLAN SCAN|VIEW1     |1        |46  |
|3 |   TOP-N SORT |          |1        |46  |
|4 |    TABLE SCAN|t1(idx_c1)|5        |46  |
|5 |  TABLE SCAN  |t1        |5        |1   |
=============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)}), hash_distinct}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = VIEW1.c1]), other_conds(nil)
  2 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  3 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(1), prefix_pos(1)
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)
  5 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

delete from t1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
EXPLAIN insert into is_t2 select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c2 limit 1);
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |INSERT           |               |1        |60  |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |47  |
|2 |  SCALAR GROUP BY|               |1        |47  |
|3 |   MERGE JOIN    |               |1        |47  |
|4 |    SORT         |               |5        |1   |
|5 |     TABLE SCAN  |t1             |5        |1   |
|6 |    SUBPLAN SCAN |VIEW1          |1        |46  |
|7 |     TOP-N SORT  |               |1        |46  |
|8 |      TABLE SCAN |t1(idx_c1)     |5        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,cast(ANONYMOUS_VIEW1.sum(c1), INT(-1, 0)))], [column_conv(INT,PS:(11,0),NULL,cast(ANONYMOUS_VIEW1.sum(c2), INT(-1, 0)))])
  1 - output([ANONYMOUS_VIEW1.sum(c1)], [ANONYMOUS_VIEW1.sum(c2)]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.sum(c1)], [ANONYMOUS_VIEW1.sum(c2)])
  2 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  3 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      equal_conds([t1.c2 = VIEW1.c1]), other_conds(nil)
  4 - output([t1.c2], [t1.c1]), filter(nil), rowset=256, sort_keys([t1.c2, ASC])
  5 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)
  6 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  7 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(1), prefix_pos(1)
  8 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

insert into is_t2 select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by c1, c2 limit 1);


****** order by subquery, can't elimilate order by in subquery
EXPLAIN select /*+no_rewrite*/ sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by (select 1));
Query Plan
==============================================
|ID|OPERATOR       |NAME      |EST. ROWS|COST|
----------------------------------------------
|0 |SCALAR GROUP BY|          |1        |2   |
|1 | SUBPLAN FILTER|          |3        |2   |
|2 |  TABLE SCAN   |t1        |5        |1   |
|3 |  TABLE SCAN   |t1(idx_c1)|5        |1   |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  1 - output([t1.c2], [t1.c1]), filter([t1.c2 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by (select 1));
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|    NULL |    NULL |
+---------+---------+
EXPLAIN select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by (select 1));
Query Plan
====================================================
|ID|OPERATOR             |NAME      |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY      |          |1        |3   |
|1 | HASH RIGHT SEMI JOIN|          |5        |2   |
|2 |  TABLE SCAN         |t1(idx_c1)|5        |1   |
|3 |  TABLE SCAN         |t1        |5        |1   |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  1 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t1.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)

select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by (select 1));
+---------+---------+
| sum(c1) | sum(c2) |
+---------+---------+
|    NULL |    NULL |
+---------+---------+
EXPLAIN update t1 set c2 = 1 where c2 in (select c1 from t1 order by (select 1));
Query Plan
====================================================
|ID|OPERATOR             |NAME      |EST. ROWS|COST|
----------------------------------------------------
|0 |UPDATE               |          |5        |64  |
|1 | HASH RIGHT SEMI JOIN|          |5        |2   |
|2 |  TABLE SCAN         |t1(idx_c1)|5        |1   |
|3 |  TABLE SCAN         |t1        |5        |1   |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}]),
      update([t1.c2=column_conv(INT,PS:(11,0),NULL,cast(1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t1.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([t1.__pk_increment], [t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c2], [t1.c1]), partitions(p0)

update t1 set c2 = 1 where c2 in (select c1 from t1 order by (select 1));
EXPLAIN delete from t1 where c2 in (select c1 from t1 order by (select 1));
Query Plan
====================================================
|ID|OPERATOR             |NAME      |EST. ROWS|COST|
----------------------------------------------------
|0 |DELETE               |          |5        |34  |
|1 | HASH RIGHT SEMI JOIN|          |5        |2   |
|2 |  TABLE SCAN         |t1(idx_c1)|5        |1   |
|3 |  TABLE SCAN         |t1        |5        |1   |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t1.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

delete from t1 where c2 in (select c1 from t1 order by (select 1));
EXPLAIN insert into is_t2 select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by (select 1));
Query Plan
======================================================
|ID|OPERATOR          |NAME           |EST. ROWS|COST|
------------------------------------------------------
|0 |INSERT            |               |1        |15  |
|1 | SUBPLAN SCAN     |ANONYMOUS_VIEW1|1        |2   |
|2 |  SCALAR GROUP BY |               |1        |2   |
|3 |   MERGE SEMI JOIN|               |5        |2   |
|4 |    SORT          |               |5        |1   |
|5 |     TABLE SCAN   |t1             |5        |1   |
|6 |    TABLE SCAN    |t1(idx_c1)     |5        |1   |
======================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,cast(ANONYMOUS_VIEW1.sum(c1), INT(-1, 0)))], [column_conv(INT,PS:(11,0),NULL,cast(ANONYMOUS_VIEW1.sum(c2), INT(-1, 0)))])
  1 - output([ANONYMOUS_VIEW1.sum(c1)], [ANONYMOUS_VIEW1.sum(c2)]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.sum(c1)], [ANONYMOUS_VIEW1.sum(c2)])
  2 - output([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)], [T_FUN_SUM(t1.c2)])
  3 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t1.c1]), other_conds(nil)
  4 - output([t1.c2], [t1.c1]), filter(nil), rowset=256, sort_keys([t1.c2, ASC])
  5 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

insert into is_t2 select sum(c1), sum(c2) from t1 where c2 in (select c1 from t1 order by (select 1));
drop table t1, t2;

*********************消除subquery中的order by子句 end*****************

*********************消除order by重复列begin*****************

drop table if exists t1;
create table t1(c1 int not null, c2 int);
EXPLAIN select /*+no_rewrite*/ c1 from t1 order by c1,c1 limit 10;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC]), topn(10)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ c1 from t1 order by c1,c1 limit 10;
+----+
| c1 |
+----+
+----+
EXPLAIN select c1 from t1 order by c1,c1 limit 10;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC]), topn(10)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select c1 from t1 order by c1,c1 limit 10;
+----+
| c1 |
+----+
+----+
EXPLAIN update t1 set c1 = c2 + 1  order by c1,c1 limit 10;
Query Plan
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |UPDATE      |    |1        |77  |
|1 | TOP-N SORT |    |1        |46  |
|2 |  TABLE SCAN|t1  |1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NOT NULL,cast(t1.c2 + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC]), topn(10)
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

update t1 set c1 = c2 + 1  order by c1,c1 limit 10;
EXPLAIN delete from t1 order by c1,c1 limit 10;
Query Plan
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |DELETE      |    |1        |57  |
|1 | TOP-N SORT |    |1        |46  |
|2 |  TABLE SCAN|t1  |1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC]), topn(10)
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

delete from t1 order by c1,c1 limit 10;
EXPLAIN insert into is_t1 select c1 from t1 order by c1,c1 limit 10;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t1: ({is_t1: (is_t1.__pk_increment, is_t1.c1)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC]), topn(10)
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

insert into is_t1 select c1 from t1 order by c1,c1 limit 10;



EXPLAIN select /*+no_rewrite*/c1 from t1 order by c1,c1,c2 limit 10;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/c1 from t1 order by c1,c1,c2 limit 10;
+----+
| c1 |
+----+
+----+
EXPLAIN select c1 from t1 order by c1,c1,c2 limit 10;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select c1 from t1 order by c1,c1,c2 limit 10;
+----+
| c1 |
+----+
+----+
EXPLAIN update t1 set c1 = c2 + 1 order by c1,c1,c2 limit 10;
Query Plan
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |UPDATE      |    |1        |77  |
|1 | TOP-N SORT |    |1        |46  |
|2 |  TABLE SCAN|t1  |1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NOT NULL,cast(t1.c2 + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

update t1 set c1 = c2 + 1 order by c1,c1,c2 limit 10;
EXPLAIN delete from t1 order by c1,c1,c2 limit 10;
Query Plan
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |DELETE      |    |1        |57  |
|1 | TOP-N SORT |    |1        |46  |
|2 |  TABLE SCAN|t1  |1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

delete from t1 order by c1,c1,c2 limit 10;
EXPLAIN insert into is_t1 select c1 from t1 order by c1,c1,c2 limit 10;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t1: ({is_t1: (is_t1.__pk_increment, is_t1.c1)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

insert into is_t1 select c1 from t1 order by c1,c1,c2 limit 10;



EXPLAIN select /*+no_rewrite*/c1 from t1 order by c1,c2,c1 limit 10;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/c1 from t1 order by c1,c2,c1 limit 10;
+----+
| c1 |
+----+
+----+
EXPLAIN select c1 from t1 order by c1,c2,c1 limit 10;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select c1 from t1 order by c1,c2,c1 limit 10;
+----+
| c1 |
+----+
+----+
EXPLAIN update t1 set c1 = c2 + 1 order by c1,c2,c1 limit 10;
Query Plan
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |UPDATE      |    |1        |77  |
|1 | TOP-N SORT |    |1        |46  |
|2 |  TABLE SCAN|t1  |1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NOT NULL,cast(t1.c2 + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

update t1 set c1 = c2 + 1 order by c1,c2,c1 limit 10;
EXPLAIN delete from t1 order by c1,c2,c1 limit 10;
Query Plan
=====================================
|ID|OPERATOR    |NAME|EST. ROWS|COST|
-------------------------------------
|0 |DELETE      |    |1        |57  |
|1 | TOP-N SORT |    |1        |46  |
|2 |  TABLE SCAN|t1  |1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)

delete from t1 order by c1,c2,c1 limit 10;
EXPLAIN insert into is_t1 select c1 from t1 order by c1,c2,c1 limit 10;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t1: ({is_t1: (is_t1.__pk_increment, is_t1.c1)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)])
  1 - output([ANONYMOUS_VIEW1.c1]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1])
  2 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC]), topn(10)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

insert into is_t1 select c1 from t1 order by c1,c2,c1 limit 10;

drop table t1;


*********************消除order by重复列end*****************

************************* replace is null condition, begin *********

drop table if exists t1_null, t2_null, t3_null;
create table t1_null(c1 int primary key, c2 int);
create table t2_null(c1 int, c2 int not NULL);
create table t3_null(c1 int primary key, c6 int);
insert/*trace*/ into t1_null values(1, 1),(2, 2),(3, 3);
insert/*trace*/ into t2_null values(4, 4),(5, 5),(6, 6);


******  pk is null ==> false
EXPLAIN select /*+no_rewrite*/ * from t1_null where c1 is NULL;
Query Plan
=====================================
|ID|OPERATOR |NAME   |EST. ROWS|COST|
-------------------------------------
|0 |TABLE GET|t1_null|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1_null where c1 is NULL;
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN select * from t1_null where c1 is NULL;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1_null|3        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

select * from t1_null where c1 is NULL;
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN update t1_null set c2 = 0 where c1 is NULL;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |UPDATE     |       |3        |93  |
|1 | TABLE SCAN|t1_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}]),
      update([t1_null.c2=column_conv(INT,PS:(11,0),NULL,cast(0, INT(-1, 0)))])
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

update t1_null set c2 = 0 where c1 is NULL;
EXPLAIN delete from t1_null where c1 is NULL;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |DELETE     |       |3        |68  |
|1 | TABLE SCAN|t1_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}])
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

delete from t1_null where c1 is NULL;
EXPLAIN insert into is_t2 select * from t1_null where c1 is NULL;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |3        |71  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|3        |46  |
|2 |  TABLE SCAN |t1_null        |3        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

insert into is_t2 select * from t1_null where c1 is NULL;


****** 多个表达式,pk is null ==> false
EXPLAIN select /*+no_rewrite*/* from t1_null where c1 is NULL and c2 = 1;
Query Plan
=====================================
|ID|OPERATOR |NAME   |EST. ROWS|COST|
-------------------------------------
|0 |TABLE GET|t1_null|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c2 = 1]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

select /*+no_rewrite*/* from t1_null where c1 is NULL and c2 = 1;
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN select * from t1_null where c1 is NULL and c2 = 1;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1_null|3        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

select * from t1_null where c1 is NULL and c2 = 1;
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN update t1_null set c2 = 0 where c1 is NULL and c2 = 1;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |UPDATE     |       |3        |93  |
|1 | TABLE SCAN|t1_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}]),
      update([t1_null.c2=column_conv(INT,PS:(11,0),NULL,cast(0, INT(-1, 0)))])
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

update t1_null set c2 = 0 where c1 is NULL and c2 = 1;
EXPLAIN delete from t1_null where c1 is NULL and c2 = 1;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |DELETE     |       |3        |68  |
|1 | TABLE SCAN|t1_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}])
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

delete from t1_null where c1 is NULL and c2 = 1;
EXPLAIN insert into is_t2 select * from t1_null where c1 is NULL and c2 = 1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |3        |71  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|3        |46  |
|2 |  TABLE SCAN |t1_null        |3        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

insert into is_t2 select * from t1_null where c1 is NULL and c2 = 1;


****** column(not NULL) is NULL ==> false
EXPLAIN select /*+no_rewrite*/* from t2_null where c2 is NULL;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t2_null|0        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2_null.c1], [t2_null.c2]), filter([(T_OP_IS, t2_null.c2, NULL, 0)]), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

select /*+no_rewrite*/* from t2_null where c2 is NULL;
+------+----+
| c1   | c2 |
+------+----+
+------+----+
EXPLAIN select * from t2_null where c2 is NULL;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t2_null|3        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2_null.c1], [t2_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

select * from t2_null where c2 is NULL;
+------+----+
| c1   | c2 |
+------+----+
+------+----+
EXPLAIN update t2_null set c2 = c1 + 1 where c2 is NULL;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |UPDATE     |       |3        |93  |
|1 | TABLE SCAN|t2_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_null: ({t2_null: (t2_null.__pk_increment, t2_null.c1, t2_null.c2)})}]),
      update([t2_null.c2=column_conv(INT,PS:(11,0),NOT NULL,cast(t2_null.c1 + 1, INT(-1, 0)))])
  1 - output([t2_null.__pk_increment], [t2_null.c2], [t2_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_null.__pk_increment], [t2_null.c2], [t2_null.c1]), partitions(p0)

update t2_null set c2 = c1 + 1 where c2 is NULL;
EXPLAIN delete from t2_null where c2 is NULL;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |DELETE     |       |3        |68  |
|1 | TABLE SCAN|t2_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_null: ({t2_null: (t2_null.__pk_increment, t2_null.c1, t2_null.c2)})}])
  1 - output([t2_null.__pk_increment], [t2_null.c1], [t2_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_null.__pk_increment], [t2_null.c1], [t2_null.c2]), partitions(p0)

delete from t2_null where c2 is NULL;
EXPLAIN insert into is_t2 select * from t2_null where c2 is NULL;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |3        |71  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|3        |46  |
|2 |  TABLE SCAN |t2_null        |3        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t2_null.c1], [t2_null.c2]), filter(nil), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

insert into is_t2 select * from t2_null where c2 is NULL;


****** 多个表达式, column(not NULL) is NULL ==> false
EXPLAIN select /*+no_rewrite*/* from t2_null where c2 is NULL and c1 = 1;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t2_null|0        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2_null.c1], [t2_null.c2]), filter([(T_OP_IS, t2_null.c2, NULL, 0)], [t2_null.c1 = 1]), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

select /*+no_rewrite*/* from t2_null where c2 is NULL and c1 = 1;
+------+----+
| c1   | c2 |
+------+----+
+------+----+
EXPLAIN select * from t2_null where c2 is NULL and c1 = 1;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t2_null|3        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2_null.c1], [t2_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

select * from t2_null where c2 is NULL and c1 = 1;
+------+----+
| c1   | c2 |
+------+----+
+------+----+
EXPLAIN update t2_null set c2 = c1 + 1 where c2 is NULL and c1 = 1;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |UPDATE     |       |3        |93  |
|1 | TABLE SCAN|t2_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_null: ({t2_null: (t2_null.__pk_increment, t2_null.c1, t2_null.c2)})}]),
      update([t2_null.c2=column_conv(INT,PS:(11,0),NOT NULL,cast(t2_null.c1 + 1, INT(-1, 0)))])
  1 - output([t2_null.__pk_increment], [t2_null.c2], [t2_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_null.__pk_increment], [t2_null.c2], [t2_null.c1]), partitions(p0)

update t2_null set c2 = c1 + 1 where c2 is NULL and c1 = 1;
EXPLAIN delete from t2_null where c2 is NULL and c1 = 1;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |DELETE     |       |3        |68  |
|1 | TABLE SCAN|t2_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_null: ({t2_null: (t2_null.__pk_increment, t2_null.c1, t2_null.c2)})}])
  1 - output([t2_null.__pk_increment], [t2_null.c1], [t2_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_null.__pk_increment], [t2_null.c1], [t2_null.c2]), partitions(p0)

delete from t2_null where c2 is NULL and c1 = 1;
EXPLAIN insert into is_t2 select * from t2_null where c2 is NULL and c1 = 1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |3        |71  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|3        |46  |
|2 |  TABLE SCAN |t2_null        |3        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t2_null.c1], [t2_null.c2]), filter(nil), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

insert into is_t2 select * from t2_null where c2 is NULL and c1 = 1;


******  pk is not NULL ==> true
EXPLAIN select /*+no_rewrite*/* from t1_null where c1 is not NULL;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1_null|3        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter([(T_OP_IS_NOT, t1_null.c1, NULL, 0)]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

select /*+no_rewrite*/* from t1_null where c1 is not NULL;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
+----+------+
EXPLAIN select * from t1_null where c1 is not NULL;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1_null|3        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

select * from t1_null where c1 is not NULL;
+----+------+
| c1 | c2   |
+----+------+
|  1 |    1 |
|  2 |    2 |
|  3 |    3 |
+----+------+
EXPLAIN update t1_null set c2 = 0 where c1 is not NULL;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |UPDATE     |       |3        |93  |
|1 | TABLE SCAN|t1_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}]),
      update([t1_null.c2=column_conv(INT,PS:(11,0),NULL,cast(0, INT(-1, 0)))])
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

update t1_null set c2 = 0 where c1 is not NULL;
EXPLAIN delete from t1_null where c1 is not NULL;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |DELETE     |       |3        |68  |
|1 | TABLE SCAN|t1_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}])
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

delete from t1_null where c1 is not NULL;
EXPLAIN insert into is_t2 select * from t1_null where c1 is not NULL;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TABLE SCAN |t1_null        |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

insert into is_t2 select * from t1_null where c1 is not NULL;


******  多个表达式，pk is not NULL ==> true
EXPLAIN select /*+no_rewrite*/* from t1_null where c1 is not NULL and c2 = 1;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1_null|1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter([(T_OP_IS_NOT, t1_null.c1, NULL, 0)], [t1_null.c2 = 1]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

select /*+no_rewrite*/* from t1_null where c1 is not NULL and c2 = 1;
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN select * from t1_null where c1 is not NULL and c2 = 1;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t1_null|1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c2 = 1]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

select * from t1_null where c1 is not NULL and c2 = 1;
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN update t1_null set c2 = 0 where c1 is not NULL and c2 = 1;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |UPDATE     |       |1        |77  |
|1 | TABLE SCAN|t1_null|1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}]),
      update([t1_null.c2=column_conv(INT,PS:(11,0),NULL,cast(0, INT(-1, 0)))])
  1 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c2 = 1]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

update t1_null set c2 = 0 where c1 is not NULL and c2 = 1;
EXPLAIN delete from t1_null where c1 is not NULL and c2 = 1;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |DELETE     |       |1        |57  |
|1 | TABLE SCAN|t1_null|1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}])
  1 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c2 = 1]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

delete from t1_null where c1 is not NULL and c2 = 1;
EXPLAIN insert into is_t2 select * from t1_null where c1 is not NULL and c2 = 1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TABLE SCAN |t1_null        |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c2 = 1]), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)

insert into is_t2 select * from t1_null where c1 is not NULL and c2 = 1;


****** column(not NULL) is not NULL ==> true
EXPLAIN select /*+no_rewrite*/* from t2_null where c2 is not NULL;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t2_null|3        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2_null.c1], [t2_null.c2]), filter([(T_OP_IS_NOT, t2_null.c2, NULL, 0)]), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

select /*+no_rewrite*/* from t2_null where c2 is not NULL;
+------+----+
| c1   | c2 |
+------+----+
|    4 |  4 |
|    5 |  5 |
|    6 |  6 |
+------+----+
EXPLAIN select * from t2_null where c2 is not NULL;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t2_null|3        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2_null.c1], [t2_null.c2]), filter(nil), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

select * from t2_null where c2 is not NULL;
+------+----+
| c1   | c2 |
+------+----+
|    4 |  4 |
|    5 |  5 |
|    6 |  6 |
+------+----+
EXPLAIN update t2_null set c2 = c1 + 1 where c2 is not NULL;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |UPDATE     |       |3        |93  |
|1 | TABLE SCAN|t2_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_null: ({t2_null: (t2_null.__pk_increment, t2_null.c1, t2_null.c2)})}]),
      update([t2_null.c2=column_conv(INT,PS:(11,0),NOT NULL,cast(t2_null.c1 + 1, INT(-1, 0)))])
  1 - output([t2_null.__pk_increment], [t2_null.c2], [t2_null.c1]), filter(nil), rowset=256,
      access([t2_null.__pk_increment], [t2_null.c2], [t2_null.c1]), partitions(p0)

update t2_null set c2 = c1 + 1 where c2 is not NULL;
EXPLAIN delete from t2_null where c2 is not NULL;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |DELETE     |       |3        |68  |
|1 | TABLE SCAN|t2_null|3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_null: ({t2_null: (t2_null.__pk_increment, t2_null.c1, t2_null.c2)})}])
  1 - output([t2_null.__pk_increment], [t2_null.c1], [t2_null.c2]), filter(nil), rowset=256,
      access([t2_null.__pk_increment], [t2_null.c1], [t2_null.c2]), partitions(p0)

delete from t2_null where c2 is not NULL;
EXPLAIN insert into is_t2 select * from t2_null where c2 is not NULL;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TABLE SCAN |t2_null        |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t2_null.c1], [t2_null.c2]), filter(nil), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

insert into is_t2 select * from t2_null where c2 is not NULL;


****** 多个表达式, column(not NULL) is not NULL ==> true
EXPLAIN select /*+no_rewrite*/* from t2_null where c2 is not NULL and c1 = 1;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t2_null|1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2_null.c1], [t2_null.c2]), filter([(T_OP_IS_NOT, t2_null.c2, NULL, 0)], [t2_null.c1 = 1]), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

select /*+no_rewrite*/* from t2_null where c2 is not NULL and c1 = 1;
+------+----+
| c1   | c2 |
+------+----+
+------+----+
EXPLAIN select * from t2_null where c2 is not NULL and c1 = 1;
Query Plan
======================================
|ID|OPERATOR  |NAME   |EST. ROWS|COST|
--------------------------------------
|0 |TABLE SCAN|t2_null|1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2_null.c1], [t2_null.c2]), filter([t2_null.c1 = 1]), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

select * from t2_null where c2 is not NULL and c1 = 1;
+------+----+
| c1   | c2 |
+------+----+
+------+----+
EXPLAIN update t2_null set c2 = c1 + 1 where c2 is not NULL and c1 = 1;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |UPDATE     |       |1        |77  |
|1 | TABLE SCAN|t2_null|1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_null: ({t2_null: (t2_null.__pk_increment, t2_null.c1, t2_null.c2)})}]),
      update([t2_null.c2=column_conv(INT,PS:(11,0),NOT NULL,cast(cast(1, INT(11, 0)) + 1, INT(-1, 0)))])
  1 - output([t2_null.__pk_increment], [t2_null.c2], [t2_null.c1]), filter([t2_null.c1 = 1]), rowset=256,
      access([t2_null.__pk_increment], [t2_null.c2], [t2_null.c1]), partitions(p0)

update t2_null set c2 = c1 + 1 where c2 is not NULL and c1 = 1;
EXPLAIN delete from t2_null where c2 is not NULL and c1 = 1;
Query Plan
=======================================
|ID|OPERATOR   |NAME   |EST. ROWS|COST|
---------------------------------------
|0 |DELETE     |       |1        |57  |
|1 | TABLE SCAN|t2_null|1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_null: ({t2_null: (t2_null.__pk_increment, t2_null.c1, t2_null.c2)})}])
  1 - output([t2_null.__pk_increment], [t2_null.c1], [t2_null.c2]), filter([t2_null.c1 = 1]), rowset=256,
      access([t2_null.__pk_increment], [t2_null.c1], [t2_null.c2]), partitions(p0)

delete from t2_null where c2 is not NULL and c1 = 1;
EXPLAIN insert into is_t2 select * from t2_null where c2 is not NULL and c1 = 1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TABLE SCAN |t2_null        |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t2_null.c1], [t2_null.c2]), filter([t2_null.c1 = 1]), rowset=256,
      access([t2_null.c2], [t2_null.c1]), partitions(p0)

insert into is_t2 select * from t2_null where c2 is not NULL and c1 = 1;

****** 子查询中 pk is null ==> false
EXPLAIN select /*+no_rewrite*/* from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
Query Plan
==========================================
|ID|OPERATOR      |NAME   |EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER|       |1        |91  |
|1 | TABLE SCAN   |t1_null|1        |46  |
|2 | TABLE SCAN   |t2_null|1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  2 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

select /*+no_rewrite*/* from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN select * from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
Query Plan
==========================================
|ID|OPERATOR      |NAME   |EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER|       |1        |91  |
|1 | TABLE SCAN   |t1_null|1        |46  |
|2 | TABLE SCAN   |t2_null|1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  2 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

select * from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN update t1_null set c2 = c1 + 1  where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
Query Plan
===========================================
|ID|OPERATOR       |NAME   |EST. ROWS|COST|
-------------------------------------------
|0 |UPDATE         |       |1        |123 |
|1 | SUBPLAN FILTER|       |1        |91  |
|2 |  TABLE SCAN   |t1_null|1        |46  |
|3 |  TABLE SCAN   |t2_null|1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}]),
      update([t1_null.c2=column_conv(INT,PS:(11,0),NULL,cast(t1_null.c1 + 1, INT(-1, 0)))])
  1 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  2 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  3 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

update t1_null set c2 = c1 + 1  where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
EXPLAIN delete from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
Query Plan
===========================================
|ID|OPERATOR       |NAME   |EST. ROWS|COST|
-------------------------------------------
|0 |DELETE         |       |1        |103 |
|1 | SUBPLAN FILTER|       |1        |91  |
|2 |  TABLE SCAN   |t1_null|1        |46  |
|3 |  TABLE SCAN   |t2_null|1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}])
  1 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  2 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  3 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

delete from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
EXPLAIN insert into is_t2 select * from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |INSERT          |               |1        |104 |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |91  |
|2 |  SUBPLAN FILTER|               |1        |91  |
|3 |   TABLE SCAN   |t1_null        |1        |46  |
|4 |   TABLE SCAN   |t2_null        |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  3 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  4 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

insert into is_t2 select * from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NULL limit 1);

****** 子查询中 pk is not null ==> true
EXPLAIN select /*+no_rewrite*/* from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
Query Plan
==========================================
|ID|OPERATOR      |NAME   |EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER|       |1        |91  |
|1 | TABLE SCAN   |t1_null|1        |46  |
|2 | TABLE SCAN   |t2_null|1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS_NOT, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  2 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

select /*+no_rewrite*/* from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN select * from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
Query Plan
==========================================
|ID|OPERATOR      |NAME   |EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER|       |1        |91  |
|1 | TABLE SCAN   |t1_null|1        |46  |
|2 | TABLE SCAN   |t2_null|1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS_NOT, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  2 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

select * from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
+----+------+
| c1 | c2   |
+----+------+
+----+------+
EXPLAIN update t1_null set c2 = c1 + 1 where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
Query Plan
===========================================
|ID|OPERATOR       |NAME   |EST. ROWS|COST|
-------------------------------------------
|0 |UPDATE         |       |1        |123 |
|1 | SUBPLAN FILTER|       |1        |91  |
|2 |  TABLE SCAN   |t1_null|1        |46  |
|3 |  TABLE SCAN   |t2_null|1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}]),
      update([t1_null.c2=column_conv(INT,PS:(11,0),NULL,cast(t1_null.c1 + 1, INT(-1, 0)))])
  1 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS_NOT, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  2 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  3 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

update t1_null set c2 = c1 + 1 where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
EXPLAIN delete from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
Query Plan
===========================================
|ID|OPERATOR       |NAME   |EST. ROWS|COST|
-------------------------------------------
|0 |DELETE         |       |1        |103 |
|1 | SUBPLAN FILTER|       |1        |91  |
|2 |  TABLE SCAN   |t1_null|1        |46  |
|3 |  TABLE SCAN   |t2_null|1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_null: ({t1_null: (t1_null.c1, t1_null.c2)})}])
  1 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS_NOT, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  2 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  3 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

delete from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
EXPLAIN insert into is_t2 select * from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |INSERT          |               |1        |104 |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |91  |
|2 |  SUBPLAN FILTER|               |1        |91  |
|3 |   TABLE SCAN   |t1_null        |1        |46  |
|4 |   TABLE SCAN   |t2_null        |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_null.c1], [t1_null.c2]), filter([t1_null.c1 = subquery(1)]), rowset=256,
      exec_params_([(T_OP_IS_NOT, t1_null.c1, NULL, 0)]), onetime_exprs_(nil), init_plan_idxs_(nil)
  3 - output([t1_null.c1], [t1_null.c2]), filter(nil), rowset=256,
      access([t1_null.c1], [t1_null.c2]), partitions(p0)
  4 - output([t2_null.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t2_null.c1]), partitions(p0),
      limit(1), offset(nil)

insert into is_t2 select * from t1_null where t1_null.c1 = (select t2_null.c1 from t2_null where t1_null.c1 is NOT NULL limit 1);
drop table t1_null, t2_null;

************************* replace is null condition, end*********

************************* replace op null condition, begin *********

drop table if exists t1_op_null, t2_op_null;
create table t1_op_null(c1 int , c2 int);
create table t2_op_null(c1 int , c2 int );
insert/*trace*/ into t1_op_null values (1,1),(2,null),(3,3);
insert/*trace*/ into t2_op_null values (null,4),(5,5),(null,6);


******  compare null ==> false
EXPLAIN select /*+no_rewrite*/ * from t1_op_null where c1 = NULL;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t1_op_null|0        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = NULL]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1_op_null where c1 = NULL;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t1_op_null where c1 = NULL;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t1_op_null|3        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select * from t1_op_null where c1 = NULL;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN update t1_op_null set c2 = 0 where c1 != NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE     |          |3        |93  |
|1 | TABLE SCAN|t1_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}]),
      update([t1_op_null.c2=column_conv(INT,PS:(11,0),NULL,cast(0, INT(-1, 0)))])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), partitions(p0)

update t1_op_null set c2 = 0 where c1 != NULL;
EXPLAIN delete from t1_op_null where c1 > NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |DELETE     |          |3        |68  |
|1 | TABLE SCAN|t1_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

delete from t1_op_null where c1 > NULL;
EXPLAIN insert into is_t2 select * from t1_op_null where c1 < NULL;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |3        |71  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|3        |46  |
|2 |  TABLE SCAN |t1_op_null     |3        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

insert into is_t2 select * from t1_op_null where c1 < NULL;
EXPLAIN select * from t1_op_null where c1 <> NULL;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t1_op_null|3        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select * from t1_op_null where c1 <> NULL;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN update t1_op_null set c2 = 0 where c1 >= NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE     |          |3        |93  |
|1 | TABLE SCAN|t1_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}]),
      update([t1_op_null.c2=column_conv(INT,PS:(11,0),NULL,cast(0, INT(-1, 0)))])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), partitions(p0)

update t1_op_null set c2 = 0 where c1 >= NULL;
EXPLAIN delete from t1_op_null where c1 <= NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |DELETE     |          |3        |68  |
|1 | TABLE SCAN|t1_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

delete from t1_op_null where c1 <= NULL;


****** 多个表达式, compare null ==> false
EXPLAIN select /*+no_rewrite*/* from t1_op_null where c1 = NULL and c2 = 1;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t1_op_null|0        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = NULL], [t1_op_null.c2 = 1]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select /*+no_rewrite*/* from t1_op_null where c1 = NULL and c2 = 1;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t1_op_null where c1 <> NULL or c2 = 1;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t1_op_null|1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c2 = 1]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select * from t1_op_null where c1 <> NULL or c2 = 1;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
+------+------+
EXPLAIN update t1_op_null set c2 = 0 where c1 != NULL and c2 = 1;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE     |          |3        |93  |
|1 | TABLE SCAN|t1_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}]),
      update([t1_op_null.c2=column_conv(INT,PS:(11,0),NULL,cast(0, INT(-1, 0)))])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), partitions(p0)

update t1_op_null set c2 = 0 where c1 != NULL and c2 = 1;
EXPLAIN delete from t1_op_null where c1 >= NULL or c2 = 1;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |DELETE     |          |1        |57  |
|1 | TABLE SCAN|t1_op_null|1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c2 = 1]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

delete from t1_op_null where c1 >= NULL or c2 = 1;
EXPLAIN insert into is_t2 select * from t1_op_null where c1 <= NULL and c2 = 1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |2        |20  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|2        |1   |
|2 |  TABLE SCAN |t1_op_null     |2        |1   |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

insert into is_t2 select * from t1_op_null where c1 <= NULL and c2 = 1;
EXPLAIN select * from t1_op_null where c1 <> NULL or c2=1;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t1_op_null|1        |1   |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c2 = 1]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select * from t1_op_null where c1 <> NULL or c2=1;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN update t1_op_null set c2 = 0 where c1 =1 and c2 < NULL or c1=NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE     |          |2        |40  |
|1 | TABLE SCAN|t1_op_null|2        |1   |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}]),
      update([t1_op_null.c2=column_conv(INT,PS:(11,0),NULL,cast(0, INT(-1, 0)))])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), partitions(p0)

update t1_op_null set c2 = 0 where c1 =1 and c2 < NULL or c1=NULL;
EXPLAIN delete from t1_op_null where c1 >= NULL or c2 = 1 and c1=3 and c2=1 and c2=NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |DELETE     |          |2        |17  |
|1 | TABLE SCAN|t1_op_null|2        |1   |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

delete from t1_op_null where c1 >= NULL or c2 = 1 and c1=3 and c2=1 and c2=NULL;
EXPLAIN insert into is_t2 select * from t1_op_null where c1 <= NULL or c2 != NULL or c1=NULL or c2=1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |14  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |1   |
|2 |  TABLE SCAN |t1_op_null     |1        |1   |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c2 = 1]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

insert into is_t2 select * from t1_op_null where c1 <= NULL or c2 != NULL or c1=NULL or c2=1;


****** operator with NULL ==> false
EXPLAIN select /*+no_rewrite*/* from t2_op_null where c2 = NULL+c1;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t2_op_null|1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2_op_null.c1], [t2_op_null.c2]), filter([cast(t2_op_null.c2, DOUBLE(-1, -1)) = NULL + cast(t2_op_null.c1, DOUBLE(-1, -1))]), rowset=256,
      access([t2_op_null.c2], [t2_op_null.c1]), partitions(p0)

select /*+no_rewrite*/* from t2_op_null where c2 = NULL+c1;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2_op_null where c2 = NULL+c1;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t2_op_null|3        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2_op_null.c1], [t2_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c2], [t2_op_null.c1]), partitions(p0)

select * from t2_op_null where c2 = NULL+c1;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN update t2_op_null set c1 = c2 + 1 where c2 = c1-NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE     |          |3        |93  |
|1 | TABLE SCAN|t2_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_op_null: ({t2_op_null: (t2_op_null.__pk_increment, t2_op_null.c1, t2_op_null.c2)})}]),
      update([t2_op_null.c1=column_conv(INT,PS:(11,0),NULL,cast(t2_op_null.c2 + 1, INT(-1, 0)))])
  1 - output([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), partitions(p0)

update t2_op_null set c1 = c2 + 1 where c2 = c1-NULL;
EXPLAIN delete from t2_op_null where c2 =c1*NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |DELETE     |          |3        |68  |
|1 | TABLE SCAN|t2_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_op_null: ({t2_op_null: (t2_op_null.__pk_increment, t2_op_null.c1, t2_op_null.c2)})}])
  1 - output([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), partitions(p0)

delete from t2_op_null where c2 =c1*NULL;
EXPLAIN insert into is_t2 select * from t2_op_null where c2 = c1/NULL;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |3        |71  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|3        |46  |
|2 |  TABLE SCAN |t2_op_null     |3        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t2_op_null.c1], [t2_op_null.c2]), filter(nil), rowset=256,
      access([t2_op_null.c2], [t2_op_null.c1]), partitions(p0)

insert into is_t2 select * from t2_op_null where c2 = c1/NULL;
EXPLAIN update t2_op_null set c1 = c2 + 1 where c2 = c1 | NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE     |          |3        |93  |
|1 | TABLE SCAN|t2_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_op_null: ({t2_op_null: (t2_op_null.__pk_increment, t2_op_null.c1, t2_op_null.c2)})}]),
      update([t2_op_null.c1=column_conv(INT,PS:(11,0),NULL,cast(t2_op_null.c2 + 1, INT(-1, 0)))])
  1 - output([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), partitions(p0)

update t2_op_null set c1 = c2 + 1 where c2 = c1 | NULL;
EXPLAIN delete from t2_op_null where c2 =c1 & NULL;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |DELETE     |          |3        |68  |
|1 | TABLE SCAN|t2_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_op_null: ({t2_op_null: (t2_op_null.__pk_increment, t2_op_null.c1, t2_op_null.c2)})}])
  1 - output([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), partitions(p0)

delete from t2_op_null where c2 =c1 & NULL;
EXPLAIN insert into is_t2 select * from t2_op_null where c2 = c1 mod NULL;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |3        |71  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|3        |46  |
|2 |  TABLE SCAN |t2_op_null     |3        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t2_op_null.c1], [t2_op_null.c2]), filter(nil), rowset=256,
      access([t2_op_null.c2], [t2_op_null.c1]), partitions(p0)

insert into is_t2 select * from t2_op_null where c2 = c1 mod NULL;


****** 多个表达式, operator NULL ==> false
EXPLAIN select /*+no_rewrite*/* from t2_op_null where c2 = c1+NULL and c1 = 1;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t2_op_null|1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2_op_null.c1], [t2_op_null.c2]), filter([cast(t2_op_null.c2, DOUBLE(-1, -1)) = cast(t2_op_null.c1, DOUBLE(-1, -1)) + NULL], [t2_op_null.c1 = 1]), rowset=256,
      access([t2_op_null.c2], [t2_op_null.c1]), partitions(p0)

select /*+no_rewrite*/* from t2_op_null where c2 = c1+NULL and c1 = 1;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2_op_null where c2 = NULL-c1 or c1 = 1;
Query Plan
=========================================
|ID|OPERATOR  |NAME      |EST. ROWS|COST|
-----------------------------------------
|0 |TABLE SCAN|t2_op_null|1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2_op_null.c1], [t2_op_null.c2]), filter([t2_op_null.c1 = 1]), rowset=256,
      access([t2_op_null.c2], [t2_op_null.c1]), partitions(p0)

select * from t2_op_null where c2 = NULL-c1 or c1 = 1;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN update t2_op_null set c2 = c1 + 1 where c2 = c1/NULL or c2 = c1*NULL and c2=c1 & NULL ;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE     |          |3        |93  |
|1 | TABLE SCAN|t2_op_null|3        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_op_null: ({t2_op_null: (t2_op_null.__pk_increment, t2_op_null.c1, t2_op_null.c2)})}]),
      update([t2_op_null.c2=column_conv(INT,PS:(11,0),NULL,cast(t2_op_null.c1 + 1, INT(-1, 0)))])
  1 - output([t2_op_null.__pk_increment], [t2_op_null.c2], [t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.__pk_increment], [t2_op_null.c2], [t2_op_null.c1]), partitions(p0)

update t2_op_null set c2 = c1 + 1 where c2 = c1/NULL or c2 = c1*NULL and c2=c1 & NULL ;
EXPLAIN delete from t2_op_null where c2 = c1 mod NULL  or c1 = NULL or c2=c1 | NULL or c1=1;
Query Plan
==========================================
|ID|OPERATOR   |NAME      |EST. ROWS|COST|
------------------------------------------
|0 |DELETE     |          |1        |57  |
|1 | TABLE SCAN|t2_op_null|1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t2_op_null: ({t2_op_null: (t2_op_null.__pk_increment, t2_op_null.c1, t2_op_null.c2)})}])
  1 - output([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), filter([t2_op_null.c1 = 1]), rowset=256,
      access([t2_op_null.__pk_increment], [t2_op_null.c1], [t2_op_null.c2]), partitions(p0)

delete from t2_op_null where c2 = c1 mod NULL  or c1 = NULL or c2=c1 | NULL or c1=1;
EXPLAIN insert into is_t2 select * from t2_op_null where c2 = NULL and c1 =c2 >> NULL and c1=c2 << NULL ;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |3        |71  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|3        |46  |
|2 |  TABLE SCAN |t2_op_null     |3        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t2_op_null.c1], [t2_op_null.c2]), filter(nil), rowset=256,
      access([t2_op_null.c2], [t2_op_null.c1]), partitions(p0)

insert into is_t2 select * from t2_op_null where c2 = NULL and c1 =c2 >> NULL and c1=c2 << NULL ;

****** 子查询中 has null ==> false
EXPLAIN select /*+no_rewrite*/* from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = NULL limit 1);
Query Plan
=============================================
|ID|OPERATOR      |NAME      |EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN FILTER|          |1        |46  |
|1 | TABLE SCAN   |t1_op_null|1        |1   |
|2 | TABLE SCAN   |t2_op_null|1        |46  |
=============================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)
  2 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

select /*+no_rewrite*/* from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = NULL limit 1);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = NULL limit 1);
Query Plan
=============================================
|ID|OPERATOR      |NAME      |EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN FILTER|          |1        |46  |
|1 | TABLE SCAN   |t1_op_null|1        |1   |
|2 | TABLE SCAN   |t2_op_null|1        |46  |
=============================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)
  2 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

select * from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = NULL limit 1);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN update t1_op_null set c2 = c1 + 1  where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 != NULL limit 1);
Query Plan
==============================================
|ID|OPERATOR       |NAME      |EST. ROWS|COST|
----------------------------------------------
|0 |UPDATE         |          |1        |78  |
|1 | SUBPLAN FILTER|          |1        |46  |
|2 |  TABLE SCAN   |t1_op_null|1        |1   |
|3 |  TABLE SCAN   |t2_op_null|1        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}]),
      update([t1_op_null.c2=column_conv(INT,PS:(11,0),NULL,cast(t1_op_null.c1 + 1, INT(-1, 0)))])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), partitions(p0)
  3 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

update t1_op_null set c2 = c1 + 1  where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 != NULL limit 1);
EXPLAIN delete from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 >= NULL limit 1);
Query Plan
==============================================
|ID|OPERATOR       |NAME      |EST. ROWS|COST|
----------------------------------------------
|0 |DELETE         |          |1        |58  |
|1 | SUBPLAN FILTER|          |1        |46  |
|2 |  TABLE SCAN   |t1_op_null|1        |1   |
|3 |  TABLE SCAN   |t2_op_null|1        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), partitions(p0)
  3 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

delete from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 >= NULL limit 1);
EXPLAIN insert into is_t2 select * from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 <= NULL limit 1);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |INSERT          |               |1        |59  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |46  |
|2 |  SUBPLAN FILTER|               |1        |46  |
|3 |   TABLE SCAN   |t1_op_null     |1        |1   |
|4 |   TABLE SCAN   |t2_op_null     |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)
  4 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

insert into is_t2 select * from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 <= NULL limit 1);
EXPLAIN select * from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = t1_op_null.c2+NULL limit 1);
Query Plan
=============================================
|ID|OPERATOR      |NAME      |EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN FILTER|          |1        |46  |
|1 | TABLE SCAN   |t1_op_null|1        |1   |
|2 | TABLE SCAN   |t2_op_null|1        |46  |
=============================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)
  2 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

select * from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = t1_op_null.c2+NULL limit 1);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN update t1_op_null set c2 = c1 + 1  where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = t1_op_null.c2-NULL limit 1);
Query Plan
==============================================
|ID|OPERATOR       |NAME      |EST. ROWS|COST|
----------------------------------------------
|0 |UPDATE         |          |1        |78  |
|1 | SUBPLAN FILTER|          |1        |46  |
|2 |  TABLE SCAN   |t1_op_null|1        |1   |
|3 |  TABLE SCAN   |t2_op_null|1        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}]),
      update([t1_op_null.c2=column_conv(INT,PS:(11,0),NULL,cast(t1_op_null.c1 + 1, INT(-1, 0)))])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c2], [t1_op_null.c1]), partitions(p0)
  3 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

update t1_op_null set c2 = c1 + 1  where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = t1_op_null.c2-NULL limit 1);
EXPLAIN delete from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = t1_op_null.c2*NULL limit 1);
Query Plan
==============================================
|ID|OPERATOR       |NAME      |EST. ROWS|COST|
----------------------------------------------
|0 |DELETE         |          |1        |58  |
|1 | SUBPLAN FILTER|          |1        |46  |
|2 |  TABLE SCAN   |t1_op_null|1        |1   |
|3 |  TABLE SCAN   |t2_op_null|1        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1_op_null: ({t1_op_null: (t1_op_null.__pk_increment, t1_op_null.c1, t1_op_null.c2)})}])
  1 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.__pk_increment], [t1_op_null.c1], [t1_op_null.c2]), partitions(p0)
  3 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

delete from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 = t1_op_null.c2*NULL limit 1);
EXPLAIN insert into is_t2 select * from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 =t1_op_null.c2/NULL limit 1);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |INSERT          |               |1        |59  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |46  |
|2 |  SUBPLAN FILTER|               |1        |46  |
|3 |   TABLE SCAN   |t1_op_null     |1        |1   |
|4 |   TABLE SCAN   |t2_op_null     |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t2: ({is_t2: (is_t2.__pk_increment, is_t2.c1, is_t2.c2)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c1)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c2)])
  1 - output([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.c1], [ANONYMOUS_VIEW1.c2])
  2 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1_op_null.c1], [t1_op_null.c2]), filter([t1_op_null.c1 = ?]), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)
  4 - output([t2_op_null.c1]), filter(nil), startup_filter([0]), rowset=256,
      access([t2_op_null.c1]), partitions(p0),
      limit(1), offset(nil)

insert into is_t2 select * from t1_op_null where t1_op_null.c1 = (select t2_op_null.c1 from t2_op_null where t1_op_null.c1 =t1_op_null.c2/NULL limit 1);

*****group by having 条件为null ==> false
EXPLAIN select * from t1_op_null group by c1 having count(*) = NULL;
Query Plan
============================================
|ID|OPERATOR     |NAME      |EST. ROWS|COST|
--------------------------------------------
|0 |HASH GROUP BY|          |2        |1   |
|1 | TABLE SCAN  |t1_op_null|2        |1   |
============================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      group([t1_op_null.c1]), agg_func(nil)
  1 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select * from t1_op_null group by c1 having count(*) = NULL;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t1_op_null group by c1 having count(*) != NULL;
Query Plan
============================================
|ID|OPERATOR     |NAME      |EST. ROWS|COST|
--------------------------------------------
|0 |HASH GROUP BY|          |2        |1   |
|1 | TABLE SCAN  |t1_op_null|2        |1   |
============================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      group([t1_op_null.c1]), agg_func(nil)
  1 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select * from t1_op_null group by c1 having count(*) != NULL;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t1_op_null where c1 like '%1' group by c1 having count(*) = NULL;
Query Plan
============================================
|ID|OPERATOR     |NAME      |EST. ROWS|COST|
--------------------------------------------
|0 |HASH GROUP BY|          |2        |1   |
|1 | TABLE SCAN  |t1_op_null|2        |1   |
============================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      group([t1_op_null.c1]), agg_func(nil)
  1 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select * from t1_op_null where c1 like '%1' group by c1 having count(*) = NULL;
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t1_op_null where c1 like '%1' group by c1 having count(*) != NULL;
Query Plan
============================================
|ID|OPERATOR     |NAME      |EST. ROWS|COST|
--------------------------------------------
|0 |HASH GROUP BY|          |2        |1   |
|1 | TABLE SCAN  |t1_op_null|2        |1   |
============================================

Outputs & filters:
-------------------------------------
  0 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), startup_filter([0]), rowset=256,
      group([t1_op_null.c1]), agg_func(nil)
  1 - output([t1_op_null.c1], [t1_op_null.c2]), filter(nil), rowset=256,
      access([t1_op_null.c1], [t1_op_null.c2]), partitions(p0)

select * from t1_op_null where c1 like '%1' group by c1 having count(*) != NULL;
+------+------+
| c1   | c2   |
+------+------+
+------+------+


************************* replace op null condition, end*********

************************改写向量等值条件 begin**********

drop table if exists t1, t2;
create table t1 (id int, a int, b int, c varchar(10), d decimal);
create table is_t4 (id int, a int, b int, c varchar(10), d decimal);
insert/*trace*/ into t1 values (0 , 0, 0, '0', 0);
insert/*trace*/ into t1 values (1 , 1, 0, '0', 0);
insert/*trace*/ into t1 values (2 , 0, 1, '0', 0);
insert/*trace*/ into t1 values (3 , 1, 1, '0', 0);
insert/*trace*/ into t1 values (4 , 0, 0, '1', 0);
insert/*trace*/ into t1 values (5 , 1, 0, '1', 0);
insert/*trace*/ into t1 values (6 , 0, 1, '1', 0);
insert/*trace*/ into t1 values (7 , 1, 1, '1', 0);
insert/*trace*/ into t1 values (8 , 0, 0, '0', 1);
insert/*trace*/ into t1 values (9 , 1, 0, '0', 1);
insert/*trace*/ into t1 values (10, 0, 1, '0', 1);
insert/*trace*/ into t1 values (11, 1, 1, '0', 1);
insert/*trace*/ into t1 values (12, 0, 0, '1', 1);
insert/*trace*/ into t1 values (13, 1, 0, '1', 1);
insert/*trace*/ into t1 values (14, 0, 1, '1', 1);
insert/*trace*/ into t1 values (15, 1, 1, '1', 1);


****** convert_preds_vector_to_scalar: case 1
EXPLAIN select /*+no_rewrite*/* from t1 where (a, b) = (1, 1);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([(t1.a, t1.b) = (1, 1)]), rowset=256,
      access([t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), partitions(p0)

select /*+no_rewrite*/* from t1 where (a, b) = (1, 1);
+------+------+------+------+------+
| id   | a    | b    | c    | d    |
+------+------+------+------+------+
|    3 |    1 |    1 | 0    |    0 |
|    7 |    1 |    1 | 1    |    0 |
|   11 |    1 |    1 | 0    |    1 |
|   15 |    1 |    1 | 1    |    1 |
+------+------+------+------+------+
EXPLAIN select * from t1 where (a, b) = (1, 1);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([t1.a = 1], [t1.b = 1]), rowset=256,
      access([t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), partitions(p0)

select * from t1 where (a, b) = (1, 1);
+------+------+------+------+------+
| id   | a    | b    | c    | d    |
+------+------+------+------+------+
|    3 |    1 |    1 | 0    |    0 |
|    7 |    1 |    1 | 1    |    0 |
|   11 |    1 |    1 | 0    |    1 |
|   15 |    1 |    1 | 1    |    1 |
+------+------+------+------+------+
EXPLAIN update t1 set a = b + 1 where (a, b) = (1, 1);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |1        |71  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.id, t1.a, t1.b, t1.c, t1.d)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,cast(cast(1, INT(11, 0)) + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), filter([t1.a = 1], [t1.b = 1]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), partitions(p0)

update t1 set a = b + 1 where (a, b) = (1, 1);
EXPLAIN delete from t1 where (a, b) = (1, 1);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |1        |53  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.id, t1.a, t1.b, t1.c, t1.d)})}])
  1 - output([t1.__pk_increment], [t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([t1.a = 1], [t1.b = 1]), rowset=256,
      access([t1.__pk_increment], [t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)

delete from t1 where (a, b) = (1, 1);
EXPLAIN insert into is_t4 select * from t1 where (a, b) = (1, 1);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |53  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TABLE SCAN |t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t4: ({is_t4: (is_t4.__pk_increment, is_t4.id, is_t4.a, is_t4.b, is_t4.c, is_t4.d)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.id)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)], [column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,ANONYMOUS_VIEW1.c)], [column_conv(DECIMAL,PS:(10,0),NULL,ANONYMOUS_VIEW1.d)])
  1 - output([ANONYMOUS_VIEW1.id], [ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c], [ANONYMOUS_VIEW1.d]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.id], [ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c], [ANONYMOUS_VIEW1.d])
  2 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([t1.a = 1], [t1.b = 1]), rowset=256,
      access([t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), partitions(p0)

insert into is_t4 select * from t1 where (a, b) = (1, 1);


****** convert_preds_vector_to_scalar: case 2
EXPLAIN select /*+no_rewrite*/* from t1 where (a, c) = (1, 1);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([(t1.a, cast(t1.c, DECIMAL(-1, -1))) = (1, cast(1, DECIMAL(1, 0)))]), rowset=256,
      access([t1.a], [t1.c], [t1.id], [t1.b], [t1.d]), partitions(p0)

select /*+no_rewrite*/* from t1 where (a, c) = (1, 1);
+------+------+------+------+------+
| id   | a    | b    | c    | d    |
+------+------+------+------+------+
|    5 |    1 |    0 | 1    |    0 |
|   13 |    1 |    0 | 1    |    1 |
+------+------+------+------+------+
EXPLAIN select * from t1 where (a, c) = (1, 1);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.c, DECIMAL(-1, -1)) = cast(1, DECIMAL(1, 0))], [t1.a = 1]), rowset=256,
      access([t1.a], [t1.c], [t1.id], [t1.b], [t1.d]), partitions(p0)

select * from t1 where (a, c) = (1, 1);
+------+------+------+------+------+
| id   | a    | b    | c    | d    |
+------+------+------+------+------+
|    5 |    1 |    0 | 1    |    0 |
|   13 |    1 |    0 | 1    |    1 |
+------+------+------+------+------+
EXPLAIN update t1 set a = b + 1 where (a, c) = (1, 1);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |1        |70  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.id, t1.a, t1.b, t1.c, t1.d)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), filter([cast(t1.c, DECIMAL(-1, -1)) = cast(1, DECIMAL(1, 0))], [t1.a = 1]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), partitions(p0)

update t1 set a = b + 1 where (a, c) = (1, 1);
EXPLAIN delete from t1 where (a, c) = (1, 1);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |1        |53  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.id, t1.a, t1.b, t1.c, t1.d)})}])
  1 - output([t1.__pk_increment], [t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.c, DECIMAL(-1, -1)) = cast(1, DECIMAL(1, 0))], [t1.a = 1]), rowset=256,
      access([t1.__pk_increment], [t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)

delete from t1 where (a, c) = (1, 1);
EXPLAIN insert into is_t4 select * from t1 where (a, c) = (1, 1);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |9   |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |2   |
|2 |  TABLE SCAN |t1             |1        |2   |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t4: ({is_t4: (is_t4.__pk_increment, is_t4.id, is_t4.a, is_t4.b, is_t4.c, is_t4.d)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.id)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)], [column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,ANONYMOUS_VIEW1.c)], [column_conv(DECIMAL,PS:(10,0),NULL,ANONYMOUS_VIEW1.d)])
  1 - output([ANONYMOUS_VIEW1.id], [ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c], [ANONYMOUS_VIEW1.d]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.id], [ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c], [ANONYMOUS_VIEW1.d])
  2 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.c, DECIMAL(-1, -1)) = cast(1, DECIMAL(1, 0))], [t1.a = 1]), rowset=256,
      access([t1.a], [t1.c], [t1.id], [t1.b], [t1.d]), partitions(p0)

insert into is_t4 select * from t1 where (a, c) = (1, 1);


******convert_preds_vector_to_scalar: case 3
EXPLAIN select /*+no_rewrite*/* from t1 where (a, b) = (c, d);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |2   |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([(cast(t1.a, DECIMAL(11, 0)), cast(t1.b, DECIMAL(11, 0))) = (cast(t1.c, DECIMAL(-1, -1)), t1.d)]), rowset=256,
      access([t1.a], [t1.b], [t1.c], [t1.d], [t1.id]), partitions(p0)

select /*+no_rewrite*/* from t1 where (a, b) = (c, d);
+------+------+------+------+------+
| id   | a    | b    | c    | d    |
+------+------+------+------+------+
|    0 |    0 |    0 | 0    |    0 |
|   10 |    0 |    1 | 0    |    1 |
+------+------+------+------+------+
EXPLAIN select * from t1 where (a, b) = (c, d);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |2   |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.a, DECIMAL(11, 0)) = cast(t1.c, DECIMAL(-1, -1))], [cast(t1.b, DECIMAL(11, 0)) = t1.d]), rowset=256,
      access([t1.a], [t1.b], [t1.c], [t1.d], [t1.id]), partitions(p0)

select * from t1 where (a, b) = (c, d);
+------+------+------+------+------+
| id   | a    | b    | c    | d    |
+------+------+------+------+------+
|    0 |    0 |    0 | 0    |    0 |
|   10 |    0 |    1 | 0    |    1 |
+------+------+------+------+------+
EXPLAIN update t1 set a = b + 1 where (a, b) = (c, d);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |1        |27  |
|1 | TABLE SCAN|t1  |1        |2   |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.id, t1.a, t1.b, t1.c, t1.d)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), filter([cast(t1.a, DECIMAL(11, 0)) = cast(t1.c, DECIMAL(-1, -1))], [cast(t1.b, DECIMAL(11, 0)) = t1.d]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), partitions(p0)

update t1 set a = b + 1 where (a, b) = (c, d);
EXPLAIN delete from t1 where (a, b) = (c, d);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |1        |9   |
|1 | TABLE SCAN|t1  |1        |2   |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.id, t1.a, t1.b, t1.c, t1.d)})}])
  1 - output([t1.__pk_increment], [t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.a, DECIMAL(11, 0)) = cast(t1.c, DECIMAL(-1, -1))], [cast(t1.b, DECIMAL(11, 0)) = t1.d]), rowset=256,
      access([t1.__pk_increment], [t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)

delete from t1 where (a, b) = (c, d);
EXPLAIN insert into is_t4 select * from t1 where (a, b) = (c, d);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |9   |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |2   |
|2 |  TABLE SCAN |t1             |1        |2   |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t4: ({is_t4: (is_t4.__pk_increment, is_t4.id, is_t4.a, is_t4.b, is_t4.c, is_t4.d)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.id)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)], [column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,ANONYMOUS_VIEW1.c)], [column_conv(DECIMAL,PS:(10,0),NULL,ANONYMOUS_VIEW1.d)])
  1 - output([ANONYMOUS_VIEW1.id], [ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c], [ANONYMOUS_VIEW1.d]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.id], [ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c], [ANONYMOUS_VIEW1.d])
  2 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.a, DECIMAL(11, 0)) = cast(t1.c, DECIMAL(-1, -1))], [cast(t1.b, DECIMAL(11, 0)) = t1.d]), rowset=256,
      access([t1.a], [t1.b], [t1.c], [t1.d], [t1.id]), partitions(p0)

insert into is_t4 select * from t1 where (a, b) = (c, d);


******convert_preds_vector_to_scalar: case 4
EXPLAIN select /*+no_rewrite*/* from t1 where (a, c, d) = (c, d, a);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |2   |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([(cast(t1.a, DECIMAL(11, 0)), cast(t1.c, DECIMAL(-1, -1)), t1.d) = (cast(t1.c, DECIMAL(-1, -1)), t1.d, cast(t1.a, DECIMAL(11, 0)))]), rowset=256,
      access([t1.a], [t1.c], [t1.d], [t1.id], [t1.b]), partitions(p0)

select /*+no_rewrite*/* from t1 where (a, c, d) = (c, d, a);
+------+------+------+------+------+
| id   | a    | b    | c    | d    |
+------+------+------+------+------+
|    2 |    0 |    1 | 0    |    0 |
+------+------+------+------+------+
EXPLAIN select * from t1 where (a, c, d) = (c, d, a);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |2   |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.a, DECIMAL(11, 0)) = cast(t1.c, DECIMAL(-1, -1))], [t1.d = cast(t1.a, DECIMAL(11, 0))]), rowset=256,
      access([t1.a], [t1.c], [t1.d], [t1.id], [t1.b]), partitions(p0)

select * from t1 where (a, c, d) = (c, d, a);
+------+------+------+------+------+
| id   | a    | b    | c    | d    |
+------+------+------+------+------+
|    2 |    0 |    1 | 0    |    0 |
+------+------+------+------+------+
EXPLAIN update t1 set a = b + 1 where (a, c, d) = (c, d, a);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |1        |27  |
|1 | TABLE SCAN|t1  |1        |2   |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.id, t1.a, t1.b, t1.c, t1.d)})}]),
      update([t1.a=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 1, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), filter([cast(t1.a, DECIMAL(11, 0)) = cast(t1.c, DECIMAL(-1, -1))], [t1.d = cast(t1.a, DECIMAL(11, 0))]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.id], [t1.c], [t1.d]), partitions(p0)

update t1 set a = b + 1 where (a, c, d) = (c, d, a);
EXPLAIN delete from t1 where (a, c, d) = (c, d, a);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |1        |9   |
|1 | TABLE SCAN|t1  |1        |2   |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.id, t1.a, t1.b, t1.c, t1.d)})}])
  1 - output([t1.__pk_increment], [t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.a, DECIMAL(11, 0)) = cast(t1.c, DECIMAL(-1, -1))], [t1.d = cast(t1.a, DECIMAL(11, 0))]), rowset=256,
      access([t1.__pk_increment], [t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), partitions(p0)

delete from t1 where (a, c, d) = (c, d, a);
EXPLAIN insert into is_t4 select * from t1 where (a, c, d) = (c, d, a);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |9   |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |2   |
|2 |  TABLE SCAN |t1             |1        |2   |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{is_t4: ({is_t4: (is_t4.__pk_increment, is_t4.id, is_t4.a, is_t4.b, is_t4.c, is_t4.d)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.id)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)], [column_conv(VARCHAR,utf8mb4_general_ci,length:10,NULL,ANONYMOUS_VIEW1.c)], [column_conv(DECIMAL,PS:(10,0),NULL,ANONYMOUS_VIEW1.d)])
  1 - output([ANONYMOUS_VIEW1.id], [ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c], [ANONYMOUS_VIEW1.d]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.id], [ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c], [ANONYMOUS_VIEW1.d])
  2 - output([t1.id], [t1.a], [t1.b], [t1.c], [t1.d]), filter([cast(t1.a, DECIMAL(11, 0)) = cast(t1.c, DECIMAL(-1, -1))], [t1.d = cast(t1.a, DECIMAL(11, 0))]), rowset=256,
      access([t1.a], [t1.c], [t1.d], [t1.id], [t1.b]), partitions(p0)

insert into is_t4 select * from t1 where (a, c, d) = (c, d, a);

drop table t1;


************************改写向量等值条件 end**********

********************remove dummy exprs begin************************

drop table if exists t1;
create table t1(a int, b int, c int);
create table t_temp(a int, b int, c int);
insert/*trace*/ into t1 values (1,1,1),(2,2,2),(3,3,3),(4,4,4),(5,5,5);
set autocommit = 0;

******false or filter-> filter**********
EXPLAIN select * from t1 where false or t1.a < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where false or t1.a < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
|    1 |    1 |    1 |
|    2 |    2 |    2 |
+------+------+------+
EXPLAIN insert into t_temp select * from t1 where false or t1.a < 3;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |56  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TABLE SCAN |t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c)])
  1 - output([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert into t_temp select * from t1 where false or t1.a < 3;
EXPLAIN insert /*+NO_REWRITE*/into t_temp select * from t1 where false or t1.a < 3;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |56  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TABLE SCAN |t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c)])
  1 - output([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert /*+NO_REWRITE*/into t_temp select * from t1 where false or t1.a < 3;
EXPLAIN update t1 set t1.b = t1.b + 100 where false or t1.a < 3;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |1        |74  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 100, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), partitions(p0)

update t1 set t1.b = t1.b + 100 where false or t1.a < 3;
EXPLAIN update /*+NO_REWRITE*/t1 set t1.b = t1.b + 100 where false or t1.a < 3;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |1        |74  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 100, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), filter([0 OR t1.a < 3]), rowset=256,
      access([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), partitions(p0)

update /*+NO_REWRITE*/t1 set t1.b = t1.b + 100 where false or t1.a < 3;
EXPLAIN delete from t1 where false or t1.a < 3;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |1        |55  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), partitions(p0)

delete from t1 where false or t1.a < 3;
EXPLAIN delete /*+NO_REWRITE*/from t1 where false or t1.a < 3;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |1        |55  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), filter([0 OR t1.a < 3]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), partitions(p0)

delete /*+NO_REWRITE*/from t1 where false or t1.a < 3;
EXPLAIN select * from t1 where t1.a < 3 or 1 > 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 or 1 > 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where false or t1.a < 3 or t1.b < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3 OR t1.b < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where false or t1.a < 3 or t1.b < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 or 1 > 2 or t1.b < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3 OR t1.b < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 or 1 > 2 or t1.b < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where false or false or t1.a < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where false or false or t1.a < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 or false or false;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 or false or false;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where false or (t1.a < 3 and t1.b < 3);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3], [t1.b < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where false or (t1.a < 3 and t1.b < 3);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+


******true or filter-> true**********
EXPLAIN select * from t1 where t1.a < 3 or true;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 or true;
+------+------+------+
| a    | b    | c    |
+------+------+------+
|    3 |    3 |    3 |
|    4 |    4 |    4 |
|    5 |    5 |    5 |
+------+------+------+
EXPLAIN insert into t_temp as select * from t1 where t1.a < 3 or true;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your OceanBase version for the right syntax to use near 'as select * from t1 where t1.a < 3 or true' at line 1
insert into t_temp as select * from t1 where t1.a < 3 or true;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your OceanBase version for the right syntax to use near 'as select * from t1 where t1.a < 3 or true' at line 1
EXPLAIN insert /*+NO_REWRITE*/into t_temp as select * from t1 where t1.a < 3 or true;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your OceanBase version for the right syntax to use near 'as select * from t1 where t1.a < 3 or true' at line 1
insert /*+NO_REWRITE*/into t_temp as select * from t1 where t1.a < 3 or true;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your OceanBase version for the right syntax to use near 'as select * from t1 where t1.a < 3 or true' at line 1
EXPLAIN update t1 set t1.b = t1.b + 100 where t1.a < 3 or true;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |5        |108 |
|1 | TABLE SCAN|t1  |5        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 100, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), partitions(p0)

update t1 set t1.b = t1.b + 100 where t1.a < 3 or true;
EXPLAIN update /*+NO_REWRITE*/t1 set t1.b = t1.b + 100 where t1.a < 3 or true;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |5        |108 |
|1 | TABLE SCAN|t1  |5        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 100, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), filter([t1.a < 3 OR 1]), rowset=256,
      access([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), partitions(p0)

update /*+NO_REWRITE*/t1 set t1.b = t1.b + 100 where t1.a < 3 or true;
EXPLAIN delete from t1 where t1.a < 3 or true;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |5        |78  |
|1 | TABLE SCAN|t1  |5        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), partitions(p0)

delete from t1 where t1.a < 3 or true;
EXPLAIN delete /*+NO_REWRITE*/from t1 where t1.a < 3 or true;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |5        |78  |
|1 | TABLE SCAN|t1  |5        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), filter([t1.a < 3 OR 1]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), partitions(p0)

delete /*+NO_REWRITE*/from t1 where t1.a < 3 or true;
EXPLAIN select * from t1 where t1.a < 3 or 1 < 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 or 1 < 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where true or t1.a < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where true or t1.a < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where 1 < 2 or t1.a < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where 1 < 2 or t1.a < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 or t1.b < 3 or true;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 or t1.b < 3 or true;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 or t1.b < 3 or 1 < 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 or t1.b < 3 or 1 < 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where true or (t1.a < 3 and t1.b < 3);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where true or (t1.a < 3 and t1.b < 3);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+


******false and filter-> false**********
EXPLAIN select * from t1 where false and t1.a < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where false and t1.a < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 and 1 > 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 and 1 > 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 and false and t1. b < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 and false and t1. b < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 and t1.b < 3 and 1 > 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 and t1.b < 3 and 1 > 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where false and (t1.a < 3 and t1.b < 3);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where false and (t1.a < 3 and t1.b < 3);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN insert into t_temp select * from t1 where false and (t1.a < 3 and t1.b < 3);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |5        |84  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|5        |46  |
|2 |  TABLE SCAN |t1             |5        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c)])
  1 - output([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert into t_temp select * from t1 where false and (t1.a < 3 and t1.b < 3);
EXPLAIN insert /*+NO_REWRITE*/into t_temp select * from t1 where false and (t1.a < 3 and t1.b < 3);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |5        |84  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|5        |46  |
|2 |  TABLE SCAN |t1             |5        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.c)])
  1 - output([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b], [ANONYMOUS_VIEW1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert /*+NO_REWRITE*/into t_temp select * from t1 where false and (t1.a < 3 and t1.b < 3);
EXPLAIN update t1 set t1.b = t1.b + 100 where false and (t1.a < 3 and t1.b < 3);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |5        |108 |
|1 | TABLE SCAN|t1  |5        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 100, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), partitions(p0)

update t1 set t1.b = t1.b + 100 where false and (t1.a < 3 and t1.b < 3);
EXPLAIN update /*+NO_REWRITE*/t1 set t1.b = t1.b + 100 where false and (t1.a < 3 and t1.b < 3);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |UPDATE     |    |1        |70  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}]),
      update([t1.b=column_conv(INT,PS:(11,0),NULL,cast(t1.b + 100, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), filter([t1.a < 3], [t1.b < 3]), startup_filter([0]), rowset=256,
      access([t1.__pk_increment], [t1.b], [t1.a], [t1.c]), partitions(p0)

update /*+NO_REWRITE*/t1 set t1.b = t1.b + 100 where false and (t1.a < 3 and t1.b < 3);
EXPLAIN delete from t1 where false and (t1.a < 3 and t1.b < 3);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |5        |78  |
|1 | TABLE SCAN|t1  |5        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), partitions(p0)

delete from t1 where false and (t1.a < 3 and t1.b < 3);
EXPLAIN delete /*+NO_REWRITE*/from t1 where false and (t1.a < 3 and t1.b < 3);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |DELETE     |    |1        |53  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b, t1.c)})}])
  1 - output([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), filter([t1.a < 3], [t1.b < 3]), startup_filter([0]), rowset=256,
      access([t1.__pk_increment], [t1.a], [t1.b], [t1.c]), partitions(p0)

delete /*+NO_REWRITE*/from t1 where false and (t1.a < 3 and t1.b < 3);


******true and filter-> filter**********
EXPLAIN select * from t1 where true and t1.a < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where true and t1.a < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 and true and 1 < 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 and true and 1 < 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where t1.a < 3 and 1 < 2 and t1.b < 3;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3], [t1.b < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where t1.a < 3 and 1 < 2 and t1.b < 3;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where true and (t1.a < 3 and t1.b < 3);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter([t1.a < 3], [t1.b < 3]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where true and (t1.a < 3 and t1.b < 3);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+


**********test cases where we can not remove dummy exprs**********
EXPLAIN select * from t1 where 1 + true >= 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where 1 + true >= 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select * from t1 where 1 + false >= 2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |5        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), startup_filter([0]), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from t1 where 1 + false >= 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+


**********test cases hit different plan**********
explain_protocol: 0
insert into t1 values (1,1,1),(2,2,2);
alter system flush plan cache global;
select * from t1 where 1 = 1 and 2 = 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
|    1 |    1 |    1 |
|    2 |    2 |    2 |
+------+------+------+
select * from t1 where 0 = 0 and 2 = 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
|    1 |    1 |    1 |
|    2 |    2 |    2 |
+------+------+------+
select * from t1 where 1 = 1 and 2 = 0;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
select * from t1 where 0 = 0 and 2 = 0;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
select * from t1 where 2 = 1 and 0 = 0;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
select * from t1 where 3 = 0 and 2 = 2;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
select * from t1 where 2 = 1 and 2 = 0;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
select * from t1 where 2 = 0 and 2 = 0;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
## expect generate 2 plan
select hit_count, sql_id, query_sql from oceanbase.V$OB_PLAN_CACHE_PLAN_STAT where statement like "select * from t1 where ? = ? and ? = ?";
+-----------+----------------------------------+----------------------------------------+
| hit_count | sql_id                           | query_sql                              |
+-----------+----------------------------------+----------------------------------------+
|         1 | D685DF52D9A01CF8193B45BED9D46B2F | select * from t1 where 1 = 1 and 2 = 2 |
|         5 | D685DF52D9A01CF8193B45BED9D46B2F | select * from t1 where 1 = 1 and 2 = 0 |
+-----------+----------------------------------+----------------------------------------+
explain_protocol: 2
drop table t1;
drop table t_temp;


******bug fix https://aone.alibaba-inc.com/issue/16718020?spm=a2o8d.rdc_myindex.0.0.549d2a007jFluD*****
drop table if exists cache, resource_assigned;
CREATE TABLE `cache` ( `id` varchar(20) NOT NULL, `name` varchar(200) DEFAULT NULL, `description` varchar(200) DEFAULT NULL, `iaas_id` varchar(200) DEFAULT NULL, `provider_id` varchar(20) DEFAULT NULL, `region_id` varchar(20) DEFAULT NULL, `zone_id` varchar(20) DEFAULT NULL, `tenant_id` varchar(20) DEFAULT NULL, `workspace_id` varchar(20) DEFAULT NULL, `iaas_type` varchar(100) DEFAULT NULL, `status` varchar(50) NOT NULL, `network_type` varchar(50) DEFAULT NULL, `vpc_id` varchar(20) DEFAULT NULL, `v_switch_iaas_id` varchar(200) DEFAULT NULL, `spec_iaas_id` varchar(200) DEFAULT NULL, `capacity` bigint(20) DEFAULT NULL, `qps` bigint(20) DEFAULT NULL, `bandwidth` bigint(20) DEFAULT NULL, `max_connections` bigint(20) DEFAULT NULL, `connection_domain` varchar(200) DEFAULT NULL, `port` bigint(20) DEFAULT NULL, `user_name` varchar(200) DEFAULT NULL, `password` varchar(200) DEFAULT NULL, `utc_create` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `utc_modified` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP, `utc_deleted` timestamp NULL DEFAULT NULL, PRIMARY KEY (`id`), KEY `workspace_id` (`workspace_id`) BLOCK_SIZE 16384, KEY `zone_id` (`zone_id`) BLOCK_SIZE 16384, KEY `iaas_id` (`iaas_id`) BLOCK_SIZE 16384, KEY `region_id` (`region_id`) BLOCK_SIZE 16384, KEY `status` (`status`) BLOCK_SIZE 16384 );
CREATE TABLE `resource_assigned` ( `id` varchar(20) NOT NULL, `resource_id` varchar(20) NOT NULL, `resource_type` varchar(20) NOT NULL, `workspace_id` varchar(20) NOT NULL, `app_id` varchar(20) NOT NULL, `utc_create` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `utc_modified` timestamp NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP, PRIMARY KEY (`id`), UNIQUE KEY `assignedResource_UNIQUE` (`resource_id`, `resource_type`, `workspace_id`, `app_id`) BLOCK_SIZE 16384, KEY `resource_id` (`resource_id`) BLOCK_SIZE 16384, KEY `workspace_id` (`workspace_id`) BLOCK_SIZE 16384, KEY `app_id` (`app_id`) BLOCK_SIZE 16384 );
EXPLAIN SELECT COUNT(cache.id) FROM cache WHERE false OR cache.workspace_id IN ('0077508610') AND EXISTS ( SELECT resource_assigned.resource_id FROM resource_assigned WHERE resource_assigned.resource_id = cache.id AND resource_assigned.resource_type = 'CACHE' AND resource_assigned.workspace_id IN ('0077508610') AND resource_assigned.app_id IN ('0080452727') ) AND cache.status != 'DELETED';
Query Plan
=======================================================================================
|ID|OPERATOR                |NAME                                      |EST. ROWS|COST|
---------------------------------------------------------------------------------------
|0 |SCALAR GROUP BY         |                                          |1        |49  |
|1 | NESTED-LOOP JOIN       |                                          |1        |49  |
|2 |  TABLE SCAN            |cache                                     |1        |46  |
|3 |  DISTRIBUTED TABLE SCAN|resource_assigned(assignedResource_UNIQUE)|1        |7   |
=======================================================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(cache.id)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT(cache.id)])
  1 - output([cache.id]), filter(nil), rowset=256,
      conds(nil), nl_params_([cache.id])
  2 - output([cache.id]), filter([cache.status != 'DELETED'], [cache.workspace_id = '0077508610']), rowset=256,
      access([cache.id], [cache.workspace_id], [cache.status]), partitions(p0)
  3 - output(nil), filter(nil), rowset=256,
      access([GROUP_ID]), partitions(p0)

SELECT COUNT(cache.id) FROM cache WHERE false OR cache.workspace_id IN ('0077508610') AND EXISTS ( SELECT resource_assigned.resource_id FROM resource_assigned WHERE resource_assigned.resource_id = cache.id AND resource_assigned.resource_type = 'CACHE' AND resource_assigned.workspace_id IN ('0077508610') AND resource_assigned.app_id IN ('0080452727') ) AND cache.status != 'DELETED';
+-----------------+
| COUNT(cache.id) |
+-----------------+
|               0 |
+-----------------+
drop table cache, resource_assigned;

*********************remove dummy exprs end************************

******bug fix https://aone.alibaba-inc.com/issue/16991559
drop table if exists t1, t2;
create table t1 (c1 int);
create table t2 (c1 int primary key);

EXPLAIN insert into t1 values (1);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |1        |13  |
|1 | EXPRESSION       |    |1        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t1: ({t1: (t1.__pk_increment, t1.c1)})}]),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.c1)])
  1 - output([__values.c1]), filter(nil)
      values({1})

insert into t1 values (1);
EXPLAIN insert into t1 values (2);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |1        |13  |
|1 | EXPRESSION       |    |1        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t1: ({t1: (t1.__pk_increment, t1.c1)})}]),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.c1)])
  1 - output([__values.c1]), filter(nil)
      values({2})

insert into t1 values (2);
EXPLAIN insert into t2 values (1);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |1        |13  |
|1 | EXPRESSION       |    |1        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t2: ({t2: (t2.c1)})}]),
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.c1)])
  1 - output([__values.c1]), filter(nil)
      values({1})

insert into t2 values (1);
EXPLAIN insert into t2 values (2);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |1        |13  |
|1 | EXPRESSION       |    |1        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t2: ({t2: (t2.c1)})}]),
      column_values([column_conv(INT,PS:(11,0),NOT NULL,__values.c1)])
  1 - output([__values.c1]), filter(nil)
      values({2})

insert into t2 values (2);

EXPLAIN select * from t1 where c1 between coalesce( ( SELECT 1 ), -10 )AND 10;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter([(T_OP_BTW, t1.c1, coalesce(1, -10), 10)]), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t1 where c1 between coalesce( ( SELECT 1 ), -10 )AND 10;
+------+
| c1   |
+------+
|    1 |
|    2 |
+------+

EXPLAIN select * from t2 where c1 = 1 + (select 1);
Query Plan
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t2  |1        |46  |
==================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t2 where c1 = 1 + (select 1);
+----+
| c1 |
+----+
|  2 |
+----+

EXPLAIN select * from t2 where c1 = 1 + (select 1);
Query Plan
==================================
|ID|OPERATOR |NAME|EST. ROWS|COST|
----------------------------------
|0 |TABLE GET|t2  |1        |46  |
==================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t2 where c1 = 1 + (select 1);
+----+
| c1 |
+----+
|  2 |
+----+

drop table t1;
drop table t2;


*********************remove dummy exprs end************************
drop table if exists t1;
create table t1 (c1 int primary key, c2 int);

EXPLAIN select c1, max(c2) from t1 group by c1;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select c1, max(c2) from t1 group by c1;
+----+---------+
| c1 | max(c2) |
+----+---------+
+----+---------+
EXPLAIN select c1, max(c2) from t1 group by c1 with rollup;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |46  |
|1 | TABLE SCAN   |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_MAX(t1.c2)]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1]), agg_func([T_FUN_MAX(t1.c2)])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select c1, max(c2) from t1 group by c1 with rollup;
+----+---------+
| c1 | max(c2) |
+----+---------+
+----+---------+

drop table t1;

DROP TABLE IF EXISTS `b`, `cc`;
CREATE TABLE `b` (
  `col_int` int(11) DEFAULT NULL,
  `col_varchar` varchar(1) DEFAULT NULL,
  `col_varchar_10` varchar(10) DEFAULT NULL,
  `col_int_key` int(11) DEFAULT NULL,
  `col_varchar_20` varchar(20) DEFAULT NULL,
  `pk` int(11) NOT NULL,
  `col_varchar_key` varchar(1) DEFAULT NULL,
  `col_varchar_10_key` varchar(10) DEFAULT NULL,
  `col_varchar_20_key` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `idx1` (`pk`, `col_int_key`)  ,
  KEY `idx3` (`pk`, `col_varchar_key`)  ,
  KEY `idx5` (`pk`, `col_varchar_10_key`)  ,
  KEY `idx7` (`pk`, `col_varchar_20_key`)
) ;
CREATE TABLE `cc` (
  `col_int` int(11) DEFAULT NULL,
  `col_varchar_10` varchar(10) DEFAULT NULL,
  `col_varchar` varchar(1) DEFAULT NULL,
  `col_varchar_20_key` varchar(20) DEFAULT NULL,
  `col_varchar_key` varchar(1) DEFAULT NULL,
  `col_varchar_20` varchar(20) DEFAULT NULL,
  `col_int_key` int(11) DEFAULT NULL,
  `col_varchar_10_key` varchar(10) DEFAULT NULL,
  `pk` int(11) NOT NULL,
  PRIMARY KEY (`pk`),
  KEY `idx7` (`pk`, `col_varchar_20_key`)  ,
  KEY `idx3` (`pk`, `col_varchar_key`)  ,
  KEY `idx1` (`pk`, `col_int_key`)  ,
  KEY `idx5` (`pk`, `col_varchar_10_key`)
) ;
EXPLAIN SELECT table1 . col_varchar_key AS field1,
       CONCAT (table2 . `col_varchar_20`, table1 . `col_varchar_20_key`) AS field2,
       ((table2 . `col_int`) + (table1 . `col_int_key`)) AS field3,
       table2 . `col_varchar` AS field4,
       (SELECT SUM(SUBQUERY1_t2 . `pk`) AS SUBQUERY1_field1
        FROM (CC AS SUBQUERY1_t1 INNER JOIN B AS SUBQUERY1_t2 ON (SUBQUERY1_t2 . `col_int` = SUBQUERY1_t1 . `pk`))
        WHERE SUBQUERY1_t1 . `col_varchar_10` <> table1 . `col_varchar_20`
          AND SUBQUERY1_t1 . `col_int_key` = table1 . `col_int_key` ) AS field5,
        table1 . `pk` AS field6,
        table2 . col_varchar_20_key AS field7,
        CONCAT (table1 . `col_varchar_10_key`, table1 . `col_varchar_10_key`) AS field8,
        table2 . `col_int_key` AS field9,
        SUM(table2 . `pk`) AS field10,
        CONCAT (table1 . `col_varchar_10_key`, table1 . `col_varchar_10_key`) AS field11,
        SUM(table2 . `col_int_key`) AS field12,
        table1 . col_varchar_20_key AS field13,
        CONCAT (table1 . `col_varchar_20`, table2 . `col_varchar`) AS field14,
        ((table1 . `pk`) + (table2 . `col_int_key`)) AS field15
FROM (CC AS table1
      INNER JOIN CC AS table2 ON (table2 . `pk` = table1 . `pk`))
WHERE (NOT EXISTS ((SELECT 6 FROM DUAL)))
  AND table1 . `col_varchar_key` = table1 . `col_varchar_key`
GROUP BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field11,
         field13,
         field14,
         field15
HAVING ((field2 >= 'r'
         AND field1 < 'qr')
        AND field10 < 'pq')
ORDER BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field12,
         field13,
         field14,
         field15
LIMIT 100
OFFSET 2;
Query Plan
============================================================
|ID|OPERATOR                   |NAME        |EST. ROWS|COST|
------------------------------------------------------------
|0 |LIMIT                      |            |0        |105 |
|1 | TOP-N SORT                |            |1        |105 |
|2 |  HASH GROUP BY            |            |1        |105 |
|3 |   SUBPLAN FILTER          |            |1        |105 |
|4 |    HASH OUTER JOIN        |            |1        |105 |
|5 |     TABLE SCAN            |table1      |1        |46  |
|6 |     NESTED-LOOP JOIN      |            |1        |59  |
|7 |      TABLE SCAN           |SUBQUERY1_t2|1        |46  |
|8 |      DISTRIBUTED TABLE GET|SUBQUERY1_t1|1        |7   |
|9 |    LIMIT                  |            |1        |1   |
|10|     EXPRESSION            |            |1        |1   |
============================================================

Outputs & filters:
-------------------------------------
  0 - output([table1.col_varchar_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_int + table1.col_int_key], [table1.col_varchar], [T_FUN_SUM(SUBQUERY1_t2.pk)], [table1.pk], [table1.col_varchar_20_key], [CONCAT(table1.col_varchar_10_key, table1.col_varchar_10_key)], [table1.col_int_key], [cast(table1.pk, DECIMAL(11, 0))], [CONCAT(table1.col_varchar_10_key, table1.col_varchar_10_key)], [cast(table1.col_int_key, DECIMAL(11, 0))], [table1.col_varchar_20_key], [CONCAT(table1.col_varchar_20, table1.col_varchar)], [table1.pk + table1.col_int_key]), filter(nil), rowset=256, limit(100), offset(2)
  1 - output([table1.col_varchar_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_int + table1.col_int_key], [table1.col_varchar], [T_FUN_SUM(SUBQUERY1_t2.pk)], [table1.pk], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_10_key]), filter(nil), rowset=256, sort_keys([table1.col_varchar_key, ASC], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key), ASC], [table1.col_int + table1.col_int_key, ASC], [table1.col_varchar, ASC], [T_FUN_SUM(SUBQUERY1_t2.pk), ASC], [table1.pk, ASC]), topn(100 + 2)
  2 - output([table1.col_varchar_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar], [T_FUN_SUM(SUBQUERY1_t2.pk)], [table1.pk], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_int], [table1.col_varchar_10_key]), filter(nil), rowset=256,
      group([table1.pk]), agg_func([T_FUN_SUM(SUBQUERY1_t2.pk)])
  3 - output([table1.col_varchar_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar], [table1.pk], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_int], [table1.col_varchar_10_key], [SUBQUERY1_t2.pk]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_NOT_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  4 - output([table1.col_varchar_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar], [table1.pk], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_int], [table1.col_varchar_10_key], [SUBQUERY1_t2.pk]), filter(nil), startup_filter([?]), rowset=256,
      equal_conds([SUBQUERY1_t1.col_int_key = table1.col_int_key]), other_conds([SUBQUERY1_t1.col_varchar_10 != table1.col_varchar_20])
  5 - output([table1.pk], [table1.col_varchar_key], [table1.col_varchar_20_key], [table1.col_int], [table1.col_int_key], [table1.col_varchar], [table1.col_varchar_20], [table1.col_varchar_10_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)]), filter([table1.col_varchar_key < 'qr'], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key) >= 'r']), rowset=256,
      access([table1.pk], [table1.col_varchar_key], [table1.col_varchar_20_key], [table1.col_int], [table1.col_int_key], [table1.col_varchar], [table1.col_varchar_20], [table1.col_varchar_10_key]), partitions(p0)
  6 - output([SUBQUERY1_t2.pk], [SUBQUERY1_t1.col_varchar_10], [SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256,
      conds(nil), nl_params_([SUBQUERY1_t2.col_int])
  7 - output([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_int]), filter(nil), rowset=256,
      access([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_int]), partitions(p0)
  8 - output([SUBQUERY1_t1.col_varchar_10], [SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256,
      access([GROUP_ID], [SUBQUERY1_t1.col_varchar_10], [SUBQUERY1_t1.col_int_key]), partitions(p0)
  9 - output([6]), filter(nil), rowset=256, limit(1), offset(nil)
  10 - output([1]), filter(nil)
      values({1})

SELECT table1 . col_varchar_key AS field1,
       CONCAT (table2 . `col_varchar_20`, table1 . `col_varchar_20_key`) AS field2,
       ((table2 . `col_int`) + (table1 . `col_int_key`)) AS field3,
       table2 . `col_varchar` AS field4,
       (SELECT SUM(SUBQUERY1_t2 . `pk`) AS SUBQUERY1_field1
        FROM (CC AS SUBQUERY1_t1 INNER JOIN B AS SUBQUERY1_t2 ON (SUBQUERY1_t2 . `col_int` = SUBQUERY1_t1 . `pk`))
        WHERE SUBQUERY1_t1 . `col_varchar_10` <> table1 . `col_varchar_20`
          AND SUBQUERY1_t1 . `col_int_key` = table1 . `col_int_key` ) AS field5,
        table1 . `pk` AS field6,
        table2 . col_varchar_20_key AS field7,
        CONCAT (table1 . `col_varchar_10_key`, table1 . `col_varchar_10_key`) AS field8,
        table2 . `col_int_key` AS field9,
        SUM(table2 . `pk`) AS field10,
        CONCAT (table1 . `col_varchar_10_key`, table1 . `col_varchar_10_key`) AS field11,
        SUM(table2 . `col_int_key`) AS field12,
        table1 . col_varchar_20_key AS field13,
        CONCAT (table1 . `col_varchar_20`, table2 . `col_varchar`) AS field14,
        ((table1 . `pk`) + (table2 . `col_int_key`)) AS field15
FROM (CC AS table1
      INNER JOIN CC AS table2 ON (table2 . `pk` = table1 . `pk`))
WHERE (NOT EXISTS ((SELECT 6 FROM DUAL)))
  AND table1 . `col_varchar_key` = table1 . `col_varchar_key`
GROUP BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field11,
         field13,
         field14,
         field15
HAVING ((field2 >= 'r'
         AND field1 < 'qr')
        AND field10 < 'pq')
ORDER BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field12,
         field13,
         field14,
         field15
LIMIT 100
OFFSET 2;
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+---------+---------+
| field1 | field2 | field3 | field4 | field5 | field6 | field7 | field8 | field9 | field10 | field11 | field12 | field13 | field14 | field15 |
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+---------+---------+
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+---------+---------+

EXPLAIN SELECT /*+no_rewrite*/ table1 . col_varchar_key AS field1,
       CONCAT (table2 . `col_varchar_20`, table1 . `col_varchar_20_key`) AS field2,
       ((table2 . `col_int`) + (table1 . `col_int_key`)) AS field3,
       table2 . `col_varchar` AS field4,
       (SELECT SUM(SUBQUERY1_t2 . `pk`) AS SUBQUERY1_field1
        FROM (CC AS SUBQUERY1_t1 INNER JOIN B AS SUBQUERY1_t2 ON (SUBQUERY1_t2 . `col_int` = SUBQUERY1_t1 . `pk`))
        WHERE SUBQUERY1_t1 . `col_varchar_10` <> table1 . `col_varchar_20`
          AND SUBQUERY1_t1 . `col_int_key` = table1 . `col_int_key` ) AS field5,
        table1 . `pk` AS field6,
        table2 . col_varchar_20_key AS field7,
        CONCAT (table1 . `col_varchar_10_key`, table1 . `col_varchar_10_key`) AS field8,
        table2 . `col_int_key` AS field9,
        SUM(table2 . `pk`) AS field10,
        CONCAT (table1 . `col_varchar_10_key`, table1 . `col_varchar_10_key`) AS field11,
        SUM(table2 . `col_int_key`) AS field12,
        table1 . col_varchar_20_key AS field13,
        CONCAT (table1 . `col_varchar_20`, table2 . `col_varchar`) AS field14,
        ((table1 . `pk`) + (table2 . `col_int_key`)) AS field15
FROM (CC AS table1
      INNER JOIN CC AS table2 ON (table2 . `pk` = table1 . `pk`))
WHERE (NOT EXISTS ((SELECT 6 FROM DUAL)))
  AND table1 . `col_varchar_key` = table1 . `col_varchar_key`
GROUP BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field11,
         field13,
         field14,
         field15
HAVING ((field2 >= 'r'
         AND field1 < 'qr')
        AND field10 < 'pq')
ORDER BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field12,
         field13,
         field14,
         field15
LIMIT 100
OFFSET 2;
Query Plan
============================================================
|ID|OPERATOR                   |NAME        |EST. ROWS|COST|
------------------------------------------------------------
|0 |LIMIT                      |            |0        |112 |
|1 | TOP-N SORT                |            |1        |112 |
|2 |  MERGE GROUP BY           |            |1        |112 |
|3 |   SUBPLAN FILTER          |            |1        |112 |
|4 |    SUBPLAN FILTER         |            |1        |59  |
|5 |     NESTED-LOOP JOIN      |            |1        |59  |
|6 |      TABLE SCAN           |table1      |1        |46  |
|7 |      DISTRIBUTED TABLE GET|table2      |1        |7   |
|8 |     EXPRESSION            |            |1        |1   |
|9 |    SCALAR GROUP BY        |            |1        |53  |
|10|     NESTED-LOOP JOIN      |            |1        |53  |
|11|      TABLE SCAN           |SUBQUERY1_t2|1        |46  |
|12|      DISTRIBUTED TABLE GET|SUBQUERY1_t1|1        |7   |
============================================================

Outputs & filters:
-------------------------------------
  0 - output([table1.col_varchar_key], [CONCAT(table2.col_varchar_20, table1.col_varchar_20_key)], [table2.col_int + table1.col_int_key], [table2.col_varchar], [subquery(1)], [table1.pk], [table2.col_varchar_20_key], [CONCAT(table1.col_varchar_10_key, table1.col_varchar_10_key)], [table2.col_int_key], [T_FUN_SUM(table2.pk)], [CONCAT(table1.col_varchar_10_key, table1.col_varchar_10_key)], [T_FUN_SUM(table2.col_int_key)], [table1.col_varchar_20_key], [CONCAT(table1.col_varchar_20, table2.col_varchar)], [table1.pk + table2.col_int_key]), filter(nil), rowset=256, limit(100), offset(2)
  1 - output([table1.col_varchar_key], [CONCAT(table2.col_varchar_20, table1.col_varchar_20_key)], [table2.col_int + table1.col_int_key], [table2.col_varchar], [subquery(1)], [table1.pk], [table2.col_varchar_20_key], [table2.col_int_key], [T_FUN_SUM(table2.pk)], [T_FUN_SUM(table2.col_int_key)], [table1.col_varchar_20_key], [table1.col_varchar_20], [table1.col_varchar_10_key]), filter(nil), rowset=256, sort_keys([table1.col_varchar_key, ASC], [CONCAT(table2.col_varchar_20, table1.col_varchar_20_key), ASC], [table2.col_int + table1.col_int_key, ASC], [table2.col_varchar, ASC], [subquery(1), ASC], [table1.pk, ASC], [T_FUN_SUM(table2.pk), ASC], [T_FUN_SUM(table2.col_int_key), ASC]), topn(100 + 2)
  2 - output([table1.col_varchar_key], [CONCAT(table2.col_varchar_20, table1.col_varchar_20_key)], [table2.col_varchar], [subquery(1)], [table1.pk], [table2.col_varchar_20_key], [table2.col_int_key], [T_FUN_SUM(table2.pk)], [T_FUN_SUM(table2.col_int_key)], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_10_key], [table2.col_int]), filter([T_FUN_SUM(table2.pk) < cast('pq', DECIMAL(1, -1))], [table1.col_varchar_key < 'qr'], [CONCAT(table2.col_varchar_20, table1.col_varchar_20_key) >= 'r']), rowset=256,
      group([table1.pk]), agg_func([T_FUN_SUM(table2.pk)], [T_FUN_SUM(table2.col_int_key)])
  3 - output([table1.col_varchar_key], [table2.col_varchar], [subquery(1)], [table1.pk], [table2.col_varchar_20_key], [table2.col_int_key], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_10_key], [table2.pk], [table2.col_varchar_20], [table2.col_int]), filter(nil), rowset=256,
      exec_params_([table1.col_int_key], [table1.col_varchar_20]), onetime_exprs_(nil), init_plan_idxs_(nil)
  4 - output([table1.col_varchar_key], [table2.col_varchar], [table1.pk], [table2.col_varchar_20_key], [table2.col_int_key], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_10_key], [table2.pk], [table2.col_varchar_20], [table2.col_int]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_NOT_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  5 - output([table1.col_varchar_key], [table2.col_varchar], [table1.pk], [table2.col_varchar_20_key], [table2.col_int_key], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_10_key], [table2.pk], [table2.col_varchar_20], [table2.col_int]), filter(nil), startup_filter([?]), rowset=256,
      conds(nil), nl_params_([table1.pk])
  6 - output([table1.pk], [table1.col_varchar_key], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_10_key]), filter([table1.col_varchar_key = table1.col_varchar_key]), rowset=256,
      access([table1.pk], [table1.col_varchar_key], [table1.col_varchar_20_key], [table1.col_int_key], [table1.col_varchar_20], [table1.col_varchar_10_key]), partitions(p0)
  7 - output([table2.pk], [table2.col_varchar_20], [table2.col_int], [table2.col_varchar], [table2.col_varchar_20_key], [table2.col_int_key]), filter(nil), rowset=256,
      access([GROUP_ID], [table2.pk], [table2.col_varchar_20], [table2.col_int], [table2.col_varchar], [table2.col_varchar_20_key], [table2.col_int_key]), partitions(p0)
  8 - output([6]), filter(nil)
      values({6})
  9 - output([T_FUN_SUM(SUBQUERY1_t2.pk)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(SUBQUERY1_t2.pk)])
  10 - output([SUBQUERY1_t2.pk]), filter(nil), rowset=256,
      conds(nil), nl_params_([SUBQUERY1_t2.col_int])
  11 - output([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_int]), filter(nil), rowset=256,
      access([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_int]), partitions(p0)
  12 - output(nil), filter([SUBQUERY1_t1.col_varchar_10 != ?], [SUBQUERY1_t1.col_int_key = ?]), rowset=256,
      access([SUBQUERY1_t1.col_varchar_10], [SUBQUERY1_t1.col_int_key]), partitions(p0)

SELECT /*+no_rewrite*/ table1 . col_varchar_key AS field1,
       CONCAT (table2 . `col_varchar_20`, table1 . `col_varchar_20_key`) AS field2,
       ((table2 . `col_int`) + (table1 . `col_int_key`)) AS field3,
       table2 . `col_varchar` AS field4,
       (SELECT SUM(SUBQUERY1_t2 . `pk`) AS SUBQUERY1_field1
        FROM (CC AS SUBQUERY1_t1 INNER JOIN B AS SUBQUERY1_t2 ON (SUBQUERY1_t2 . `col_int` = SUBQUERY1_t1 . `pk`))
        WHERE SUBQUERY1_t1 . `col_varchar_10` <> table1 . `col_varchar_20`
          AND SUBQUERY1_t1 . `col_int_key` = table1 . `col_int_key` ) AS field5,
        table1 . `pk` AS field6,
        table2 . col_varchar_20_key AS field7,
        CONCAT (table1 . `col_varchar_10_key`, table1 . `col_varchar_10_key`) AS field8,
        table2 . `col_int_key` AS field9,
        SUM(table2 . `pk`) AS field10,
        CONCAT (table1 . `col_varchar_10_key`, table1 . `col_varchar_10_key`) AS field11,
        SUM(table2 . `col_int_key`) AS field12,
        table1 . col_varchar_20_key AS field13,
        CONCAT (table1 . `col_varchar_20`, table2 . `col_varchar`) AS field14,
        ((table1 . `pk`) + (table2 . `col_int_key`)) AS field15
FROM (CC AS table1
      INNER JOIN CC AS table2 ON (table2 . `pk` = table1 . `pk`))
WHERE (NOT EXISTS ((SELECT 6 FROM DUAL)))
  AND table1 . `col_varchar_key` = table1 . `col_varchar_key`
GROUP BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field11,
         field13,
         field14,
         field15
HAVING ((field2 >= 'r'
         AND field1 < 'qr')
        AND field10 < 'pq')
ORDER BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field12,
         field13,
         field14,
         field15
LIMIT 100
OFFSET 2;
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+---------+---------+
| field1 | field2 | field3 | field4 | field5 | field6 | field7 | field8 | field9 | field10 | field11 | field12 | field13 | field14 | field15 |
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+---------+---------+
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+---------+---------+


************************消除冗余select begin**********

drop table if exists t1,t2,t3;
create table t1 (c1 int, c2 int);
create table t2 (c1 int, c2 int);
create table t3 (c1 int, c2 int);
EXPLAIN select (select 123 from dual) from dual;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |EXPRESSION|    |1        |1   |
===================================

Outputs & filters:
-------------------------------------
  0 - output([123]), filter(nil)
      values({123})

select (select 123 from dual) from dual;
+------------------------+
| (select 123 from dual) |
+------------------------+
|                    123 |
+------------------------+
EXPLAIN select /*+no_rewrite*/ (select 123 from dual) from dual;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |1   |
|1 | EXPRESSION   |    |1        |1   |
|2 | EXPRESSION   |    |1        |1   |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([123]), filter(nil)
      values({123})

select /*+no_rewrite*/ (select 123 from dual) from dual;
+------------------------+
| (select 123 from dual) |
+------------------------+
|                    123 |
+------------------------+
EXPLAIN select (select sum(c1) from t1) from dual;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select (select sum(c1) from t1) from dual;
+--------------------------+
| (select sum(c1) from t1) |
+--------------------------+
|                       15 |
+--------------------------+
EXPLAIN select /*+no_rewrite*/ (select sum(c1) from t1) from dual;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |SUBPLAN FILTER  |    |1        |46  |
|1 | EXPRESSION     |    |1        |1   |
|2 | SCALAR GROUP BY|    |1        |46  |
|3 |  TABLE SCAN    |t1  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ (select sum(c1) from t1) from dual;
+--------------------------+
| (select sum(c1) from t1) |
+--------------------------+
|                       15 |
+--------------------------+
EXPLAIN select (select c1 from t1 limit 1) from dual;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |46  |
|1 | EXPRESSION   |    |1        |1   |
|2 | TABLE SCAN   |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

select (select c1 from t1 limit 1) from dual;
+-----------------------------+
| (select c1 from t1 limit 1) |
+-----------------------------+
|                           1 |
+-----------------------------+
EXPLAIN select /*+no_rewrite*/ (select c1 from t1 limit 1) from dual;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |46  |
|1 | EXPRESSION   |    |1        |1   |
|2 | TABLE SCAN   |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(1), offset(nil)

select /*+no_rewrite*/ (select c1 from t1 limit 1) from dual;
+-----------------------------+
| (select c1 from t1 limit 1) |
+-----------------------------+
|                           1 |
+-----------------------------+
EXPLAIN select (select c1 from t1 limit 0) from dual;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |1   |
|1 | EXPRESSION   |    |1        |1   |
|2 | TABLE SCAN   |t1  |0        |0   |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(0), offset(nil)

select (select c1 from t1 limit 0) from dual;
+-----------------------------+
| (select c1 from t1 limit 0) |
+-----------------------------+
|                        NULL |
+-----------------------------+
EXPLAIN select /*+no_rewrite*/ (select c1 from t1 limit 0) from dual;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |1   |
|1 | EXPRESSION   |    |1        |1   |
|2 | TABLE SCAN   |t1  |0        |0   |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0),
      limit(0), offset(nil)

select /*+no_rewrite*/ (select c1 from t1 limit 0) from dual;
+-----------------------------+
| (select c1 from t1 limit 0) |
+-----------------------------+
|                        NULL |
+-----------------------------+
EXPLAIN select (select 'x' from dual where 1>2) from dual;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |1   |
|1 | EXPRESSION   |    |1        |1   |
|2 | EXPRESSION   |    |1        |1   |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output(['x']), filter([0])
      values({'x'})

select (select 'x' from dual where 1>2) from dual;
+----------------------------------+
| (select 'x' from dual where 1>2) |
+----------------------------------+
| NULL                             |
+----------------------------------+
EXPLAIN select /*+no_rewrite*/ (select 'x' from dual where 1>2) from dual;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |1   |
|1 | EXPRESSION   |    |1        |1   |
|2 | EXPRESSION   |    |1        |1   |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output(['x']), filter([0])
      values({'x'})

select /*+no_rewrite*/ (select 'x' from dual where 1>2) from dual;
+----------------------------------+
| (select 'x' from dual where 1>2) |
+----------------------------------+
| NULL                             |
+----------------------------------+
select (select sum(c1) over() from t1) from dual;
ERROR 21000: Subquery returns more than 1 row
EXPLAIN select * from (select (select 123 from dual) from dual);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |EXPRESSION|    |1        |1   |
===================================

Outputs & filters:
-------------------------------------
  0 - output([123]), filter(nil)
      values({123})

select * from (select (select 123 from dual) from dual);
+------------------------+
| (select 123 from dual) |
+------------------------+
|                    123 |
+------------------------+
EXPLAIN select * from (select /*+no_rewrite*/ (select 123 from dual) from dual);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |1   |
|1 | SUBPLAN FILTER|               |1        |1   |
|2 |  EXPRESSION   |               |1        |1   |
|3 |  EXPRESSION   |               |1        |1   |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.(select 123 from dual)]), filter(nil), rowset=256,
      access([.(select 123 from dual)])
  1 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([1]), filter(nil)
      values({1})
  3 - output([123]), filter(nil)
      values({123})

select * from (select /*+no_rewrite*/ (select 123 from dual) from dual);
+------------------------+
| (select 123 from dual) |
+------------------------+
|                    123 |
+------------------------+
EXPLAIN select * from (select (select sum(c1) from t1) from dual);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select (select sum(c1) from t1) from dual);
+--------------------------+
| (select sum(c1) from t1) |
+--------------------------+
|                       15 |
+--------------------------+
EXPLAIN select * from (select /*+no_rewrite*/ (select sum(c1) from t1) from dual);
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |SUBPLAN SCAN     |ANONYMOUS_VIEW1|1        |46  |
|1 | SUBPLAN FILTER  |               |1        |46  |
|2 |  EXPRESSION     |               |1        |1   |
|3 |  SCALAR GROUP BY|               |1        |46  |
|4 |   TABLE SCAN    |t1             |1        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([.(select sum(c1) from t1)]), filter(nil), rowset=256,
      access([.(select sum(c1) from t1)])
  1 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([1]), filter(nil)
      values({1})
  3 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select /*+no_rewrite*/ (select sum(c1) from t1) from dual);
+--------------------------+
| (select sum(c1) from t1) |
+--------------------------+
|                       15 |
+--------------------------+
EXPLAIN select * from t2,(select (select 123 from dual) as c1 from dual) V where t2.c1 = V.c1;
Query Plan
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |1        |46  |
|1 | TABLE SCAN               |t2  |1        |46  |
|2 | MATERIAL                 |    |1        |1   |
|3 |  SUBPLAN SCAN            |V   |1        |1   |
|4 |   EXPRESSION             |    |1        |1   |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [V.c1]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2]), filter([t2.c1 = 123]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([V.c1]), filter(nil), rowset=256
  3 - output([V.c1]), filter(nil), rowset=256,
      access([V.c1])
  4 - output([123]), filter(nil)
      values({123})

select * from t2,(select (select 123 from dual) as c1 from dual) V where t2.c1 = V.c1;
+------+------+----+
| c1   | c2   | c1 |
+------+------+----+
+------+------+----+
EXPLAIN select * from t2,(select /*+no_rewrite*/ (select 123 from dual) as c1 from dual) V where t2.c1 = V.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |MERGE JOIN      |    |1        |46  |
|1 | SUBPLAN SCAN   |V   |1        |1   |
|2 |  SUBPLAN FILTER|    |1        |1   |
|3 |   EXPRESSION   |    |1        |1   |
|4 |   EXPRESSION   |    |1        |1   |
|5 | SORT           |    |1        |46  |
|6 |  TABLE SCAN    |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [V.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = V.c1]), other_conds(nil)
  1 - output([V.c1]), filter(nil), rowset=256,
      access([V.c1])
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([123]), filter(nil)
      values({123})
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC])
  6 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2,(select /*+no_rewrite*/ (select 123 from dual) as c1 from dual) V where t2.c1 = V.c1;
+------+------+----+
| c1   | c2   | c1 |
+------+------+----+
+------+------+----+
EXPLAIN select * from t2,(select (select sum(c1) from t1) as c1 from dual) V where t2.c1 = V.c1;
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |MERGE JOIN       |    |1        |91  |
|1 | SUBPLAN SCAN    |V   |1        |46  |
|2 |  SCALAR GROUP BY|    |1        |46  |
|3 |   TABLE SCAN    |t1  |1        |46  |
|4 | SORT            |    |1        |46  |
|5 |  TABLE SCAN     |t2  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [V.c1]), filter(nil), rowset=256,
      equal_conds([cast(t2.c1, DECIMAL(11, 0)) = V.c1]), other_conds(nil)
  1 - output([V.c1]), filter(nil), rowset=256,
      access([V.c1])
  2 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c1], [t2.c2], [cast(t2.c1, DECIMAL(11, 0))]), filter(nil), rowset=256, sort_keys([cast(t2.c1, DECIMAL(11, 0)), ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2,(select (select sum(c1) from t1) as c1 from dual) V where t2.c1 = V.c1;
+------+------+------+
| c1   | c2   | c1   |
+------+------+------+
+------+------+------+
EXPLAIN select * from t2,(select /*+no_rewrite*/ (select sum(c1) from t1) as c1 from dual) V where t2.c1 = V.c1;
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |MERGE JOIN        |    |1        |91  |
|1 | SUBPLAN SCAN     |V   |1        |46  |
|2 |  SUBPLAN FILTER  |    |1        |46  |
|3 |   EXPRESSION     |    |1        |1   |
|4 |   SCALAR GROUP BY|    |1        |46  |
|5 |    TABLE SCAN    |t1  |1        |46  |
|6 | SORT             |    |1        |46  |
|7 |  TABLE SCAN      |t2  |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [V.c1]), filter(nil), rowset=256,
      equal_conds([cast(t2.c1, DECIMAL(11, 0)) = V.c1]), other_conds(nil)
  1 - output([V.c1]), filter(nil), rowset=256,
      access([V.c1])
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  6 - output([t2.c1], [t2.c2], [cast(t2.c1, DECIMAL(11, 0))]), filter(nil), rowset=256, sort_keys([cast(t2.c1, DECIMAL(11, 0)), ASC])
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2,(select /*+no_rewrite*/ (select sum(c1) from t1) as c1 from dual) V where t2.c1 = V.c1;
+------+------+------+
| c1   | c2   | c1   |
+------+------+------+
+------+------+------+
EXPLAIN select * from t2 where t2.c1 = (select (select 123 from dual) from dual);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 = 123]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 = (select (select 123 from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 = (select /*+no_rewrite*/ (select 123 from dual) from dual);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |46  |
|1 | TABLE SCAN    |t2  |1        |46  |
|2 | SUBPLAN FILTER|    |1        |1   |
|3 |  EXPRESSION   |    |1        |1   |
|4 |  EXPRESSION   |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1], [t2.c2]), filter([t2.c1 = ?]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([123]), filter(nil)
      values({123})

select * from t2 where t2.c1 = (select /*+no_rewrite*/ (select 123 from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 = (select (select count(c1) from t1) from dual);
Query Plan
===========================================
|ID|OPERATOR         |NAME |EST. ROWS|COST|
-------------------------------------------
|0 |MERGE JOIN       |     |1        |91  |
|1 | SUBPLAN SCAN    |VIEW1|1        |46  |
|2 |  SCALAR GROUP BY|     |1        |46  |
|3 |   TABLE SCAN    |t1   |1        |46  |
|4 | SORT            |     |1        |46  |
|5 |  TABLE SCAN     |t2   |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = VIEW1.count(c1)]), other_conds(nil)
  1 - output([VIEW1.count(c1)]), filter(nil), rowset=256,
      access([VIEW1.count(c1)])
  2 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  3 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 = (select (select count(c1) from t1) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where t2.c1 = (select /*+no_rewrite*/ (select count(c1) from t1) from dual);
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |91  |
|1 | TABLE SCAN      |t2  |1        |46  |
|2 | SUBPLAN FILTER  |    |1        |46  |
|3 |  EXPRESSION     |    |1        |1   |
|4 |  SCALAR GROUP BY|    |1        |46  |
|5 |   TABLE SCAN    |t1  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1], [t2.c2]), filter([t2.c1 = ?]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  5 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t2 where t2.c1 = (select /*+no_rewrite*/ (select count(c1) from t1) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where t2.c1 in (select (select 123 from dual) from dual);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 = 123]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 in (select (select 123 from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 in (select /*+no_rewrite*/ (select 123 from dual) from dual);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |46  |
|1 | TABLE SCAN    |t2  |1        |46  |
|2 | SUBPLAN FILTER|    |1        |1   |
|3 |  EXPRESSION   |    |1        |1   |
|4 |  EXPRESSION   |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([123]), filter(nil)
      values({123})

select * from t2 where t2.c1 in (select /*+no_rewrite*/ (select 123 from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 in (select (select count(c1) from t1) from dual);
Query Plan
===========================================
|ID|OPERATOR         |NAME |EST. ROWS|COST|
-------------------------------------------
|0 |MERGE JOIN       |     |1        |91  |
|1 | SUBPLAN SCAN    |VIEW1|1        |46  |
|2 |  SCALAR GROUP BY|     |1        |46  |
|3 |   TABLE SCAN    |t1   |1        |46  |
|4 | SORT            |     |1        |46  |
|5 |  TABLE SCAN     |t2   |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = VIEW1.count(c1)]), other_conds(nil)
  1 - output([VIEW1.count(c1)]), filter(nil), rowset=256,
      access([VIEW1.count(c1)])
  2 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  3 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 in (select (select count(c1) from t1) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where t2.c1 in (select /*+no_rewrite*/ (select count(c1) from t1) from dual);
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |91  |
|1 | TABLE SCAN      |t2  |1        |46  |
|2 | SUBPLAN FILTER  |    |1        |46  |
|3 |  EXPRESSION     |    |1        |1   |
|4 |  SCALAR GROUP BY|    |1        |46  |
|5 |   TABLE SCAN    |t1  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  5 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t2 where t2.c1 in (select /*+no_rewrite*/ (select count(c1) from t1) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where exists (select (select 123 from dual) from dual);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |46  |
|1 | TABLE SCAN   |t2  |1        |46  |
|2 | LIMIT        |    |1        |1   |
|3 |  EXPRESSION  |    |1        |1   |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t2.c1], [t2.c2]), filter(nil), startup_filter([?]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([123]), filter(nil), rowset=256, limit(1), offset(nil)
  3 - output([1]), filter(nil)
      values({1})

select * from t2 where exists (select (select 123 from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where exists (select /*+no_rewrite*/ (select 123 from dual) from dual);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |46  |
|1 | TABLE SCAN    |t2  |1        |46  |
|2 | SUBPLAN FILTER|    |1        |1   |
|3 |  LIMIT        |    |1        |1   |
|4 |   EXPRESSION  |    |1        |1   |
|5 |  EXPRESSION   |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t2.c1], [t2.c2]), filter(nil), startup_filter([?]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output(nil), filter(nil), rowset=256, limit(1), offset(nil)
  4 - output([1]), filter(nil)
      values({1})
  5 - output([123]), filter(nil)
      values({123})

select * from t2 where exists (select /*+no_rewrite*/ (select 123 from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where exists (select (select count(c1) from t1) from dual);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where exists (select (select count(c1) from t1) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where exists (select /*+no_rewrite*/ (select count(c1) from t1) from dual);
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |91  |
|1 | TABLE SCAN      |t2  |1        |46  |
|2 | SUBPLAN FILTER  |    |1        |46  |
|3 |  LIMIT          |    |1        |1   |
|4 |   EXPRESSION    |    |1        |1   |
|5 |  SCALAR GROUP BY|    |1        |46  |
|6 |   TABLE SCAN    |t1  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t2.c1], [t2.c2]), filter(nil), startup_filter([?]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output(nil), filter(nil), rowset=256, limit(1), offset(nil)
  4 - output([1]), filter(nil)
      values({1})
  5 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  6 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t2 where exists (select /*+no_rewrite*/ (select count(c1) from t1) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where t2.c1 > all (select (select 123 from dual) from dual);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 > 123]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 > all (select (select 123 from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 > all (select /*+no_rewrite*/ (select 123 from dual) from dual);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |46  |
|1 | TABLE SCAN    |t2  |1        |46  |
|2 | SUBPLAN FILTER|    |1        |1   |
|3 |  EXPRESSION   |    |1        |1   |
|4 |  EXPRESSION   |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 > ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([123]), filter(nil)
      values({123})

select * from t2 where t2.c1 > all (select /*+no_rewrite*/ (select 123 from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 > all (select (select count(c1) from t1) from dual);
Query Plan
============================================
|ID|OPERATOR          |NAME |EST. ROWS|COST|
--------------------------------------------
|0 |NESTED-LOOP JOIN  |     |1        |91  |
|1 | TABLE SCAN       |t2   |1        |46  |
|2 | MATERIAL         |     |1        |46  |
|3 |  SUBPLAN SCAN    |VIEW1|1        |46  |
|4 |   SCALAR GROUP BY|     |1        |46  |
|5 |    TABLE SCAN    |t1   |1        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      conds([t2.c1 > VIEW1.count(c1)]), nl_params_(nil)
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([VIEW1.count(c1)]), filter(nil), rowset=256
  3 - output([VIEW1.count(c1)]), filter(nil), rowset=256,
      access([VIEW1.count(c1)])
  4 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  5 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t2 where t2.c1 > all (select (select count(c1) from t1) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 > all (select /*+no_rewrite*/ (select count(c1) from t1) from dual);
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |91  |
|1 | TABLE SCAN      |t2  |1        |46  |
|2 | SUBPLAN FILTER  |    |1        |46  |
|3 |  EXPRESSION     |    |1        |1   |
|4 |  SCALAR GROUP BY|    |1        |46  |
|5 |   TABLE SCAN    |t1  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 > ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  5 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t2 where t2.c1 > all (select /*+no_rewrite*/ (select count(c1) from t1) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select t2.c1, (select (select 123 from dual) from dual) as s1 from t2 order by s1;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [123]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select t2.c1, (select (select 123 from dual) from dual) as s1 from t2 order by s1;
+------+-----+
| c1   | s1  |
+------+-----+
|    1 | 123 |
|    2 | 123 |
|    3 | 123 |
|    4 | 123 |
|    5 | 123 |
+------+-----+
EXPLAIN select t2.c1, (select /*+no_rewrite*/ (select 123 from dual) from dual) as s1 from t2 order by s1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |46  |
|1 | TABLE SCAN    |t2  |1        |46  |
|2 | SUBPLAN FILTER|    |1        |1   |
|3 |  EXPRESSION   |    |1        |1   |
|4 |  EXPRESSION   |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([123]), filter(nil)
      values({123})

select t2.c1, (select /*+no_rewrite*/ (select 123 from dual) from dual) as s1 from t2 order by s1;
+------+-----+
| c1   | s1  |
+------+-----+
|    1 | 123 |
|    2 | 123 |
|    3 | 123 |
|    4 | 123 |
|    5 | 123 |
+------+-----+
EXPLAIN select t2.c1, (select (select sum(c1) from t1) from dual) as s1 from t2 order by s1;
Query Plan
=====================================================
|ID|OPERATOR                   |NAME |EST. ROWS|COST|
-----------------------------------------------------
|0 |SORT                       |     |1        |91  |
|1 | NESTED-LOOP JOIN CARTESIAN|     |1        |91  |
|2 |  TABLE SCAN               |t2   |1        |46  |
|3 |  MATERIAL                 |     |1        |46  |
|4 |   SUBPLAN SCAN            |VIEW1|1        |46  |
|5 |    SCALAR GROUP BY        |     |1        |46  |
|6 |     TABLE SCAN            |t1   |1        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [VIEW1.sum(c1)]), filter(nil), rowset=256, sort_keys([VIEW1.sum(c1), ASC])
  1 - output([VIEW1.sum(c1)], [t2.c1]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  3 - output([VIEW1.sum(c1)]), filter(nil), rowset=256
  4 - output([VIEW1.sum(c1)]), filter(nil), rowset=256,
      access([VIEW1.sum(c1)])
  5 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select t2.c1, (select (select sum(c1) from t1) from dual) as s1 from t2 order by s1;
+------+------+
| c1   | s1   |
+------+------+
|    1 |   15 |
|    2 |   15 |
|    3 |   15 |
|    4 |   15 |
|    5 |   15 |
+------+------+
EXPLAIN select t2.c1, (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) as s1 from t2 order by s1;
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |91  |
|1 | TABLE SCAN      |t2  |1        |46  |
|2 | SUBPLAN FILTER  |    |1        |46  |
|3 |  EXPRESSION     |    |1        |1   |
|4 |  SCALAR GROUP BY|    |1        |46  |
|5 |   TABLE SCAN    |t1  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select t2.c1, (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) as s1 from t2 order by s1;
+------+------+
| c1   | s1   |
+------+------+
|    1 |   15 |
|    2 |   15 |
|    3 |   15 |
|    4 |   15 |
|    5 |   15 |
+------+------+
EXPLAIN select t2.c1, (select (select 123 from dual) from dual) as s1 from t2 having s1 > 5;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [123]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select t2.c1, (select (select 123 from dual) from dual) as s1 from t2 having s1 > 5;
+------+-----+
| c1   | s1  |
+------+-----+
|    1 | 123 |
|    2 | 123 |
|    3 | 123 |
|    4 | 123 |
|    5 | 123 |
+------+-----+
EXPLAIN select t2.c1, (select /*+no_rewrite*/ (select 123 from dual) from dual) as s1 from t2 having s1 > 5;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |46  |
|1 | TABLE SCAN    |t2  |1        |46  |
|2 | SUBPLAN FILTER|    |1        |1   |
|3 |  EXPRESSION   |    |1        |1   |
|4 |  EXPRESSION   |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1]), filter(nil), startup_filter([? > 5]), rowset=256,
      access([t2.c1]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([123]), filter(nil)
      values({123})

select t2.c1, (select /*+no_rewrite*/ (select 123 from dual) from dual) as s1 from t2 having s1 > 5;
+------+-----+
| c1   | s1  |
+------+-----+
|    1 | 123 |
|    2 | 123 |
|    3 | 123 |
|    4 | 123 |
|    5 | 123 |
+------+-----+
EXPLAIN select t2.c1, (select (select sum(c1) from t1) from dual) as s1 from t2 having s1 > 5;
Query Plan
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|     |1        |48  |
|1 | SUBPLAN SCAN             |VIEW1|1        |46  |
|2 |  SCALAR GROUP BY         |     |1        |46  |
|3 |   TABLE SCAN             |t1   |1        |46  |
|4 | TABLE SCAN               |t2   |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [VIEW1.sum(c1)]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([VIEW1.sum(c1)]), filter(nil), rowset=256,
      access([VIEW1.sum(c1)])
  2 - output([T_FUN_SUM(t1.c1)]), filter([T_FUN_SUM(t1.c1) > cast(5, DECIMAL(1, 0))]), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select t2.c1, (select (select sum(c1) from t1) from dual) as s1 from t2 having s1 > 5;
+------+------+
| c1   | s1   |
+------+------+
|    1 |   15 |
|    2 |   15 |
|    3 |   15 |
|    4 |   15 |
|    5 |   15 |
+------+------+
EXPLAIN select t2.c1, (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) as s1 from t2 having s1 > 5;
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |91  |
|1 | TABLE SCAN      |t2  |1        |46  |
|2 | SUBPLAN FILTER  |    |1        |46  |
|3 |  EXPRESSION     |    |1        |1   |
|4 |  SCALAR GROUP BY|    |1        |46  |
|5 |   TABLE SCAN    |t1  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1]), filter(nil), startup_filter([? > cast(5, DECIMAL(1, 0))]), rowset=256,
      access([t2.c1]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select t2.c1, (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) as s1 from t2 having s1 > 5;
+------+------+
| c1   | s1   |
+------+------+
|    1 |   15 |
|    2 |   15 |
|    3 |   15 |
|    4 |   15 |
|    5 |   15 |
+------+------+
EXPLAIN select (select (select 123 from dual) from dual) from dual;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |EXPRESSION|    |1        |1   |
===================================

Outputs & filters:
-------------------------------------
  0 - output([123]), filter(nil)
      values({123})

select (select (select 123 from dual) from dual) from dual;
+-------------------------------------------+
| (select (select 123 from dual) from dual) |
+-------------------------------------------+
|                                       123 |
+-------------------------------------------+
EXPLAIN select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |1   |
|1 | EXPRESSION    |    |1        |1   |
|2 | SUBPLAN FILTER|    |1        |1   |
|3 |  EXPRESSION   |    |1        |1   |
|4 |  EXPRESSION   |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([123]), filter(nil)
      values({123})

select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual;
+-----------------------------------------------------------+
| (select /*+no_rewrite*/ (select 123 from dual) from dual) |
+-----------------------------------------------------------+
|                                                       123 |
+-----------------------------------------------------------+
EXPLAIN select (select (select sum(c1) from t1) from dual) from dual;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select (select (select sum(c1) from t1) from dual) from dual;
+---------------------------------------------+
| (select (select sum(c1) from t1) from dual) |
+---------------------------------------------+
|                                          15 |
+---------------------------------------------+
EXPLAIN select /*+no_rewrite*/ (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) from dual;
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |SUBPLAN FILTER   |    |1        |46  |
|1 | EXPRESSION      |    |1        |1   |
|2 | SUBPLAN FILTER  |    |1        |46  |
|3 |  EXPRESSION     |    |1        |1   |
|4 |  SCALAR GROUP BY|    |1        |46  |
|5 |   TABLE SCAN    |t1  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) from dual;
+-------------------------------------------------------------+
| (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) |
+-------------------------------------------------------------+
|                                                          15 |
+-------------------------------------------------------------+
EXPLAIN select * from (select (select (select 123 from dual) from dual) from dual);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |EXPRESSION|    |1        |1   |
===================================

Outputs & filters:
-------------------------------------
  0 - output([123]), filter(nil)
      values({123})

select * from (select (select (select 123 from dual) from dual) from dual);
+-------------------------------------------+
| (select (select 123 from dual) from dual) |
+-------------------------------------------+
|                                       123 |
+-------------------------------------------+
EXPLAIN select * from (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |1   |
|1 | SUBPLAN FILTER |               |1        |1   |
|2 |  EXPRESSION    |               |1        |1   |
|3 |  SUBPLAN FILTER|               |1        |1   |
|4 |   EXPRESSION   |               |1        |1   |
|5 |   EXPRESSION   |               |1        |1   |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([.(select /*+no_rewrite*/ (select 123 from dual) from dual)]), filter(nil), rowset=256,
      access([.(select /*+no_rewrite*/ (select 123 from dual) from dual)])
  1 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([1]), filter(nil)
      values({1})
  3 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([1]), filter(nil)
      values({1})
  5 - output([123]), filter(nil)
      values({123})

select * from (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual);
+-----------------------------------------------------------+
| (select /*+no_rewrite*/ (select 123 from dual) from dual) |
+-----------------------------------------------------------+
|                                                       123 |
+-----------------------------------------------------------+
EXPLAIN select * from (select (select (select sum(c1) from t1) from dual) from dual);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select (select (select sum(c1) from t1) from dual) from dual);
+---------------------------------------------+
| (select (select sum(c1) from t1) from dual) |
+---------------------------------------------+
|                                          15 |
+---------------------------------------------+
EXPLAIN select * from (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) from dual);
Query Plan
======================================================
|ID|OPERATOR          |NAME           |EST. ROWS|COST|
------------------------------------------------------
|0 |SUBPLAN SCAN      |ANONYMOUS_VIEW1|1        |46  |
|1 | SUBPLAN FILTER   |               |1        |46  |
|2 |  EXPRESSION      |               |1        |1   |
|3 |  SUBPLAN FILTER  |               |1        |46  |
|4 |   EXPRESSION     |               |1        |1   |
|5 |   SCALAR GROUP BY|               |1        |46  |
|6 |    TABLE SCAN    |t1             |1        |46  |
======================================================

Outputs & filters:
-------------------------------------
  0 - output([.(select /*+no_rewrite*/ (select sum(c1) from t1) from dual)]), filter(nil), rowset=256,
      access([.(select /*+no_rewrite*/ (select sum(c1) from t1) from dual)])
  1 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([1]), filter(nil)
      values({1})
  3 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([1]), filter(nil)
      values({1})
  5 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) from dual);
+-------------------------------------------------------------+
| (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) |
+-------------------------------------------------------------+
|                                                          15 |
+-------------------------------------------------------------+
EXPLAIN select * from t2,(select (select (select 123 from dual) from dual) as c1 from dual) V where t2.c1 = V.c1;
Query Plan
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |1        |46  |
|1 | TABLE SCAN               |t2  |1        |46  |
|2 | MATERIAL                 |    |1        |1   |
|3 |  SUBPLAN SCAN            |V   |1        |1   |
|4 |   EXPRESSION             |    |1        |1   |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [V.c1]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([t2.c1], [t2.c2]), filter([t2.c1 = 123]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([V.c1]), filter(nil), rowset=256
  3 - output([V.c1]), filter(nil), rowset=256,
      access([V.c1])
  4 - output([123]), filter(nil)
      values({123})

select * from t2,(select (select (select 123 from dual) from dual) as c1 from dual) V where t2.c1 = V.c1;
+------+------+----+
| c1   | c2   | c1 |
+------+------+----+
+------+------+----+
EXPLAIN select * from t2,(select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) as c1 from dual) V where t2.c1 = V.c1;
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |MERGE JOIN       |    |1        |46  |
|1 | SUBPLAN SCAN    |V   |1        |1   |
|2 |  SUBPLAN FILTER |    |1        |1   |
|3 |   EXPRESSION    |    |1        |1   |
|4 |   SUBPLAN FILTER|    |1        |1   |
|5 |    EXPRESSION   |    |1        |1   |
|6 |    EXPRESSION   |    |1        |1   |
|7 | SORT            |    |1        |46  |
|8 |  TABLE SCAN     |t2  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [V.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = V.c1]), other_conds(nil)
  1 - output([V.c1]), filter(nil), rowset=256,
      access([V.c1])
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([1]), filter(nil)
      values({1})
  6 - output([123]), filter(nil)
      values({123})
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC])
  8 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2,(select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) as c1 from dual) V where t2.c1 = V.c1;
+------+------+----+
| c1   | c2   | c1 |
+------+------+----+
+------+------+----+
EXPLAIN select * from t2,(select (select (select sum(c1) from t1) from dual) as c1 from dual) V where t2.c1 = V.c1;
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |MERGE JOIN       |    |1        |91  |
|1 | SUBPLAN SCAN    |V   |1        |46  |
|2 |  SCALAR GROUP BY|    |1        |46  |
|3 |   TABLE SCAN    |t1  |1        |46  |
|4 | SORT            |    |1        |46  |
|5 |  TABLE SCAN     |t2  |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [V.c1]), filter(nil), rowset=256,
      equal_conds([cast(t2.c1, DECIMAL(11, 0)) = V.c1]), other_conds(nil)
  1 - output([V.c1]), filter(nil), rowset=256,
      access([V.c1])
  2 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c1], [t2.c2], [cast(t2.c1, DECIMAL(11, 0))]), filter(nil), rowset=256, sort_keys([cast(t2.c1, DECIMAL(11, 0)), ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2,(select (select (select sum(c1) from t1) from dual) as c1 from dual) V where t2.c1 = V.c1;
+------+------+------+
| c1   | c2   | c1   |
+------+------+------+
+------+------+------+
EXPLAIN select * from t2,(select /*+no_rewrite*/ (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) as c1 from dual) V where t2.c1 = V.c1;
Query Plan
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |MERGE JOIN         |    |1        |91  |
|1 | SUBPLAN SCAN      |V   |1        |46  |
|2 |  SUBPLAN FILTER   |    |1        |46  |
|3 |   EXPRESSION      |    |1        |1   |
|4 |   SUBPLAN FILTER  |    |1        |46  |
|5 |    EXPRESSION     |    |1        |1   |
|6 |    SCALAR GROUP BY|    |1        |46  |
|7 |     TABLE SCAN    |t1  |1        |46  |
|8 | SORT              |    |1        |46  |
|9 |  TABLE SCAN       |t2  |1        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [V.c1]), filter(nil), rowset=256,
      equal_conds([cast(t2.c1, DECIMAL(11, 0)) = V.c1]), other_conds(nil)
  1 - output([V.c1]), filter(nil), rowset=256,
      access([V.c1])
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([1]), filter(nil)
      values({1})
  6 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  7 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  8 - output([t2.c1], [t2.c2], [cast(t2.c1, DECIMAL(11, 0))]), filter(nil), rowset=256, sort_keys([cast(t2.c1, DECIMAL(11, 0)), ASC])
  9 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2,(select /*+no_rewrite*/ (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) as c1 from dual) V where t2.c1 = V.c1;
+------+------+------+
| c1   | c2   | c1   |
+------+------+------+
+------+------+------+
EXPLAIN select * from t2 where t2.c1 = (select (select (select 123 from dual) from dual) from dual);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 = 123]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 = (select (select (select 123 from dual) from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 = (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual);
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |SUBPLAN FILTER  |    |1        |46  |
|1 | TABLE SCAN     |t2  |1        |46  |
|2 | SUBPLAN FILTER |    |1        |1   |
|3 |  EXPRESSION    |    |1        |1   |
|4 |  SUBPLAN FILTER|    |1        |1   |
|5 |   EXPRESSION   |    |1        |1   |
|6 |   EXPRESSION   |    |1        |1   |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1], [t2.c2]), filter([t2.c1 = ?]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([1]), filter(nil)
      values({1})
  6 - output([123]), filter(nil)
      values({123})

select * from t2 where t2.c1 = (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 = (select (select (select count(c1) from t1) from dual) from dual);
Query Plan
===========================================
|ID|OPERATOR         |NAME |EST. ROWS|COST|
-------------------------------------------
|0 |MERGE JOIN       |     |1        |91  |
|1 | SUBPLAN SCAN    |VIEW1|1        |46  |
|2 |  SCALAR GROUP BY|     |1        |46  |
|3 |   TABLE SCAN    |t1   |1        |46  |
|4 | SORT            |     |1        |46  |
|5 |  TABLE SCAN     |t2   |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = VIEW1.count(c1)]), other_conds(nil)
  1 - output([VIEW1.count(c1)]), filter(nil), rowset=256,
      access([VIEW1.count(c1)])
  2 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  3 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 = (select (select (select count(c1) from t1) from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where t2.c1 = (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select count(c1) from t1) from dual) from dual);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |SUBPLAN FILTER    |    |1        |91  |
|1 | TABLE SCAN       |t2  |1        |46  |
|2 | SUBPLAN FILTER   |    |1        |46  |
|3 |  EXPRESSION      |    |1        |1   |
|4 |  SUBPLAN FILTER  |    |1        |46  |
|5 |   EXPRESSION     |    |1        |1   |
|6 |   SCALAR GROUP BY|    |1        |46  |
|7 |    TABLE SCAN    |t1  |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1], [t2.c2]), filter([t2.c1 = ?]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([1]), filter(nil)
      values({1})
  6 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  7 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t2 where t2.c1 = (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select count(c1) from t1) from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where t2.c1 in (select (select (select 123 from dual) from dual) from dual);
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 = 123]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 in (select (select (select 123 from dual) from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 in (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual);
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |SUBPLAN FILTER  |    |1        |46  |
|1 | TABLE SCAN     |t2  |1        |46  |
|2 | SUBPLAN FILTER |    |1        |1   |
|3 |  EXPRESSION    |    |1        |1   |
|4 |  SUBPLAN FILTER|    |1        |1   |
|5 |   EXPRESSION   |    |1        |1   |
|6 |   EXPRESSION   |    |1        |1   |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([1]), filter(nil)
      values({1})
  6 - output([123]), filter(nil)
      values({123})

select * from t2 where t2.c1 in (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t2 where t2.c1 in (select (select (select count(c1) from t1) from dual) from dual);
Query Plan
===========================================
|ID|OPERATOR         |NAME |EST. ROWS|COST|
-------------------------------------------
|0 |MERGE JOIN       |     |1        |91  |
|1 | SUBPLAN SCAN    |VIEW1|1        |46  |
|2 |  SCALAR GROUP BY|     |1        |46  |
|3 |   TABLE SCAN    |t1   |1        |46  |
|4 | SORT            |     |1        |46  |
|5 |  TABLE SCAN     |t2   |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = VIEW1.count(c1)]), other_conds(nil)
  1 - output([VIEW1.count(c1)]), filter(nil), rowset=256,
      access([VIEW1.count(c1)])
  2 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  3 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t2 where t2.c1 in (select (select (select count(c1) from t1) from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    5 |
+------+------+
EXPLAIN select * from t2 where t2.c1 in (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select count(c1) from t1) from dual) from dual);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |SUBPLAN FILTER    |    |1        |91  |
|1 | TABLE SCAN       |t2  |1        |46  |
|2 | SUBPLAN FILTER   |    |1        |46  |
|3 |  EXPRESSION      |    |1        |1   |
|4 |  SUBPLAN FILTER  |    |1        |46  |
|5 |   EXPRESSION     |    |1        |1   |
|6 |   SCALAR GROUP BY|    |1        |46  |
|7 |    TABLE SCAN    |t1  |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([1]), filter(nil)
      values({1})
  6 - output([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT_SUM(T_FUN_COUNT(t1.c1))])
  7 - output([T_FUN_COUNT(t1.c1)]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t2 where t2.c1 in (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select count(c1) from t1) from dual) from dual);
+------+------+
| c1   | c2   |
+------+------+
|    5 |    5 |
+------+------+
EXPLAIN select t2.c1, (select (select (select 123 from dual) from dual) from dual) as s1 from t2 order by s1;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [123]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select t2.c1, (select (select (select 123 from dual) from dual) from dual) as s1 from t2 order by s1;
+------+-----+
| c1   | s1  |
+------+-----+
|    1 | 123 |
|    2 | 123 |
|    3 | 123 |
|    4 | 123 |
|    5 | 123 |
+------+-----+
EXPLAIN select t2.c1, (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual) as s1 from t2 order by s1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |SUBPLAN FILTER  |    |1        |46  |
|1 | TABLE SCAN     |t2  |1        |46  |
|2 | SUBPLAN FILTER |    |1        |1   |
|3 |  EXPRESSION    |    |1        |1   |
|4 |  SUBPLAN FILTER|    |1        |1   |
|5 |   EXPRESSION   |    |1        |1   |
|6 |   EXPRESSION   |    |1        |1   |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([1]), filter(nil)
      values({1})
  6 - output([123]), filter(nil)
      values({123})

select t2.c1, (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select 123 from dual) from dual) from dual) as s1 from t2 order by s1;
+------+-----+
| c1   | s1  |
+------+-----+
|    1 | 123 |
|    2 | 123 |
|    3 | 123 |
|    4 | 123 |
|    5 | 123 |
+------+-----+
EXPLAIN select t2.c1, (select (select (select sum(c1) from t1) from dual) from dual) as s1 from t2 order by s1;
Query Plan
=====================================================
|ID|OPERATOR                   |NAME |EST. ROWS|COST|
-----------------------------------------------------
|0 |SORT                       |     |1        |91  |
|1 | NESTED-LOOP JOIN CARTESIAN|     |1        |91  |
|2 |  TABLE SCAN               |t2   |1        |46  |
|3 |  MATERIAL                 |     |1        |46  |
|4 |   SUBPLAN SCAN            |VIEW1|1        |46  |
|5 |    SCALAR GROUP BY        |     |1        |46  |
|6 |     TABLE SCAN            |t1   |1        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [VIEW1.sum(c1)]), filter(nil), rowset=256, sort_keys([VIEW1.sum(c1), ASC])
  1 - output([VIEW1.sum(c1)], [t2.c1]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  3 - output([VIEW1.sum(c1)]), filter(nil), rowset=256
  4 - output([VIEW1.sum(c1)]), filter(nil), rowset=256,
      access([VIEW1.sum(c1)])
  5 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select t2.c1, (select (select (select sum(c1) from t1) from dual) from dual) as s1 from t2 order by s1;
+------+------+
| c1   | s1   |
+------+------+
|    1 |   15 |
|    2 |   15 |
|    3 |   15 |
|    4 |   15 |
|    5 |   15 |
+------+------+
EXPLAIN select t2.c1, (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) from dual) as s1 from t2 order by s1;
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |SUBPLAN FILTER    |    |1        |91  |
|1 | TABLE SCAN       |t2  |1        |46  |
|2 | SUBPLAN FILTER   |    |1        |46  |
|3 |  EXPRESSION      |    |1        |1   |
|4 |  SUBPLAN FILTER  |    |1        |46  |
|5 |   EXPRESSION     |    |1        |1   |
|6 |   SCALAR GROUP BY|    |1        |46  |
|7 |    TABLE SCAN    |t1  |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter(nil)
      values({1})
  4 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([1]), filter(nil)
      values({1})
  6 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c1)])
  7 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select t2.c1, (select /*+no_rewrite*/ (select /*+no_rewrite*/ (select sum(c1) from t1) from dual) from dual) as s1 from t2 order by s1;
+------+------+
| c1   | s1   |
+------+------+
|    1 |   15 |
|    2 |   15 |
|    3 |   15 |
|    4 |   15 |
|    5 |   15 |
+------+------+

drop table t1,t2,t3;

*********************remove dummy exprs end************************

************************消除冗余group by/distinct**********

drop table if exists t1, t2, t3, tpart1, tpart2, t4, t5, t6;
create table t1 (c1 int, c2 int, c3 int, c4 int);
create table t2 (c1 int, c2 int, c3 int, c4 int);
create table t3 (c1 int, c2 int, c3 int, c4 int);
create table tpart1 (c1 int, c2 int, c3 int, c4 int) partition by hash(c1) partitions 3;
create table tpart2 (c1 int, c2 int, c3 int, c4 int) partition by hash(c1) partitions 3;
create table t4 (c1 int, c2 int, c3 int, c4 int);
create table t5 (c1 int, c2 int, c3 int, c4 int);
create table t6 (c1 int, c2 float, c3 decimal, c4 varchar(20), c5 date);
set autocommit = 1;

set @old_sql_mode = @@sql_mode;
set @new_sql_mode = concat(@@sql_mode, ',ONLY_FULL_GROUP_BY');
set session sql_mode = @new_sql_mode;

##basic test
EXPLAIN select c1, c2, min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2) group by c1,c2;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |7        |48  |
|1 | TABLE SCAN  |t1  |7        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  1 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, c2, min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2) group by c1,c2;
+------+------+------------+
| c1   | c2   | min(minc3) |
+------+------+------------+
|    1 |    1 |          3 |
|    1 |    2 |          1 |
|    2 |    1 |          2 |
| NULL | NULL |       NULL |
+------+------+------------+
EXPLAIN select /*+no_rewrite*/ c1, c2, min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2) group by c1,c2;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [.c2], [T_FUN_MIN(.minc3)]), filter(nil), rowset=256,
      group([.c1], [.c2]), agg_func([T_FUN_MIN(.minc3)])
  1 - output([.c1], [.c2], [.minc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.minc3])
  2 - output([t1.c1], [t1.c2], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, c2, min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2) group by c1,c2;
+------+------+------------+
| c1   | c2   | min(minc3) |
+------+------+------------+
|    1 |    1 |          3 |
|    1 |    2 |          1 |
|    2 |    1 |          2 |
| NULL | NULL |       NULL |
+------+------+------------+
EXPLAIN select c1, min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2) group by c1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |7        |47  |
|1 | TABLE SCAN  |t1  |7        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MIN(t1.c3)])
  1 - output([t1.c1], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c3]), partitions(p0)

select c1, min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2) group by c1;
+------+------------+
| c1   | min(minc3) |
+------+------------+
|    1 |          1 |
|    2 |          2 |
| NULL |       NULL |
+------+------------+
EXPLAIN select /*+no_rewrite*/ c1, min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_MIN(.minc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_MIN(.minc3)])
  1 - output([.c1], [.minc3]), filter(nil), rowset=256,
      access([.c1], [.minc3])
  2 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2) group by c1;
+------+------------+
| c1   | min(minc3) |
+------+------------+
|    1 |          1 |
|    2 |          2 |
| NULL |       NULL |
+------+------------+
EXPLAIN select min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |7        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(t1.c3)])
  1 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2);
+------------+
| min(minc3) |
+------------+
|          1 |
+------------+
EXPLAIN select /*+no_rewrite*/ min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.minc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.minc3)])
  1 - output([.minc3]), filter(nil), rowset=256,
      access([.minc3])
  2 - output([T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ min(minc3) from (select c1, c2, min(c3) minc3 from t1 group by c1,c2);
+------------+
| min(minc3) |
+------------+
|          1 |
+------------+
EXPLAIN select min(minc3) from (select min(c3) minc3 from t1);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |7        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(t1.c3)])
  1 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select min(minc3) from (select min(c3) minc3 from t1);
+------------+
| min(minc3) |
+------------+
|          1 |
+------------+
EXPLAIN select /*+no_rewrite*/ min(minc3) from (select min(c3) minc3 from t1);
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |SCALAR GROUP BY  |               |1        |46  |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |46  |
|2 |  SCALAR GROUP BY|               |1        |46  |
|3 |   TABLE SCAN    |t1             |7        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.minc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.minc3)])
  1 - output([.minc3]), filter(nil), rowset=256,
      access([.minc3])
  2 - output([T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select /*+no_rewrite*/ min(minc3) from (select min(c3) minc3 from t1);
+------------+
| min(minc3) |
+------------+
|          1 |
+------------+

EXPLAIN select c1, c2, max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2) group by c1,c2;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |7        |48  |
|1 | TABLE SCAN  |t1  |7        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MAX(t1.c3)])
  1 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, c2, max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2) group by c1,c2;
+------+------+------------+
| c1   | c2   | max(maxc3) |
+------+------+------------+
|    1 |    1 |          5 |
|    1 |    2 |          4 |
|    2 |    1 |          2 |
| NULL | NULL |       NULL |
+------+------+------------+
EXPLAIN select /*+no_rewrite*/ c1, c2, max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2) group by c1,c2;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [.c2], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group([.c1], [.c2]), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.c1], [.c2], [.maxc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.maxc3])
  2 - output([t1.c1], [t1.c2], [T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MAX(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, c2, max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2) group by c1,c2;
+------+------+------------+
| c1   | c2   | max(maxc3) |
+------+------+------------+
|    1 |    1 |          5 |
|    1 |    2 |          4 |
|    2 |    1 |          2 |
| NULL | NULL |       NULL |
+------+------+------------+
EXPLAIN select c1, max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2) group by c1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |7        |47  |
|1 | TABLE SCAN  |t1  |7        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MAX(t1.c3)])
  1 - output([t1.c1], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c3]), partitions(p0)

select c1, max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2) group by c1;
+------+------------+
| c1   | max(maxc3) |
+------+------------+
|    1 |          5 |
|    2 |          2 |
| NULL |       NULL |
+------+------------+
EXPLAIN select /*+no_rewrite*/ c1, max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.c1], [.maxc3]), filter(nil), rowset=256,
      access([.c1], [.maxc3])
  2 - output([t1.c1], [T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MAX(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2) group by c1;
+------+------------+
| c1   | max(maxc3) |
+------+------------+
|    1 |          5 |
|    2 |          2 |
| NULL |       NULL |
+------+------------+
EXPLAIN select max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |7        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(t1.c3)])
  1 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2);
+------------+
| max(maxc3) |
+------------+
|          5 |
+------------+
EXPLAIN select /*+no_rewrite*/ max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.maxc3]), filter(nil), rowset=256,
      access([.maxc3])
  2 - output([T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MAX(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ max(maxc3) from (select c1, c2, max(c3) maxc3 from t1 group by c1,c2);
+------------+
| max(maxc3) |
+------------+
|          5 |
+------------+
EXPLAIN select max(maxc3) from (select max(c3) maxc3 from t1);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |7        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(t1.c3)])
  1 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select max(maxc3) from (select max(c3) maxc3 from t1);
+------------+
| max(maxc3) |
+------------+
|          5 |
+------------+
EXPLAIN select /*+no_rewrite*/ max(maxc3) from (select max(c3) maxc3 from t1);
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |SCALAR GROUP BY  |               |1        |46  |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |46  |
|2 |  SCALAR GROUP BY|               |1        |46  |
|3 |   TABLE SCAN    |t1             |7        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.maxc3]), filter(nil), rowset=256,
      access([.maxc3])
  2 - output([T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(t1.c3)])
  3 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select /*+no_rewrite*/ max(maxc3) from (select max(c3) maxc3 from t1);
+------------+
| max(maxc3) |
+------------+
|          5 |
+------------+

EXPLAIN select c1, c2, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2) group by c1,c2;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |7        |48  |
|1 | TABLE SCAN  |t1  |7        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  1 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, c2, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2) group by c1,c2;
+------+------+----------+
| c1   | c2   | sum(sc3) |
+------+------+----------+
|    1 |    1 |        8 |
|    1 |    2 |        5 |
|    2 |    1 |        2 |
| NULL | NULL |     NULL |
+------+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, c2, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2) group by c1,c2;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [.c2], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1], [.c2]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.c2], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.sc3])
  2 - output([t1.c1], [t1.c2], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, c2, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2) group by c1,c2;
+------+------+----------+
| c1   | c2   | sum(sc3) |
+------+------+----------+
|    1 |    1 |        8 |
|    1 |    2 |        5 |
|    2 |    1 |        2 |
| NULL | NULL |     NULL |
+------+------+----------+
EXPLAIN select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2) group by c1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |7        |47  |
|1 | TABLE SCAN  |t1  |7        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))])
  1 - output([t1.c1], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2) group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    1 |       13 |
|    2 |        2 |
| NULL |     NULL |
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2) group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    1 |       13 |
|    2 |        2 |
| NULL |     NULL |
+------+----------+
EXPLAIN select sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |7        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))])
  1 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select sum(sc3) from (select sum(c3) sc3 from t1);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |7        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))])
  1 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select sum(sc3) from (select sum(c3) sc3 from t1);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3) from (select sum(c3) sc3 from t1);
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |SCALAR GROUP BY  |               |1        |46  |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |46  |
|2 |  SCALAR GROUP BY|               |1        |46  |
|3 |   TABLE SCAN    |t1             |7        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select /*+no_rewrite*/ sum(sc3) from (select sum(c3) sc3 from t1);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+

EXPLAIN select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t1 group by c1,c2);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |7        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(t1.c1)], [T_FUN_MAX(t1.c2)], [T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t1.c3)], [T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(t1.c1)], [T_FUN_MAX(t1.c2)], [T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t1.c3)], [T_FUN_MAX(t1.c3)])
  1 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t1 group by c1,c2);
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|       1 |       2 |       15 |          1 |          5 |
+---------+---------+----------+------------+------------+
EXPLAIN select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t1 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)])
  1 - output([.c1], [.c2], [.sc3], [.minc3], [.maxc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.sc3], [.minc3], [.maxc3])
  2 - output([t1.c1], [t1.c2], [T_FUN_SUM(t1.c3)], [T_FUN_MIN(t1.c3)], [T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)], [T_FUN_MIN(t1.c3)], [T_FUN_MAX(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t1 group by c1,c2);
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|       1 |       2 |       15 |          1 |          5 |
+---------+---------+----------+------------+------------+
EXPLAIN select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from tpart1 group by c1,c2);
Query Plan
======================================================
|ID|OPERATOR                 |NAME    |EST. ROWS|COST|
------------------------------------------------------
|0 |SCALAR GROUP BY          |        |1        |140 |
|1 | PX COORDINATOR          |        |1        |140 |
|2 |  EXCHANGE OUT DISTR     |:EX10000|1        |139 |
|3 |   MERGE GROUP BY        |        |1        |137 |
|4 |    PX PARTITION ITERATOR|        |1        |137 |
|5 |     TABLE SCAN          |tpart1  |1        |137 |
======================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(T_FUN_MIN(tpart1.c1))], [T_FUN_MAX(T_FUN_MAX(tpart1.c2))], [T_FUN_SUM(T_FUN_SUM(cast(tpart1.c3, DECIMAL(11, 0))))], [T_FUN_MIN(T_FUN_MIN(tpart1.c3))], [T_FUN_MAX(T_FUN_MAX(tpart1.c3))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(T_FUN_MIN(tpart1.c1))], [T_FUN_MAX(T_FUN_MAX(tpart1.c2))], [T_FUN_SUM(T_FUN_SUM(cast(tpart1.c3, DECIMAL(11, 0))))], [T_FUN_MIN(T_FUN_MIN(tpart1.c3))], [T_FUN_MAX(T_FUN_MAX(tpart1.c3))])
  1 - output([T_FUN_MIN(tpart1.c1)], [T_FUN_MAX(tpart1.c2)], [T_FUN_SUM(cast(tpart1.c3, DECIMAL(11, 0)))], [T_FUN_MIN(tpart1.c3)], [T_FUN_MAX(tpart1.c3)]), filter(nil), rowset=256
  2 - output([T_FUN_MIN(tpart1.c1)], [T_FUN_MAX(tpart1.c2)], [T_FUN_SUM(cast(tpart1.c3, DECIMAL(11, 0)))], [T_FUN_MIN(tpart1.c3)], [T_FUN_MAX(tpart1.c3)]), filter(nil), rowset=256, dop=1
  3 - output([T_FUN_MIN(tpart1.c1)], [T_FUN_MAX(tpart1.c2)], [T_FUN_SUM(cast(tpart1.c3, DECIMAL(11, 0)))], [T_FUN_MIN(tpart1.c3)], [T_FUN_MAX(tpart1.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(tpart1.c1)], [T_FUN_MAX(tpart1.c2)], [T_FUN_SUM(cast(tpart1.c3, DECIMAL(11, 0)))], [T_FUN_MIN(tpart1.c3)], [T_FUN_MAX(tpart1.c3)])
  4 - output([tpart1.c1], [tpart1.c2], [tpart1.c3]), filter(nil), rowset=256
  5 - output([tpart1.c1], [tpart1.c2], [tpart1.c3]), filter(nil), rowset=256,
      access([tpart1.c1], [tpart1.c2], [tpart1.c3]), partitions(p[0-2])

select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from tpart1 group by c1,c2);
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|       1 |       2 |       13 |          1 |          3 |
+---------+---------+----------+------------+------------+
EXPLAIN select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from tpart1 group by c1,c2);
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |SCALAR GROUP BY           |               |1        |140 |
|1 | PX COORDINATOR           |               |1        |140 |
|2 |  EXCHANGE OUT DISTR      |:EX10000       |1        |139 |
|3 |   MERGE GROUP BY         |               |1        |138 |
|4 |    SUBPLAN SCAN          |ANONYMOUS_VIEW1|1        |138 |
|5 |     PX PARTITION ITERATOR|               |1        |138 |
|6 |      HASH GROUP BY       |               |1        |138 |
|7 |       TABLE SCAN         |tpart1         |1        |137 |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(T_FUN_MIN(.c1))], [T_FUN_MAX(T_FUN_MAX(.c2))], [T_FUN_SUM(T_FUN_SUM(.sc3))], [T_FUN_MIN(T_FUN_MIN(.minc3))], [T_FUN_MAX(T_FUN_MAX(.maxc3))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(T_FUN_MIN(.c1))], [T_FUN_MAX(T_FUN_MAX(.c2))], [T_FUN_SUM(T_FUN_SUM(.sc3))], [T_FUN_MIN(T_FUN_MIN(.minc3))], [T_FUN_MAX(T_FUN_MAX(.maxc3))])
  1 - output([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256
  2 - output([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256, dop=1
  3 - output([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)])
  4 - output([.c1], [.c2], [.sc3], [.minc3], [.maxc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.sc3], [.minc3], [.maxc3])
  5 - output([tpart1.c1], [tpart1.c2], [T_FUN_SUM(tpart1.c3)], [T_FUN_MIN(tpart1.c3)], [T_FUN_MAX(tpart1.c3)]), filter(nil), rowset=256
  6 - output([tpart1.c1], [tpart1.c2], [T_FUN_SUM(tpart1.c3)], [T_FUN_MIN(tpart1.c3)], [T_FUN_MAX(tpart1.c3)]), filter(nil), rowset=256,
      group([tpart1.c1], [tpart1.c2]), agg_func([T_FUN_SUM(tpart1.c3)], [T_FUN_MIN(tpart1.c3)], [T_FUN_MAX(tpart1.c3)])
  7 - output([tpart1.c1], [tpart1.c2], [tpart1.c3]), filter(nil), rowset=256,
      access([tpart1.c1], [tpart1.c2], [tpart1.c3]), partitions(p[0-2])

select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from tpart1 group by c1,c2);
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|       1 |       2 |       13 |          1 |          3 |
+---------+---------+----------+------------+------------+

EXPLAIN select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4 group by c1,c2) group by c1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |46  |
|1 | TABLE SCAN  |t4  |1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(t4.c1)], [T_FUN_MAX(t4.c2)], [T_FUN_SUM(cast(t4.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t4.c3)], [T_FUN_MAX(t4.c3)]), filter(nil), rowset=256,
      group([t4.c1]), agg_func([T_FUN_MIN(t4.c1)], [T_FUN_MAX(t4.c2)], [T_FUN_SUM(cast(t4.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t4.c3)], [T_FUN_MAX(t4.c3)])
  1 - output([t4.c1], [t4.c2], [t4.c3]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2], [t4.c3]), partitions(p0)

select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4 group by c1,c2) group by c1;
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|    NULL |    NULL |     NULL |       NULL |       NULL |
+---------+---------+----------+------------+------------+
EXPLAIN select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |46  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |46  |
|2 |  HASH GROUP BY|               |1        |46  |
|3 |   TABLE SCAN  |t4             |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)])
  1 - output([.c1], [.c2], [.sc3], [.minc3], [.maxc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.sc3], [.minc3], [.maxc3])
  2 - output([t4.c1], [t4.c2], [T_FUN_SUM(t4.c3)], [T_FUN_MIN(t4.c3)], [T_FUN_MAX(t4.c3)]), filter(nil), rowset=256,
      group([t4.c1], [t4.c2]), agg_func([T_FUN_SUM(t4.c3)], [T_FUN_MIN(t4.c3)], [T_FUN_MAX(t4.c3)])
  3 - output([t4.c1], [t4.c2], [t4.c3]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2], [t4.c3]), partitions(p0)

select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4 group by c1,c2) group by c1;
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|    NULL |    NULL |     NULL |       NULL |       NULL |
+---------+---------+----------+------------+------------+
EXPLAIN select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4 group by c1,c2);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t4  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(t4.c1)], [T_FUN_MAX(t4.c2)], [T_FUN_SUM(cast(t4.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t4.c3)], [T_FUN_MAX(t4.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(t4.c1)], [T_FUN_MAX(t4.c2)], [T_FUN_SUM(cast(t4.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t4.c3)], [T_FUN_MAX(t4.c3)])
  1 - output([t4.c1], [t4.c2], [t4.c3]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2], [t4.c3]), partitions(p0)

select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4 group by c1,c2);
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|    NULL |    NULL |     NULL |       NULL |       NULL |
+---------+---------+----------+------------+------------+
EXPLAIN select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |46  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |46  |
|2 |  HASH GROUP BY|               |1        |46  |
|3 |   TABLE SCAN  |t4             |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)])
  1 - output([.c1], [.c2], [.sc3], [.minc3], [.maxc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.sc3], [.minc3], [.maxc3])
  2 - output([t4.c1], [t4.c2], [T_FUN_SUM(t4.c3)], [T_FUN_MIN(t4.c3)], [T_FUN_MAX(t4.c3)]), filter(nil), rowset=256,
      group([t4.c1], [t4.c2]), agg_func([T_FUN_SUM(t4.c3)], [T_FUN_MIN(t4.c3)], [T_FUN_MAX(t4.c3)])
  3 - output([t4.c1], [t4.c2], [t4.c3]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2], [t4.c3]), partitions(p0)

select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4 group by c1,c2);
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|    NULL |    NULL |     NULL |       NULL |       NULL |
+---------+---------+----------+------------+------------+
EXPLAIN select sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4);
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
select sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4);
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
EXPLAIN select /*+no_rewrite*/ sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4);
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
select /*+no_rewrite*/ sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t4);
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause

EXPLAIN select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5 group by c1,c2) group by c1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |46  |
|1 | TABLE SCAN  |t5  |1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(t5.c1)], [T_FUN_MAX(t5.c2)], [T_FUN_SUM(cast(t5.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t5.c3)], [T_FUN_MAX(t5.c3)]), filter(nil), rowset=256,
      group([t5.c1]), agg_func([T_FUN_MIN(t5.c1)], [T_FUN_MAX(t5.c2)], [T_FUN_SUM(cast(t5.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t5.c3)], [T_FUN_MAX(t5.c3)])
  1 - output([t5.c1], [t5.c2], [t5.c3]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2], [t5.c3]), partitions(p0)

select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5 group by c1,c2) group by c1;
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
+---------+---------+----------+------------+------------+
EXPLAIN select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |46  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |46  |
|2 |  HASH GROUP BY|               |1        |46  |
|3 |   TABLE SCAN  |t5             |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)])
  1 - output([.c1], [.c2], [.sc3], [.minc3], [.maxc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.sc3], [.minc3], [.maxc3])
  2 - output([t5.c1], [t5.c2], [T_FUN_SUM(t5.c3)], [T_FUN_MIN(t5.c3)], [T_FUN_MAX(t5.c3)]), filter(nil), rowset=256,
      group([t5.c1], [t5.c2]), agg_func([T_FUN_SUM(t5.c3)], [T_FUN_MIN(t5.c3)], [T_FUN_MAX(t5.c3)])
  3 - output([t5.c1], [t5.c2], [t5.c3]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2], [t5.c3]), partitions(p0)

select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5 group by c1,c2) group by c1;
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
+---------+---------+----------+------------+------------+
EXPLAIN select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5 group by c1,c2);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t5  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(t5.c1)], [T_FUN_MAX(t5.c2)], [T_FUN_SUM(cast(t5.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t5.c3)], [T_FUN_MAX(t5.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(t5.c1)], [T_FUN_MAX(t5.c2)], [T_FUN_SUM(cast(t5.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t5.c3)], [T_FUN_MAX(t5.c3)])
  1 - output([t5.c1], [t5.c2], [t5.c3]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2], [t5.c3]), partitions(p0)

select min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5 group by c1,c2);
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|    NULL |    NULL |     NULL |       NULL |       NULL |
+---------+---------+----------+------------+------------+
EXPLAIN select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |46  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |46  |
|2 |  HASH GROUP BY|               |1        |46  |
|3 |   TABLE SCAN  |t5             |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.c1)], [T_FUN_MAX(.c2)], [T_FUN_SUM(.sc3)], [T_FUN_MIN(.minc3)], [T_FUN_MAX(.maxc3)])
  1 - output([.c1], [.c2], [.sc3], [.minc3], [.maxc3]), filter(nil), rowset=256,
      access([.c1], [.c2], [.sc3], [.minc3], [.maxc3])
  2 - output([t5.c1], [t5.c2], [T_FUN_SUM(t5.c3)], [T_FUN_MIN(t5.c3)], [T_FUN_MAX(t5.c3)]), filter(nil), rowset=256,
      group([t5.c1], [t5.c2]), agg_func([T_FUN_SUM(t5.c3)], [T_FUN_MIN(t5.c3)], [T_FUN_MAX(t5.c3)])
  3 - output([t5.c1], [t5.c2], [t5.c3]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2], [t5.c3]), partitions(p0)

select /*+no_rewrite*/ min(c1), max(c2), sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5 group by c1,c2);
+---------+---------+----------+------------+------------+
| min(c1) | max(c2) | sum(sc3) | min(minc3) | max(maxc3) |
+---------+---------+----------+------------+------------+
|    NULL |    NULL |     NULL |       NULL |       NULL |
+---------+---------+----------+------------+------------+
EXPLAIN select sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5);
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
select sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5);
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
EXPLAIN select /*+no_rewrite*/ sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5);
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause
select /*+no_rewrite*/ sum(sc3), min(minc3), max(maxc3) from (select c1, c2, sum(c3) sc3, min(c3) minc3, max(c3) maxc3 from t5);
ERROR 42000: Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is illegal if there is no GROUP BY clause

##union all test
EXPLAIN select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from t2 group by c1,c2));
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |91  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|14       |91  |
|2 |  UNION ALL    |               |14       |91  |
|3 |   TABLE SCAN  |t1             |7        |46  |
|4 |   TABLE SCAN  |t2             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(t1.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)
  4 - output([cast(t2.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t2.c3]), partitions(p0)

select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from t2 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       34 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from t2 group by c1,c2));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |95  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|14       |95  |
|2 |  UNION ALL     |               |14       |95  |
|3 |   HASH GROUP BY|               |7        |48  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |7        |48  |
|6 |    TABLE SCAN  |t2             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c3], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1], [t1.c2]), partitions(p0)
  5 - output([T_FUN_SUM(t2.c3)]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_SUM(t2.c3)])
  6 - output([t2.c3], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c3], [t2.c1], [t2.c2]), partitions(p0)

select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from t2 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       34 |
+----------+

EXPLAIN select max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1,c2)
      union all
      (select c1 from t2));
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |91  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|14       |91  |
|2 |  UNION ALL    |               |14       |91  |
|3 |   TABLE SCAN  |t1             |7        |46  |
|4 |   TABLE SCAN  |t2             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.maxc3]), filter(nil), rowset=256,
      access([.maxc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)
  4 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1,c2)
      union all
      (select c1 from t2));
+------------+
| max(maxc3) |
+------------+
|          5 |
+------------+
EXPLAIN select /*+no_rewrite*/ max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1,c2)
      union all
      (select c1 from t2));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |93  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|14       |93  |
|2 |  UNION ALL     |               |14       |93  |
|3 |   HASH GROUP BY|               |7        |48  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   TABLE SCAN   |t2             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.maxc3]), filter(nil), rowset=256,
      access([.maxc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MAX(t1.c3)])
  4 - output([t1.c3], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/ max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1,c2)
      union all
      (select c1 from t2));
+------------+
| max(maxc3) |
+------------+
|          5 |
+------------+

EXPLAIN select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1)
      union all
      (select min(c3) sc3 from t2 group by c1,c2));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |93  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|14       |93  |
|2 |  UNION ALL     |               |14       |93  |
|3 |   TABLE SCAN   |t1             |7        |46  |
|4 |   HASH GROUP BY|               |7        |48  |
|5 |    TABLE SCAN  |t2             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(t1.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)
  4 - output([cast(T_FUN_MIN(t2.c3), DECIMAL(11, 0))]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_MIN(t2.c3)])
  5 - output([t2.c3], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c3], [t2.c1], [t2.c2]), partitions(p0)

select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1)
      union all
      (select min(c3) sc3 from t2 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       19 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1)
      union all
      (select min(c3) sc3 from t2 group by c1,c2));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |95  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|14       |95  |
|2 |  UNION ALL     |               |14       |95  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |7        |48  |
|6 |    TABLE SCAN  |t2             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([cast(T_FUN_MIN(t2.c3), DECIMAL(11, 0))]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_MIN(t2.c3)])
  6 - output([t2.c3], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c3], [t2.c1], [t2.c2]), partitions(p0)

select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1)
      union all
      (select min(c3) sc3 from t2 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       19 |
+----------+

EXPLAIN select sum(sc3)
from ((select sum(c3) sc3 from tpart1 group by c1,c2)
      union all
      (select sum(c3) sc3 from tpart2 group by c1,c2));
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |SCALAR GROUP BY           |               |1        |275 |
|1 | PX COORDINATOR           |               |1        |275 |
|2 |  EXCHANGE OUT DISTR      |:EX10000       |1        |275 |
|3 |   MERGE GROUP BY         |               |1        |274 |
|4 |    SUBPLAN SCAN          |ANONYMOUS_VIEW1|2        |274 |
|5 |     PX PARTITION ITERATOR|               |2        |274 |
|6 |      UNION ALL           |               |2        |274 |
|7 |       TABLE SCAN         |tpart1         |1        |137 |
|8 |       TABLE SCAN         |tpart2         |1        |137 |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(T_FUN_SUM(.sc3))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(T_FUN_SUM(.sc3))])
  1 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256
  2 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256, dop=1
  3 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  4 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  5 - output([UNION([1])]), filter(nil), rowset=256
  6 - output([UNION([1])]), filter(nil), rowset=256
  7 - output([cast(tpart1.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([tpart1.c3]), partitions(p[0-2])
  8 - output([cast(tpart2.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([tpart2.c3]), partitions(p[0-2])

select sum(sc3)
from ((select sum(c3) sc3 from tpart1 group by c1,c2)
      union all
      (select sum(c3) sc3 from tpart2 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       44 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from tpart1 group by c1,c2)
      union all
      (select sum(c3) sc3 from tpart2 group by c1,c2));
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |SCALAR GROUP BY           |               |1        |275 |
|1 | PX COORDINATOR           |               |1        |275 |
|2 |  EXCHANGE OUT DISTR      |:EX10000       |1        |275 |
|3 |   MERGE GROUP BY         |               |1        |275 |
|4 |    SUBPLAN SCAN          |ANONYMOUS_VIEW1|2        |275 |
|5 |     PX PARTITION ITERATOR|               |2        |275 |
|6 |      UNION ALL           |               |2        |275 |
|7 |       HASH GROUP BY      |               |1        |138 |
|8 |        TABLE SCAN        |tpart1         |1        |137 |
|9 |       HASH GROUP BY      |               |1        |138 |
|10|        TABLE SCAN        |tpart2         |1        |137 |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(T_FUN_SUM(.sc3))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(T_FUN_SUM(.sc3))])
  1 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256
  2 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256, dop=1
  3 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  4 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  5 - output([UNION([1])]), filter(nil), rowset=256
  6 - output([UNION([1])]), filter(nil), rowset=256
  7 - output([T_FUN_SUM(tpart1.c3)]), filter(nil), rowset=256,
      group([tpart1.c1], [tpart1.c2]), agg_func([T_FUN_SUM(tpart1.c3)])
  8 - output([tpart1.c1], [tpart1.c3], [tpart1.c2]), filter(nil), rowset=256,
      access([tpart1.c1], [tpart1.c3], [tpart1.c2]), partitions(p[0-2])
  9 - output([T_FUN_SUM(tpart2.c3)]), filter(nil), rowset=256,
      group([tpart2.c1], [tpart2.c2]), agg_func([T_FUN_SUM(tpart2.c3)])
  10 - output([tpart2.c1], [tpart2.c3], [tpart2.c2]), filter(nil), rowset=256,
      access([tpart2.c1], [tpart2.c3], [tpart2.c2]), partitions(p[0-2])

select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from tpart1 group by c1,c2)
      union all
      (select sum(c3) sc3 from tpart2 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       44 |
+----------+

EXPLAIN select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from tpart2 group by c1,c2));
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |SCALAR GROUP BY           |               |1        |183 |
|1 | SUBPLAN SCAN             |ANONYMOUS_VIEW1|8        |183 |
|2 |  UNION ALL               |               |8        |183 |
|3 |   TABLE SCAN             |t1             |7        |46  |
|4 |   PX COORDINATOR         |               |1        |138 |
|5 |    EXCHANGE OUT DISTR    |:EX10000       |1        |138 |
|6 |     PX PARTITION ITERATOR|               |1        |137 |
|7 |      TABLE SCAN          |tpart2         |1        |137 |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(t1.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)
  4 - output([cast(tpart2.c3, DECIMAL(11, 0))]), filter(nil), rowset=256
  5 - output([tpart2.c3]), filter(nil), rowset=256, dop=1
  6 - output([tpart2.c3]), filter(nil), rowset=256
  7 - output([tpart2.c3]), filter(nil), rowset=256,
      access([tpart2.c3]), partitions(p[0-2])

select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from tpart2 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       46 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from tpart2 group by c1,c2));
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |SCALAR GROUP BY           |               |1        |185 |
|1 | SUBPLAN SCAN             |ANONYMOUS_VIEW1|8        |185 |
|2 |  UNION ALL               |               |8        |185 |
|3 |   HASH GROUP BY          |               |7        |48  |
|4 |    TABLE SCAN            |t1             |7        |46  |
|5 |   PX COORDINATOR         |               |1        |138 |
|6 |    EXCHANGE OUT DISTR    |:EX10000       |1        |138 |
|7 |     PX PARTITION ITERATOR|               |1        |138 |
|8 |      HASH GROUP BY       |               |1        |138 |
|9 |       TABLE SCAN         |tpart2         |1        |137 |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c3], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1], [t1.c2]), partitions(p0)
  5 - output([T_FUN_SUM(tpart2.c3)]), filter(nil), rowset=256
  6 - output([T_FUN_SUM(tpart2.c3)]), filter(nil), rowset=256, dop=1
  7 - output([T_FUN_SUM(tpart2.c3)]), filter(nil), rowset=256
  8 - output([T_FUN_SUM(tpart2.c3)]), filter(nil), rowset=256,
      group([tpart2.c1], [tpart2.c2]), agg_func([T_FUN_SUM(tpart2.c3)])
  9 - output([tpart2.c1], [tpart2.c3], [tpart2.c2]), filter(nil), rowset=256,
      access([tpart2.c1], [tpart2.c3], [tpart2.c2]), partitions(p[0-2])

select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from tpart2 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       46 |
+----------+

EXPLAIN select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from t2 group by c1,c2)
      union all
      (select sum(c3) sc3 from t3 group by c1,c2));
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |137 |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|19       |137 |
|2 |  UNION ALL    |               |19       |137 |
|3 |   TABLE SCAN  |t1             |7        |46  |
|4 |   TABLE SCAN  |t2             |7        |46  |
|5 |   TABLE SCAN  |t3             |5        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(t1.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)
  4 - output([cast(t2.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t2.c3]), partitions(p0)
  5 - output([cast(t3.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)

select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from t2 group by c1,c2)
      union all
      (select sum(c3) sc3 from t3 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       46 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from t2 group by c1,c2)
      union all
      (select sum(c3) sc3 from t3 group by c1,c2));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |141 |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|19       |141 |
|2 |  UNION ALL     |               |19       |141 |
|3 |   HASH GROUP BY|               |7        |48  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |7        |48  |
|6 |    TABLE SCAN  |t2             |7        |46  |
|7 |   HASH GROUP BY|               |5        |47  |
|8 |    TABLE SCAN  |t3             |5        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c3], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1], [t1.c2]), partitions(p0)
  5 - output([T_FUN_SUM(t2.c3)]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_SUM(t2.c3)])
  6 - output([t2.c3], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c3], [t2.c1], [t2.c2]), partitions(p0)
  7 - output([T_FUN_SUM(t3.c3)]), filter(nil), rowset=256,
      group([t3.c1], [t3.c2]), agg_func([T_FUN_SUM(t3.c3)])
  8 - output([t3.c3], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c3], [t3.c1], [t3.c2]), partitions(p0)

select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select sum(c3) sc3 from t2 group by c1,c2)
      union all
      (select sum(c3) sc3 from t3 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       46 |
+----------+

EXPLAIN select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select min(c3) sc3 from t2 group by c1,c2)
      union all
      (select sum(c3) sc3 from t3 group by c1,c2));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |138 |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|19       |138 |
|2 |  UNION ALL     |               |19       |138 |
|3 |   TABLE SCAN   |t1             |7        |46  |
|4 |   HASH GROUP BY|               |7        |48  |
|5 |    TABLE SCAN  |t2             |7        |46  |
|6 |   TABLE SCAN   |t3             |5        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(t1.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)
  4 - output([cast(T_FUN_MIN(t2.c3), DECIMAL(11, 0))]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_MIN(t2.c3)])
  5 - output([t2.c3], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c3], [t2.c1], [t2.c2]), partitions(p0)
  6 - output([cast(t3.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)

select sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select min(c3) sc3 from t2 group by c1,c2)
      union all
      (select sum(c3) sc3 from t3 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       31 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select min(c3) sc3 from t2 group by c1,c2)
      union all
      (select sum(c3) sc3 from t3 group by c1,c2));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |141 |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|19       |141 |
|2 |  UNION ALL     |               |19       |141 |
|3 |   HASH GROUP BY|               |7        |48  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |7        |48  |
|6 |    TABLE SCAN  |t2             |7        |46  |
|7 |   HASH GROUP BY|               |5        |47  |
|8 |    TABLE SCAN  |t3             |5        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c3], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1], [t1.c2]), partitions(p0)
  5 - output([cast(T_FUN_MIN(t2.c3), DECIMAL(11, 0))]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_MIN(t2.c3)])
  6 - output([t2.c3], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c3], [t2.c1], [t2.c2]), partitions(p0)
  7 - output([T_FUN_SUM(t3.c3)]), filter(nil), rowset=256,
      group([t3.c1], [t3.c2]), agg_func([T_FUN_SUM(t3.c3)])
  8 - output([t3.c3], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c3], [t3.c1], [t3.c2]), partitions(p0)

select /*+no_rewrite*/ sum(sc3)
from ((select sum(c3) sc3 from t1 group by c1,c2)
      union all
      (select min(c3) sc3 from t2 group by c1,c2)
      union all
      (select sum(c3) sc3 from t3 group by c1,c2));
+----------+
| sum(sc3) |
+----------+
|       31 |
+----------+

##data type test
EXPLAIN select min(minc2), min(minc3), min(minc4), min(minc5) from (select min(c2) minc2, min(c3) minc3, min(c4) minc4 , min(c5) minc5 from t6 group by c1);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t6  |4        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(t6.c2)], [T_FUN_MIN(t6.c3)], [T_FUN_MIN(t6.c4)], [T_FUN_MIN(t6.c5)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(t6.c2)], [T_FUN_MIN(t6.c3)], [T_FUN_MIN(t6.c4)], [T_FUN_MIN(t6.c5)])
  1 - output([t6.c2], [t6.c3], [t6.c4], [t6.c5]), filter(nil), rowset=256,
      access([t6.c2], [t6.c3], [t6.c4], [t6.c5]), partitions(p0)

select min(minc2), min(minc3), min(minc4), min(minc5) from (select min(c2) minc2, min(c3) minc3, min(c4) minc4 , min(c5) minc5 from t6 group by c1);
+------------+------------+------------+------------+
| min(minc2) | min(minc3) | min(minc4) | min(minc5) |
+------------+------------+------------+------------+
|        2.5 |          4 | ertt       | 2020-07-12 |
+------------+------------+------------+------------+
EXPLAIN select /*+no_rewrite*/ min(minc2), min(minc3), min(minc4), min(minc5) from (select min(c2) minc2, min(c3) minc3, min(c4) minc4 , min(c5) minc5 from t6 group by c1);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |47  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|4        |47  |
|2 |  HASH GROUP BY|               |4        |47  |
|3 |   TABLE SCAN  |t6             |4        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.minc2)], [T_FUN_MIN(.minc3)], [T_FUN_MIN(.minc4)], [T_FUN_MIN(.minc5)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.minc2)], [T_FUN_MIN(.minc3)], [T_FUN_MIN(.minc4)], [T_FUN_MIN(.minc5)])
  1 - output([.minc2], [.minc3], [.minc4], [.minc5]), filter(nil), rowset=256,
      access([.minc2], [.minc3], [.minc4], [.minc5])
  2 - output([T_FUN_MIN(t6.c2)], [T_FUN_MIN(t6.c3)], [T_FUN_MIN(t6.c4)], [T_FUN_MIN(t6.c5)]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_MIN(t6.c2)], [T_FUN_MIN(t6.c3)], [T_FUN_MIN(t6.c4)], [T_FUN_MIN(t6.c5)])
  3 - output([t6.c2], [t6.c3], [t6.c4], [t6.c5], [t6.c1]), filter(nil), rowset=256,
      access([t6.c2], [t6.c3], [t6.c4], [t6.c5], [t6.c1]), partitions(p0)

select /*+no_rewrite*/ min(minc2), min(minc3), min(minc4), min(minc5) from (select min(c2) minc2, min(c3) minc3, min(c4) minc4 , min(c5) minc5 from t6 group by c1);
+------------+------------+------------+------------+
| min(minc2) | min(minc3) | min(minc4) | min(minc5) |
+------------+------------+------------+------------+
|        2.5 |          4 | ertt       | 2020-07-12 |
+------------+------------+------------+------------+
EXPLAIN select max(maxc2), max(maxc3), max(maxc4), max(maxc5) from (select max(c2) maxc2, max(c3) maxc3, max(c4) maxc4 , max(c5) maxc5 from t6 group by c1);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t6  |4        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(t6.c2)], [T_FUN_MAX(t6.c3)], [T_FUN_MAX(t6.c4)], [T_FUN_MAX(t6.c5)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(t6.c2)], [T_FUN_MAX(t6.c3)], [T_FUN_MAX(t6.c4)], [T_FUN_MAX(t6.c5)])
  1 - output([t6.c2], [t6.c3], [t6.c4], [t6.c5]), filter(nil), rowset=256,
      access([t6.c2], [t6.c3], [t6.c4], [t6.c5]), partitions(p0)

select max(maxc2), max(maxc3), max(maxc4), max(maxc5) from (select max(c2) maxc2, max(c3) maxc3, max(c4) maxc4 , max(c5) maxc5 from t6 group by c1);
+------------+------------+------------+------------+
| max(maxc2) | max(maxc3) | max(maxc4) | max(maxc5) |
+------------+------------+------------+------------+
|        5.4 |          9 | trew       | 2020-07-30 |
+------------+------------+------------+------------+
EXPLAIN select /*+no_rewrite*/ max(maxc2), max(maxc3), max(maxc4), max(maxc5) from (select max(c2) maxc2, max(c3) maxc3, max(c4) maxc4 , max(c5) maxc5 from t6 group by c1);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |47  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|4        |47  |
|2 |  HASH GROUP BY|               |4        |47  |
|3 |   TABLE SCAN  |t6             |4        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc2)], [T_FUN_MAX(.maxc3)], [T_FUN_MAX(.maxc4)], [T_FUN_MAX(.maxc5)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc2)], [T_FUN_MAX(.maxc3)], [T_FUN_MAX(.maxc4)], [T_FUN_MAX(.maxc5)])
  1 - output([.maxc2], [.maxc3], [.maxc4], [.maxc5]), filter(nil), rowset=256,
      access([.maxc2], [.maxc3], [.maxc4], [.maxc5])
  2 - output([T_FUN_MAX(t6.c2)], [T_FUN_MAX(t6.c3)], [T_FUN_MAX(t6.c4)], [T_FUN_MAX(t6.c5)]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_MAX(t6.c2)], [T_FUN_MAX(t6.c3)], [T_FUN_MAX(t6.c4)], [T_FUN_MAX(t6.c5)])
  3 - output([t6.c2], [t6.c3], [t6.c4], [t6.c5], [t6.c1]), filter(nil), rowset=256,
      access([t6.c2], [t6.c3], [t6.c4], [t6.c5], [t6.c1]), partitions(p0)

select /*+no_rewrite*/ max(maxc2), max(maxc3), max(maxc4), max(maxc5) from (select max(c2) maxc2, max(c3) maxc3, max(c4) maxc4 , max(c5) maxc5 from t6 group by c1);
+------------+------------+------------+------------+
| max(maxc2) | max(maxc3) | max(maxc4) | max(maxc5) |
+------------+------------+------------+------------+
|        5.4 |          9 | trew       | 2020-07-30 |
+------------+------------+------------+------------+
EXPLAIN select sum(sumc2), sum(sumc3) from (select sum(c2) sumc2, sum(c3) sumc3 from t6 group by c1);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t6  |4        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(cast(t6.c2, DOUBLE(-1, -1)))], [T_FUN_SUM(t6.c3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(cast(t6.c2, DOUBLE(-1, -1)))], [T_FUN_SUM(t6.c3)])
  1 - output([t6.c2], [t6.c3]), filter(nil), rowset=256,
      access([t6.c2], [t6.c3]), partitions(p0)

select sum(sumc2), sum(sumc3) from (select sum(c2) sumc2, sum(c3) sumc3 from t6 group by c1);
+--------------------+------------+
| sum(sumc2)         | sum(sumc3) |
+--------------------+------------+
| 15.299999952316284 |         24 |
+--------------------+------------+
EXPLAIN select /*+no_rewrite*/ sum(sumc2), sum(sumc3) from (select sum(c2) sumc2, sum(c3) sumc3 from t6 group by c1);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |47  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|4        |47  |
|2 |  HASH GROUP BY|               |4        |47  |
|3 |   TABLE SCAN  |t6             |4        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sumc2)], [T_FUN_SUM(.sumc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sumc2)], [T_FUN_SUM(.sumc3)])
  1 - output([.sumc2], [.sumc3]), filter(nil), rowset=256,
      access([.sumc2], [.sumc3])
  2 - output([T_FUN_SUM(cast(t6.c2, DOUBLE(-1, -1)))], [T_FUN_SUM(t6.c3)]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_SUM(cast(t6.c2, DOUBLE(-1, -1)))], [T_FUN_SUM(t6.c3)])
  3 - output([t6.c2], [t6.c3], [t6.c1]), filter(nil), rowset=256,
      access([t6.c2], [t6.c3], [t6.c1]), partitions(p0)

select /*+no_rewrite*/ sum(sumc2), sum(sumc3) from (select sum(c2) sumc2, sum(c3) sumc3 from t6 group by c1);
+--------------------+------------+
| sum(sumc2)         | sum(sumc3) |
+--------------------+------------+
| 15.299999952316284 |         24 |
+--------------------+------------+

EXPLAIN select sum(sumc3)
from ((select sum(c3) sumc3 from t1 group by c1)
      union all
      (select sum(c2) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |93  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |93  |
|2 |  UNION ALL     |               |11       |93  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   TABLE SCAN   |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sumc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sumc3)])
  1 - output([.sumc3]), filter(nil), rowset=256,
      access([.sumc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(T_FUN_SUM(t1.c3), DOUBLE(-1, -1))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([cast(t6.c2, DOUBLE(-1, -1))]), filter(nil), rowset=256,
      access([t6.c2]), partitions(p0)

select sum(sumc3)
from ((select sum(c3) sumc3 from t1 group by c1)
      union all
      (select sum(c2) from t6 group by c1));
+--------------------+
| sum(sumc3)         |
+--------------------+
| 30.299999952316284 |
+--------------------+
EXPLAIN select /*+no_rewrite*/ sum(sumc3)
from ((select sum(c3) sumc3 from t1 group by c1)
      union all
      (select sum(c2) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |94  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |94  |
|2 |  UNION ALL     |               |11       |94  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |4        |47  |
|6 |    TABLE SCAN  |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sumc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sumc3)])
  1 - output([.sumc3]), filter(nil), rowset=256,
      access([.sumc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(T_FUN_SUM(t1.c3), DOUBLE(-1, -1))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([T_FUN_SUM(cast(t6.c2, DOUBLE(-1, -1)))]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_SUM(cast(t6.c2, DOUBLE(-1, -1)))])
  6 - output([t6.c2], [t6.c1]), filter(nil), rowset=256,
      access([t6.c2], [t6.c1]), partitions(p0)

select /*+no_rewrite*/ sum(sumc3)
from ((select sum(c3) sumc3 from t1 group by c1)
      union all
      (select sum(c2) from t6 group by c1));
+--------------------+
| sum(sumc3)         |
+--------------------+
| 30.299999952316284 |
+--------------------+

EXPLAIN select sum(sumc3)
from ((select sum(c3) sumc3 from t1 group by c1)
      union all
      (select sum(c3) from t6 group by c1));
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |91  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|11       |91  |
|2 |  UNION ALL    |               |11       |91  |
|3 |   TABLE SCAN  |t1             |7        |46  |
|4 |   TABLE SCAN  |t6             |4        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sumc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sumc3)])
  1 - output([.sumc3]), filter(nil), rowset=256,
      access([.sumc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(t1.c3, DECIMAL(11, 0))]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)
  4 - output([t6.c3]), filter(nil), rowset=256,
      access([t6.c3]), partitions(p0)

select sum(sumc3)
from ((select sum(c3) sumc3 from t1 group by c1)
      union all
      (select sum(c3) from t6 group by c1));
+------------+
| sum(sumc3) |
+------------+
|         39 |
+------------+
EXPLAIN select /*+no_rewrite*/ sum(sumc3)
from ((select sum(c3) sumc3 from t1 group by c1)
      union all
      (select sum(c3) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |94  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |94  |
|2 |  UNION ALL     |               |11       |94  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |4        |47  |
|6 |    TABLE SCAN  |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sumc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sumc3)])
  1 - output([.sumc3]), filter(nil), rowset=256,
      access([.sumc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([T_FUN_SUM(t6.c3)]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_SUM(t6.c3)])
  6 - output([t6.c3], [t6.c1]), filter(nil), rowset=256,
      access([t6.c3], [t6.c1]), partitions(p0)

select /*+no_rewrite*/ sum(sumc3)
from ((select sum(c3) sumc3 from t1 group by c1)
      union all
      (select sum(c3) from t6 group by c1));
+------------+
| sum(sumc3) |
+------------+
|         39 |
+------------+

EXPLAIN select min(minc3)
from ((select min(c3) minc3 from t1 group by c1)
      union all
      (select min(c3) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |93  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |93  |
|2 |  UNION ALL     |               |11       |93  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   TABLE SCAN   |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.minc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.minc3)])
  1 - output([.minc3]), filter(nil), rowset=256,
      access([.minc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(T_FUN_MIN(t1.c3), DECIMAL(11, 0))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MIN(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([t6.c3]), filter(nil), rowset=256,
      access([t6.c3]), partitions(p0)

select min(minc3)
from ((select min(c3) minc3 from t1 group by c1)
      union all
      (select min(c3) from t6 group by c1));
+------------+
| min(minc3) |
+------------+
|          1 |
+------------+
EXPLAIN select /*+no_rewrite*/ min(minc3)
from ((select min(c3) minc3 from t1 group by c1)
      union all
      (select min(c3) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |94  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |94  |
|2 |  UNION ALL     |               |11       |94  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |4        |47  |
|6 |    TABLE SCAN  |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.minc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.minc3)])
  1 - output([.minc3]), filter(nil), rowset=256,
      access([.minc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(T_FUN_MIN(t1.c3), DECIMAL(11, 0))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MIN(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([T_FUN_MIN(t6.c3)]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_MIN(t6.c3)])
  6 - output([t6.c3], [t6.c1]), filter(nil), rowset=256,
      access([t6.c3], [t6.c1]), partitions(p0)

select /*+no_rewrite*/ min(minc3)
from ((select min(c3) minc3 from t1 group by c1)
      union all
      (select min(c3) from t6 group by c1));
+------------+
| min(minc3) |
+------------+
|          1 |
+------------+

EXPLAIN select max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1)
      union all
      (select max(c4) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |93  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |93  |
|2 |  UNION ALL     |               |11       |93  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   TABLE SCAN   |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.maxc3]), filter(nil), rowset=256,
      access([.maxc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(T_FUN_MAX(t1.c3), VARCHAR(20))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MAX(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([t6.c4]), filter(nil), rowset=256,
      access([t6.c4]), partitions(p0)

select max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1)
      union all
      (select max(c4) from t6 group by c1));
+------------+
| max(maxc3) |
+------------+
| trew       |
+------------+
EXPLAIN select /*+no_rewrite*/ max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1)
      union all
      (select max(c4) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |94  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |94  |
|2 |  UNION ALL     |               |11       |94  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |4        |47  |
|6 |    TABLE SCAN  |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.maxc3]), filter(nil), rowset=256,
      access([.maxc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(T_FUN_MAX(t1.c3), VARCHAR(20))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MAX(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([T_FUN_MAX(t6.c4)]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_MAX(t6.c4)])
  6 - output([t6.c4], [t6.c1]), filter(nil), rowset=256,
      access([t6.c4], [t6.c1]), partitions(p0)

select /*+no_rewrite*/ max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1)
      union all
      (select max(c4) from t6 group by c1));
+------------+
| max(maxc3) |
+------------+
| trew       |
+------------+

EXPLAIN select max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1)
      union all
      (select max(c5) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |94  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |94  |
|2 |  UNION ALL     |               |11       |94  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |4        |47  |
|6 |    TABLE SCAN  |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.maxc3]), filter(nil), rowset=256,
      access([.maxc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(T_FUN_MAX(t1.c3), VARCHAR(11))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MAX(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([cast(T_FUN_MAX(t6.c5), VARCHAR(11))]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_MAX(t6.c5)])
  6 - output([t6.c5], [t6.c1]), filter(nil), rowset=256,
      access([t6.c5], [t6.c1]), partitions(p0)

select max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1)
      union all
      (select max(c5) from t6 group by c1));
+------------+
| max(maxc3) |
+------------+
| 5          |
+------------+
EXPLAIN select /*+no_rewrite*/ max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1)
      union all
      (select max(c5) from t6 group by c1));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |94  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|11       |94  |
|2 |  UNION ALL     |               |11       |94  |
|3 |   HASH GROUP BY|               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
|5 |   HASH GROUP BY|               |4        |47  |
|6 |    TABLE SCAN  |t6             |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(.maxc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(.maxc3)])
  1 - output([.maxc3]), filter(nil), rowset=256,
      access([.maxc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([cast(T_FUN_MAX(t1.c3), VARCHAR(11))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_MAX(t1.c3)])
  4 - output([t1.c3], [t1.c1]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1]), partitions(p0)
  5 - output([cast(T_FUN_MAX(t6.c5), VARCHAR(11))]), filter(nil), rowset=256,
      group([t6.c1]), agg_func([T_FUN_MAX(t6.c5)])
  6 - output([t6.c5], [t6.c1]), filter(nil), rowset=256,
      access([t6.c5], [t6.c1]), partitions(p0)

select /*+no_rewrite*/ max(maxc3)
from ((select max(c3) maxc3 from t1 group by c1)
      union all
      (select max(c5) from t6 group by c1));
+------------+
| max(maxc3) |
+------------+
| 5          |
+------------+

##消除条件测试
##1.select 中有非 aggr 项
EXPLAIN select c1, sc3 from (select c1, c2, max(c3) sc3 from t1 group by c1,c2) group by c1;
ERROR 42000: 'sc3' is not in GROUP BY
select c1, sc3 from (select c1, c2, max(c3) sc3 from t1 group by c1,c2) group by c1;
ERROR 42000: 'sc3' is not in GROUP BY
EXPLAIN select /*+no_rewrite*/ c1, sc3 from (select c1, c2, max(c3) sc3 from t1 group by c1,c2) group by c1;
ERROR 42000: 'sc3' is not in GROUP BY
select /*+no_rewrite*/ c1, sc3 from (select c1, c2, max(c3) sc3 from t1 group by c1,c2) group by c1;
ERROR 42000: 'sc3' is not in GROUP BY
EXPLAIN select c1, c2 from (select c1, c2, max(c3) sc3 from t1 group by c1,c2) group by c1;
ERROR 42000: 'c2' is not in GROUP BY
select c1, c2 from (select c1, c2, max(c3) sc3 from t1 group by c1,c2) group by c1;
ERROR 42000: 'c2' is not in GROUP BY
EXPLAIN select /*+no_rewrite*/c1, c2 from (select c1, c2, max(c3) sc3 from t1 group by c1,c2) group by c1;
ERROR 42000: 'c2' is not in GROUP BY
select /*+no_rewrite*/c1, c2 from (select c1, c2, max(c3) sc3 from t1 group by c1,c2) group by c1;
ERROR 42000: 'c2' is not in GROUP BY

##2.aggr 不匹配
EXPLAIN select c1, sum(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.c3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  2 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, sum(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1;
+------+---------+
| c1   | sum(c3) |
+------+---------+
|    1 |       4 |
|    2 |       2 |
| NULL |    NULL |
+------+---------+
EXPLAIN select /*+no_rewrite*/c1, sum(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.c3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  2 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/c1, sum(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1;
+------+---------+
| c1   | sum(c3) |
+------+---------+
|    1 |       4 |
|    2 |       2 |
| NULL |    NULL |
+------+---------+
EXPLAIN select c1, sum(c3) from (select c1, c2, max(c3) c3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.c3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  2 - output([t1.c1], [T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MAX(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, sum(c3) from (select c1, c2, max(c3) c3 from t1 group by c1,c2) group by c1;
+------+---------+
| c1   | sum(c3) |
+------+---------+
|    1 |       9 |
|    2 |       2 |
| NULL |    NULL |
+------+---------+
EXPLAIN select /*+no_rewrite*/c1, sum(c3) from (select c1, c2, max(c3) c3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.c3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  2 - output([t1.c1], [T_FUN_MAX(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MAX(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/c1, sum(c3) from (select c1, c2, max(c3) c3 from t1 group by c1,c2) group by c1;
+------+---------+
| c1   | sum(c3) |
+------+---------+
|    1 |       9 |
|    2 |       2 |
| NULL |    NULL |
+------+---------+
EXPLAIN select c1, max(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_MAX(.c3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_MAX(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  2 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, max(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1;
+------+---------+
| c1   | max(c3) |
+------+---------+
|    1 |       3 |
|    2 |       2 |
| NULL |    NULL |
+------+---------+
EXPLAIN select /*+no_rewrite*/c1, max(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_MAX(.c3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_MAX(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  2 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/c1, max(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1;
+------+---------+
| c1   | max(c3) |
+------+---------+
|    1 |       3 |
|    2 |       2 |
| NULL |    NULL |
+------+---------+

##3.limit/distinct
EXPLAIN select sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2 limit 5);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |47  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|5        |47  |
|2 |  LIMIT         |               |5        |47  |
|3 |   HASH GROUP BY|               |5        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256, limit(5), offset(nil)
  3 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2 limit 5);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2 limit 5);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |47  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|5        |47  |
|2 |  LIMIT         |               |5        |47  |
|3 |   HASH GROUP BY|               |5        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256, limit(5), offset(nil)
  3 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2 limit 5);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select sum(sc3) from (select distinct c1, c2, sum(c3) sc3 from t1 group by c1,c2);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |7        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))])
  1 - output([t1.c3]), filter(nil), rowset=256,
      access([t1.c3]), partitions(p0)

select sum(sc3) from (select distinct c1, c2, sum(c3) sc3 from t1 group by c1,c2);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3) from (select distinct c1, c2, sum(c3) sc3 from t1 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ sum(sc3) from (select distinct c1, c2, sum(c3) sc3 from t1 group by c1,c2);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select sum(sc3) from (select c1, c2, sum(distinct c3) sc3 from t1 group by c1,c2);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |47  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|7        |47  |
|2 |  MERGE GROUP BY|               |7        |47  |
|3 |   SORT         |               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(distinct t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(distinct t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select sum(sc3) from (select c1, c2, sum(distinct c3) sc3 from t1 group by c1,c2);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select /*+no_rewrite*/ sum(sc3) from (select c1, c2, sum(distinct c3) sc3 from t1 group by c1,c2);
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |47  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|7        |47  |
|2 |  MERGE GROUP BY|               |7        |47  |
|3 |   SORT         |               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(distinct t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(distinct t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ sum(sc3) from (select c1, c2, sum(distinct c3) sc3 from t1 group by c1,c2);
+----------+
| sum(sc3) |
+----------+
|       15 |
+----------+
EXPLAIN select sum(distinct sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(distinct .sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(distinct .sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select sum(distinct sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2);
+-------------------+
| sum(distinct sc3) |
+-------------------+
|                15 |
+-------------------+
EXPLAIN select /*+no_rewrite*/ sum(distinct sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(distinct .sc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(distinct .sc3)])
  1 - output([.sc3]), filter(nil), rowset=256,
      access([.sc3])
  2 - output([T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ sum(distinct sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1,c2);
+-------------------+
| sum(distinct sc3) |
+-------------------+
|                15 |
+-------------------+

##4.having/condition测试
EXPLAIN select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1  where c1 > 10 group by c1, c2) group by c1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |46  |
|1 | TABLE SCAN  |t1  |1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))])
  1 - output([t1.c1], [t1.c3]), filter([t1.c1 > 10]), rowset=256,
      access([t1.c1], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1  where c1 > 10 group by c1, c2) group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1  where c1 > 10 group by c1, c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |46  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |46  |
|2 |  HASH GROUP BY|               |1        |46  |
|3 |   TABLE SCAN  |t1             |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter([t1.c1 > 10]), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1  where c1 > 10 group by c1, c2) group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
+------+----------+
EXPLAIN select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2 having sc3 > 10) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |48  |
|2 |  HASH GROUP BY|               |1        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter([T_FUN_SUM(t1.c3) > cast(10, DECIMAL(2, 0))]), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2 having sc3 > 10) group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2 having sc3 > 3) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |48  |
|2 |  HASH GROUP BY|               |1        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter([T_FUN_SUM(t1.c3) > cast(3, DECIMAL(1, 0))]), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2 having sc3 > 3) group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    1 |       13 |
+------+----------+
EXPLAIN select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) where sc3 > 10 group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |48  |
|2 |  HASH GROUP BY|               |1        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter([T_FUN_SUM(t1.c3) > cast(10, DECIMAL(2, 0))]), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) where sc3 > 10 group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) where sc3 > 3 group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |48  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter([.sc3 > cast(3, DECIMAL(1, 0))]), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) where sc3 > 3 group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    1 |       13 |
+------+----------+
EXPLAIN select c1, c3 from (select c1, c2, max(c3) c3 from t1 group by c1,c2) group by c1 having c3 > 10;
ERROR 42000: 'c3' is not in GROUP BY
select c1, c3 from (select c1, c2, max(c3) c3 from t1 group by c1,c2) group by c1 having c3 > 10;
ERROR 42000: 'c3' is not in GROUP BY
EXPLAIN select /*+no_rewrite*/ c1, c3 from (select c1, c2, max(c3) c3 from t1 group by c1,c2) group by c1 having c3 > 3;
ERROR 42000: 'c3' is not in GROUP BY
select /*+no_rewrite*/ c1, c3 from (select c1, c2, max(c3) c3 from t1 group by c1,c2) group by c1 having c3 > 3;
ERROR 42000: 'c3' is not in GROUP BY
EXPLAIN select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having sum(sc3)> 3;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |47  |
|1 | TABLE SCAN  |t1  |7        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))]), filter([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0))) > cast(3, DECIMAL(1, 0))]), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))])
  1 - output([t1.c1], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having sum(sc3)> 3;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    1 |       13 |
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having sum(sc3)> 3;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter([T_FUN_SUM(.sc3) > cast(3, DECIMAL(1, 0))]), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having sum(sc3)> 3;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    1 |       13 |
+------+----------+
EXPLAIN select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having sum(c1)> 3;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter([T_FUN_SUM(.c1) > cast(3, DECIMAL(1, 0))]), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)], [T_FUN_SUM(.c1)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having sum(c1)> 3;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having sum(c1)> 3;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter([T_FUN_SUM(.c1) > cast(3, DECIMAL(1, 0))]), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)], [T_FUN_SUM(.c1)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having sum(c1)> 3;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
+------+----------+
EXPLAIN select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having min(c1)> 1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |47  |
|1 | TABLE SCAN  |t1  |7        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))]), filter([T_FUN_MIN(t1.c1) > 1]), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))], [T_FUN_MIN(t1.c1)])
  1 - output([t1.c1], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having min(c1)> 1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    2 |        2 |
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having min(c1)> 1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter([T_FUN_MIN(.c1) > 1]), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)], [T_FUN_MIN(.c1)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having min(c1)> 1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    2 |        2 |
+------+----------+
EXPLAIN select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having c1> 1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |46  |
|1 | TABLE SCAN  |t1  |1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_SUM(cast(t1.c3, DECIMAL(11, 0)))])
  1 - output([t1.c1], [t1.c3]), filter([t1.c1 > 1]), rowset=256,
      access([t1.c1], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having c1> 1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    2 |        2 |
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having c1> 1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |1        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter([.c1 > 1]), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1 having c1> 1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    2 |        2 |
+------+----------+

##5.使用child aggr进行计算
EXPLAIN select c1, sum(c1 + sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(cast(.c1, DECIMAL(11, 0)) + .sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(cast(.c1, DECIMAL(11, 0)) + .sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, sum(c1 + sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1;
+------+---------------+
| c1   | sum(c1 + sc3) |
+------+---------------+
|    1 |            15 |
|    2 |             4 |
| NULL |          NULL |
+------+---------------+
EXPLAIN select /*+no_rewrite*/ c1, sum(c1 + sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(cast(.c1, DECIMAL(11, 0)) + .sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(cast(.c1, DECIMAL(11, 0)) + .sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(c1 + sc3) from (select c1, c2, sum(c3) sc3 from t1 group by c1, c2) group by c1;
+------+---------------+
| c1   | sum(c1 + sc3) |
+------+---------------+
|    1 |            15 |
|    2 |             4 |
| NULL |          NULL |
+------+---------------+
EXPLAIN select c1, sum(sc3) from (select c1, c2, 2 + sum(c3) sc3 from t1 group by c1, c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [cast(2, DECIMAL(1, 0)) + T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, sum(sc3) from (select c1, c2, 2 + sum(c3) sc3 from t1 group by c1, c2) group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    1 |       17 |
|    2 |        4 |
| NULL |     NULL |
+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, 2 + sum(c3) sc3 from t1 group by c1, c2) group by c1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH GROUP BY  |               |7        |49  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|2 |  HASH GROUP BY|               |7        |48  |
|3 |   TABLE SCAN  |t1             |7        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_SUM(.sc3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_SUM(.sc3)])
  1 - output([.c1], [.sc3]), filter(nil), rowset=256,
      access([.c1], [.sc3])
  2 - output([t1.c1], [cast(2, DECIMAL(1, 0)) + T_FUN_SUM(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, sum(sc3) from (select c1, c2, 2 + sum(c3) sc3 from t1 group by c1, c2) group by c1;
+------+----------+
| c1   | sum(sc3) |
+------+----------+
|    1 |       17 |
|    2 |        4 |
| NULL |     NULL |
+------+----------+

##6.rollup test
EXPLAIN select c1, min(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2 with rollup) group by c1;
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |HASH GROUP BY   |               |7        |49  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|7        |47  |
|2 |  MERGE GROUP BY|               |7        |47  |
|3 |   SORT         |               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_MIN(.c3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_MIN(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  2 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select c1, min(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2 with rollup) group by c1;
+------+---------+
| c1   | min(c3) |
+------+---------+
| NULL |       1 |
|    1 |       1 |
|    2 |       2 |
+------+---------+
EXPLAIN select /*+no_rewrite*/ c1, min(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2 with rollup) group by c1;
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |HASH GROUP BY   |               |7        |49  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|7        |47  |
|2 |  MERGE GROUP BY|               |7        |47  |
|3 |   SORT         |               |7        |47  |
|4 |    TABLE SCAN  |t1             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_MIN(.c3)]), filter(nil), rowset=256,
      group([.c1]), agg_func([T_FUN_MIN(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  2 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  3 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, min(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2 with rollup) group by c1;
+------+---------+
| c1   | min(c3) |
+------+---------+
| NULL |       1 |
|    1 |       1 |
|    2 |       2 |
+------+---------+

EXPLAIN select c1, min(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1 with rollup;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |7        |47  |
|1 | SORT         |    |7        |47  |
|2 |  TABLE SCAN  |t1  |7        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1]), agg_func([T_FUN_MIN(t1.c3)])
  1 - output([t1.c1], [t1.c3]), filter(nil), rowset=256, sort_keys([t1.c1, ASC])
  2 - output([t1.c1], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c3]), partitions(p0)

select c1, min(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1 with rollup;
+------+---------+
| c1   | min(c3) |
+------+---------+
| NULL |    NULL |
|    1 |       1 |
|    2 |       2 |
| NULL |       1 |
+------+---------+
EXPLAIN select /*+no_rewrite*/ c1, min(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1 with rollup;
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |MERGE GROUP BY  |               |7        |49  |
|1 | SORT           |               |7        |48  |
|2 |  SUBPLAN SCAN  |ANONYMOUS_VIEW1|7        |48  |
|3 |   HASH GROUP BY|               |7        |48  |
|4 |    TABLE SCAN  |t1             |7        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [T_FUN_MIN(.c3)]), filter(nil), rowset=256,
      group(nil), rollup([.c1]), agg_func([T_FUN_MIN(.c3)])
  1 - output([.c1], [.c3]), filter(nil), rowset=256, sort_keys([.c1, ASC])
  2 - output([.c1], [.c3]), filter(nil), rowset=256,
      access([.c1], [.c3])
  3 - output([t1.c1], [T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2], [t1.c3]), partitions(p0)

select /*+no_rewrite*/ c1, min(c3) from (select c1, c2, min(c3) c3 from t1 group by c1,c2) group by c1 with rollup;
+------+---------+
| c1   | min(c3) |
+------+---------+
| NULL |    NULL |
|    1 |       1 |
|    2 |       2 |
| NULL |       1 |
+------+---------+

EXPLAIN select min(minc3)
from ((select min(c3) minc3 from t1 group by c1,c2 with rollup)
      union all
      (select min(c3) minc3 from t2 group by c1,c2)
      union all
      (select min(c3) minc3 from t3 group by c1,c2));
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |SCALAR GROUP BY  |               |1        |138 |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|19       |138 |
|2 |  UNION ALL      |               |19       |138 |
|3 |   MERGE GROUP BY|               |7        |47  |
|4 |    SORT         |               |7        |47  |
|5 |     TABLE SCAN  |t1             |7        |46  |
|6 |   TABLE SCAN    |t2             |7        |46  |
|7 |   TABLE SCAN    |t3             |5        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.minc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.minc3)])
  1 - output([.minc3]), filter(nil), rowset=256,
      access([.minc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  5 - output([t1.c3], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1], [t1.c2]), partitions(p0)
  6 - output([t2.c3]), filter(nil), rowset=256,
      access([t2.c3]), partitions(p0)
  7 - output([t3.c3]), filter(nil), rowset=256,
      access([t3.c3]), partitions(p0)

select min(minc3)
from ((select min(c3) minc3 from t1 group by c1,c2 with rollup)
      union all
      (select min(c3) minc3 from t2 group by c1,c2)
      union all
      (select min(c3) minc3 from t3 group by c1,c2));
+------------+
| min(minc3) |
+------------+
|          1 |
+------------+
EXPLAIN select /*+no_rewrite*/ min(minc3)
from ((select min(c3) minc3 from t1 group by c1,c2 with rollup)
      union all
      (select min(c3) minc3 from t2 group by c1,c2)
      union all
      (select min(c3) minc3 from t3 group by c1,c2));
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |SCALAR GROUP BY  |               |1        |141 |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|19       |141 |
|2 |  UNION ALL      |               |19       |141 |
|3 |   MERGE GROUP BY|               |7        |47  |
|4 |    SORT         |               |7        |47  |
|5 |     TABLE SCAN  |t1             |7        |46  |
|6 |   HASH GROUP BY |               |7        |48  |
|7 |    TABLE SCAN   |t2             |7        |46  |
|8 |   HASH GROUP BY |               |5        |47  |
|9 |    TABLE SCAN   |t3             |5        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(.minc3)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(.minc3)])
  1 - output([.minc3]), filter(nil), rowset=256,
      access([.minc3])
  2 - output([UNION([1])]), filter(nil), rowset=256
  3 - output([T_FUN_MIN(t1.c3)]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1], [t1.c2]), agg_func([T_FUN_MIN(t1.c3)])
  4 - output([t1.c1], [t1.c2], [t1.c3]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  5 - output([t1.c3], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c3], [t1.c1], [t1.c2]), partitions(p0)
  6 - output([T_FUN_MIN(t2.c3)]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_MIN(t2.c3)])
  7 - output([t2.c3], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c3], [t2.c1], [t2.c2]), partitions(p0)
  8 - output([T_FUN_MIN(t3.c3)]), filter(nil), rowset=256,
      group([t3.c1], [t3.c2]), agg_func([T_FUN_MIN(t3.c3)])
  9 - output([t3.c3], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c3], [t3.c1], [t3.c2]), partitions(p0)

select /*+no_rewrite*/ min(minc3)
from ((select min(c3) minc3 from t1 group by c1,c2 with rollup)
      union all
      (select min(c3) minc3 from t2 group by c1,c2)
      union all
      (select min(c3) minc3 from t3 group by c1,c2));
+------------+
| min(minc3) |
+------------+
|          1 |
+------------+

##消除冗余distinct
EXPLAIN select distinct c1, c2 from t1
union all
select distinct c1, c2 from t2;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |UNION ALL     |    |14       |94  |
|1 | HASH DISTINCT|    |7        |47  |
|2 |  TABLE SCAN  |t1  |7        |46  |
|3 | HASH DISTINCT|    |7        |47  |
|4 |  TABLE SCAN  |t2  |7        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      distinct([t1.c1], [t1.c2])
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      distinct([t2.c1], [t2.c2])
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select distinct c1, c2 from t1
union all
select distinct c1, c2 from t2;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    1 |    2 |
|    2 |    1 |
| NULL | NULL |
|    1 |    1 |
|    2 |    2 |
|    2 |    1 |
| NULL | NULL |
+------+------+

EXPLAIN select distinct c1, c2 from t1
union
select distinct c1, c2 from t2;
Query Plan
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |14       |94  |
|1 | TABLE SCAN        |t1  |7        |46  |
|2 | TABLE SCAN        |t2  |7        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select distinct c1, c2 from t1
union
select distinct c1, c2 from t2;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    1 |    2 |
|    2 |    1 |
| NULL | NULL |
|    2 |    2 |
+------+------+

EXPLAIN select distinct c1, c2 from t1
intersect
select distinct c1, c2 from t2;
Query Plan
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |HASH INTERSECT DISTINCT|    |7        |94  |
|1 | TABLE SCAN            |t1  |7        |46  |
|2 | TABLE SCAN            |t2  |7        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([INTERSECT([1])], [INTERSECT([2])]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select distinct c1, c2 from t1
intersect
select distinct c1, c2 from t2;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    1 |
| NULL | NULL |
+------+------+

EXPLAIN select distinct c1, c2 from t1
except
select distinct c1, c2 from t2;
Query Plan
=============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |HASH EXCEPT DISTINCT|    |7        |94  |
|1 | TABLE SCAN         |t1  |7        |46  |
|2 | TABLE SCAN         |t2  |7        |46  |
=============================================

Outputs & filters:
-------------------------------------
  0 - output([EXCEPT([1])], [EXCEPT([2])]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select distinct c1, c2 from t1
except
select distinct c1, c2 from t2;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    2 |
+------+------+

EXPLAIN select distinct c1, c2 from t1
union
(select distinct c1, c2 from t2
union all
select distinct c1, c2 from t3);
Query Plan
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |19       |141 |
|1 | TABLE SCAN        |t1  |7        |46  |
|2 | UNION ALL         |    |12       |91  |
|3 |  TABLE SCAN       |t2  |7        |46  |
|4 |  TABLE SCAN       |t3  |5        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  4 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)

select distinct c1, c2 from t1
union
(select distinct c1, c2 from t2
union all
select distinct c1, c2 from t3);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    1 |    2 |
|    2 |    1 |
| NULL | NULL |
|    2 |    2 |
+------+------+

EXPLAIN select distinct c1, c2 from t1
union
(select distinct c1, c2 from t2
union
select distinct c1, c2 from t3);
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH DISTINCT|    |1        |138 |
|1 | UNION ALL   |    |19       |137 |
|2 |  TABLE SCAN |t1  |7        |46  |
|3 |  TABLE SCAN |t2  |7        |46  |
|4 |  TABLE SCAN |t3  |5        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256,
      distinct([UNION([1])], [UNION([2])])
  1 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  4 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)

select distinct c1, c2 from t1
union
(select distinct c1, c2 from t2
union
select distinct c1, c2 from t3);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    1 |    2 |
|    2 |    1 |
| NULL | NULL |
|    2 |    2 |
+------+------+

##消除冗余distinct expect no rewrite
EXPLAIN select distinct c1, c2 from t1
union
select distinct c1, c2 from t2 limit 2;
Query Plan
=============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |LIMIT               |    |2        |93  |
|1 | HASH UNION DISTINCT|    |2        |93  |
|2 |  LIMIT             |    |2        |46  |
|3 |   HASH DISTINCT    |    |2        |46  |
|4 |    TABLE SCAN      |t1  |2        |46  |
|5 |  LIMIT             |    |2        |46  |
|6 |   HASH DISTINCT    |    |2        |46  |
|7 |    TABLE SCAN      |t2  |2        |46  |
=============================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256, limit(2), offset(nil)
  1 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, limit(2), offset(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      distinct([t1.c1], [t1.c2])
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, limit(2), offset(nil)
  6 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      distinct([t2.c1], [t2.c2])
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select distinct c1, c2 from t1
union
select distinct c1, c2 from t2 limit 2;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    1 |    2 |
+------+------+

EXPLAIN select distinct c1, c2 from t1 limit 2
union
select distinct c1, c2 from t2;
Query Plan
============================================
|ID|OPERATOR           |NAME|EST. ROWS|COST|
--------------------------------------------
|0 |HASH UNION DISTINCT|    |9        |94  |
|1 | LIMIT             |    |2        |46  |
|2 |  HASH DISTINCT    |    |2        |46  |
|3 |   TABLE SCAN      |t1  |2        |46  |
|4 | TABLE SCAN        |t2  |7        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output([UNION([1])], [UNION([2])]), filter(nil), rowset=256
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, limit(2), offset(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      distinct([t1.c1], [t1.c2])
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select distinct c1, c2 from t1 limit 2
union
select distinct c1, c2 from t2;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    1 |    2 |
|    2 |    2 |
|    2 |    1 |
| NULL | NULL |
+------+------+

drop table t1,t2,t3,tpart1,tpart2,t4,t5,t6;
set autocommit = 0;
set session sql_mode = @old_sql_mode;

************************消除冗余group by/distinct end**********

*********************push down outer join on condition begin**************

set autocommit = 1;

drop table if exists t1,t2,t3,t4,t5,tp1,tp2;
create table t1 (c1 int, c2 int);
create table t2 (c1 int, c2 int);
create table t3 (c1 int, c2 int);
create table t4 (c1 int, c2 int);
create table t5 (c1 int, c2 int);
create table tp1 (c1 int, c2 int) partition by hash(c1) partitions 2;
create table tp2 (c1 int, c2 int) partition by hash(c1) partitions 2;
## basic table
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3);
Query Plan
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |HASH OUTER JOIN       |     |4        |139 |
|1 | TABLE SCAN           |t1   |4        |46  |
|2 | SUBPLAN SCAN         |VIEW1|4        |92  |
|3 |  HASH RIGHT SEMI JOIN|     |4        |92  |
|4 |   TABLE SCAN         |t3   |4        |46  |
|5 |   TABLE SCAN         |t2   |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.t2.c1]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t2.c1], [VIEW1.t2.c2])
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  4 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
| NULL | NULL | NULL | NULL |
|    2 |    2 | NULL | NULL |
|    3 |    3 | NULL | NULL |
+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3);
Query Plan
=================================================
|ID|OPERATOR                |NAME|EST. ROWS|COST|
-------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN  |    |4        |75  |
|1 | TABLE SCAN             |t1  |4        |46  |
|2 | SUBPLAN FILTER         |    |1        |52  |
|3 |  DISTRIBUTED TABLE SCAN|t2  |1        |7   |
|4 |  TABLE SCAN            |t3  |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([t2.c1], [t2.c2]), filter([? = t2.c1]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  4 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
|    2 |    2 | NULL | NULL |
|    3 |    3 | NULL | NULL |
| NULL | NULL | NULL | NULL |
+------+------+------+------+
EXPLAIN select * from t1 ta left join t1 tb on ta.c1 = tb.c1 and tb.c1 in (select c2 from t3);
Query Plan
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |HASH OUTER JOIN       |     |4        |139 |
|1 | TABLE SCAN           |ta   |4        |46  |
|2 | SUBPLAN SCAN         |VIEW1|4        |92  |
|3 |  HASH RIGHT SEMI JOIN|     |4        |92  |
|4 |   TABLE SCAN         |t3   |4        |46  |
|5 |   TABLE SCAN         |tb   |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([ta.c1], [ta.c2], [VIEW1.tb.c1], [VIEW1.tb.c2]), filter(nil), rowset=256,
      equal_conds([ta.c1 = VIEW1.tb.c1]), other_conds(nil)
  1 - output([ta.c1], [ta.c2]), filter(nil), rowset=256,
      access([ta.c1], [ta.c2]), partitions(p0)
  2 - output([VIEW1.tb.c1], [VIEW1.tb.c2]), filter(nil), rowset=256,
      access([VIEW1.tb.c1], [VIEW1.tb.c2])
  3 - output([tb.c1], [tb.c2]), filter(nil), rowset=256,
      equal_conds([tb.c1 = t3.c2]), other_conds(nil)
  4 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  5 - output([tb.c1], [tb.c2]), filter(nil), rowset=256,
      access([tb.c1], [tb.c2]), partitions(p0)

select * from t1 ta left join t1 tb on ta.c1 = tb.c1 and tb.c1 in (select c2 from t3);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |
| NULL | NULL | NULL | NULL |
|    3 |    3 | NULL | NULL |
+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 ta left join t1 tb on ta.c1 = tb.c1 and tb.c1 in (select c2 from t3);
Query Plan
=================================================
|ID|OPERATOR                |NAME|EST. ROWS|COST|
-------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN  |    |4        |75  |
|1 | TABLE SCAN             |ta  |4        |46  |
|2 | SUBPLAN FILTER         |    |1        |52  |
|3 |  DISTRIBUTED TABLE SCAN|tb  |1        |7   |
|4 |  TABLE SCAN            |t3  |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([ta.c1], [ta.c2], [tb.c1], [tb.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([ta.c1])
  1 - output([ta.c1], [ta.c2]), filter(nil), rowset=256,
      access([ta.c1], [ta.c2]), partitions(p0)
  2 - output([tb.c1], [tb.c2]), filter([tb.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([tb.c1], [tb.c2]), filter([? = tb.c1]), rowset=256,
      access([tb.c1], [tb.c2]), partitions(p0)
  4 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 ta left join t1 tb on ta.c1 = tb.c1 and tb.c1 in (select c2 from t3);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |
|    3 |    3 | NULL | NULL |
| NULL | NULL | NULL | NULL |
+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3), t4;
Query Plan
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|     |16       |185 |
|1 | HASH OUTER JOIN          |     |4        |139 |
|2 |  TABLE SCAN              |t1   |4        |46  |
|3 |  SUBPLAN SCAN            |VIEW1|4        |92  |
|4 |   HASH RIGHT SEMI JOIN   |     |4        |92  |
|5 |    TABLE SCAN            |t3   |4        |46  |
|6 |    TABLE SCAN            |t2   |4        |46  |
|7 | MATERIAL                 |     |4        |46  |
|8 |  TABLE SCAN              |t4   |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t4.c1], [t4.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.t2.c1]), other_conds(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t2.c1], [VIEW1.t2.c2])
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  5 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  6 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  7 - output([t4.c1], [t4.c2]), filter(nil), rowset=256
  8 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3), t4;
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    2 |    2 |
|    1 |    1 |    1 |    1 |    3 |    3 |
|    1 |    1 |    1 |    1 |    4 |    4 |
|    1 |    1 |    1 |    1 | NULL | NULL |
| NULL | NULL | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL |    3 |    3 |
| NULL | NULL | NULL | NULL |    4 |    4 |
| NULL | NULL | NULL | NULL | NULL | NULL |
|    2 |    2 | NULL | NULL |    2 |    2 |
|    2 |    2 | NULL | NULL |    3 |    3 |
|    2 |    2 | NULL | NULL |    4 |    4 |
|    2 |    2 | NULL | NULL | NULL | NULL |
|    3 |    3 | NULL | NULL |    2 |    2 |
|    3 |    3 | NULL | NULL |    3 |    3 |
|    3 |    3 | NULL | NULL |    4 |    4 |
|    3 |    3 | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3), t4;
Query Plan
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |16       |121 |
|1 | NESTED-LOOP OUTER JOIN   |    |4        |75  |
|2 |  TABLE SCAN              |t1  |4        |46  |
|3 |  SUBPLAN FILTER          |    |1        |52  |
|4 |   DISTRIBUTED TABLE SCAN |t2  |1        |7   |
|5 |   TABLE SCAN             |t3  |4        |46  |
|6 | MATERIAL                 |    |4        |46  |
|7 |  TABLE SCAN              |t4  |4        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t4.c1], [t4.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  4 - output([t2.c1], [t2.c2]), filter([? = t2.c1]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  5 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  6 - output([t4.c1], [t4.c2]), filter(nil), rowset=256
  7 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3), t4;
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    2 |    2 |
|    1 |    1 |    1 |    1 |    3 |    3 |
|    1 |    1 |    1 |    1 |    4 |    4 |
|    1 |    1 |    1 |    1 | NULL | NULL |
|    2 |    2 | NULL | NULL |    2 |    2 |
|    2 |    2 | NULL | NULL |    3 |    3 |
|    2 |    2 | NULL | NULL |    4 |    4 |
|    2 |    2 | NULL | NULL | NULL | NULL |
|    3 |    3 | NULL | NULL |    2 |    2 |
|    3 |    3 | NULL | NULL |    3 |    3 |
|    3 |    3 | NULL | NULL |    4 |    4 |
|    3 |    3 | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL |    3 |    3 |
| NULL | NULL | NULL | NULL |    4 |    4 |
| NULL | NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t4) left join t3 on t1.c1 = t3.c1;
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT OUTER JOIN  |     |4        |185 |
|1 | TABLE SCAN            |t3   |4        |46  |
|2 | HASH OUTER JOIN       |     |4        |139 |
|3 |  TABLE SCAN           |t1   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW1|4        |92  |
|5 |   HASH RIGHT SEMI JOIN|     |4        |92  |
|6 |    TABLE SCAN         |t4   |4        |46  |
|7 |    TABLE SCAN         |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.t2.c1]), other_conds(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t2.c1], [VIEW1.t2.c2])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t4) left join t3 on t1.c1 = t3.c1;
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
|    3 |    3 |    3 |    3 | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL |
|    1 |    1 | NULL | NULL |    1 |    1 |
|    2 |    2 | NULL | NULL |    2 |    2 |
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t4) left join t3 on t1.c1 = t3.c1;
Query Plan
=================================================
|ID|OPERATOR                |NAME|EST. ROWS|COST|
-------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN  |    |4        |121 |
|1 | HASH OUTER JOIN        |    |4        |92  |
|2 |  TABLE SCAN            |t1  |4        |46  |
|3 |  TABLE SCAN            |t3  |4        |46  |
|4 | SUBPLAN FILTER         |    |1        |52  |
|5 |  DISTRIBUTED TABLE SCAN|t2  |1        |7   |
|6 |  TABLE SCAN            |t4  |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  3 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  4 - output([t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  5 - output([t2.c1], [t2.c2]), filter([? = t2.c1]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t4) left join t3 on t1.c1 = t3.c1;
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
|    1 |    1 | NULL | NULL |    1 |    1 |
|    2 |    2 | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL | NULL | NULL |
|    3 |    3 |    3 |    3 | NULL | NULL |
+------+------+------+------+------+------+

EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 and (t1.c1,t2.c1) in (select c1,c2 from t3);
Query Plan
=================================================
|ID|OPERATOR                |NAME|EST. ROWS|COST|
-------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN  |    |4        |75  |
|1 | TABLE SCAN             |t1  |4        |46  |
|2 | SUBPLAN FILTER         |    |1        |52  |
|3 |  DISTRIBUTED TABLE SCAN|t2  |1        |7   |
|4 |  TABLE SCAN            |t3  |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter([(?, t2.c1) = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([t2.c1], [t2.c2], [?]), filter([? = t2.c1]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  4 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 and (t1.c1,t2.c1) in (select c1,c2 from t3);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
|    2 |    2 | NULL | NULL |
|    3 |    3 | NULL | NULL |
| NULL | NULL | NULL | NULL |
+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and (t1.c1,t2.c1) in (select c1,c2 from t3);
Query Plan
=================================================
|ID|OPERATOR                |NAME|EST. ROWS|COST|
-------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN  |    |4        |75  |
|1 | TABLE SCAN             |t1  |4        |46  |
|2 | SUBPLAN FILTER         |    |1        |52  |
|3 |  DISTRIBUTED TABLE SCAN|t2  |1        |7   |
|4 |  TABLE SCAN            |t3  |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1], [t2.c2]), filter([(?, t2.c1) = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([t2.c1], [t2.c2], [?]), filter([? = t2.c1]), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  4 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 and (t1.c1,t2.c1) in (select c1,c2 from t3);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
|    2 |    2 | NULL | NULL |
|    3 |    3 | NULL | NULL |
| NULL | NULL | NULL | NULL |
+------+------+------+------+

EXPLAIN select /*+use_merge(tp1 view1)*/ * from tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select c2 from t3);
Query Plan
=============================================================
|ID|OPERATOR                        |NAME    |EST. ROWS|COST|
-------------------------------------------------------------
|0 |PX COORDINATOR                  |        |1        |233 |
|1 | EXCHANGE OUT DISTR             |:EX10001|1        |233 |
|2 |  MERGE OUTER JOIN              |        |1        |231 |
|3 |   SORT                         |        |1        |92  |
|4 |    PX PARTITION ITERATOR       |        |1        |92  |
|5 |     TABLE SCAN                 |tp1     |1        |92  |
|6 |   SORT                         |        |1        |140 |
|7 |    SUBPLAN SCAN                |VIEW1   |1        |140 |
|8 |     HASH SEMI JOIN             |        |1        |140 |
|9 |      PX PARTITION ITERATOR     |        |1        |92  |
|10|       TABLE SCAN               |tp2     |1        |92  |
|11|      EXCHANGE IN DISTR         |        |4        |48  |
|12|       EXCHANGE OUT DISTR (PKEY)|:EX10000|4        |47  |
|13|        TABLE SCAN              |t3      |4        |46  |
=============================================================

Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(tp1.c1, tp1.c2, VIEW1.tp2.c1, VIEW1.tp2.c2)]), filter(nil), rowset=256
  1 - output([INTERNAL_FUNCTION(tp1.c1, tp1.c2, VIEW1.tp2.c1, VIEW1.tp2.c2)]), filter(nil), rowset=256, dop=1
  2 - output([tp1.c1], [VIEW1.tp2.c1], [tp1.c2], [VIEW1.tp2.c2]), filter(nil), rowset=256,
      equal_conds([tp1.c1 = VIEW1.tp2.c1]), other_conds(nil)
  3 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256, sort_keys([tp1.c1, ASC])
  4 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256
  5 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256,
      access([tp1.c1], [tp1.c2]), partitions(p[0-1])
  6 - output([VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256, sort_keys([VIEW1.tp2.c1, ASC])
  7 - output([VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256,
      access([VIEW1.tp2.c1], [VIEW1.tp2.c2])
  8 - output([tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      equal_conds([tp2.c1 = t3.c2]), other_conds(nil)
  9 - output([tp2.c1], [tp2.c2]), filter(nil), rowset=256
  10 - output([tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      access([tp2.c1], [tp2.c2]), partitions(p[0-1])
  11 - output([t3.c2]), filter(nil), rowset=256
  12 - (#keys=1, [t3.c2]), output([t3.c2]), filter(nil), rowset=256, is_single, dop=1
  13 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)

select /*+use_merge(tp1 view1)*/ * from tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select c2 from t3);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |
|    3 |    3 | NULL | NULL |
+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select c2 from t3);
Query Plan
=====================================================
|ID|OPERATOR                |NAME    |EST. ROWS|COST|
-----------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN  |        |1        |107 |
|1 | PX COORDINATOR         |        |1        |93  |
|2 |  EXCHANGE OUT DISTR    |:EX10000|1        |93  |
|3 |   PX PARTITION ITERATOR|        |1        |92  |
|4 |    TABLE SCAN          |tp1     |1        |92  |
|5 | SUBPLAN FILTER         |        |1        |59  |
|6 |  DISTRIBUTED TABLE SCAN|tp2     |1        |14  |
|7 |  TABLE SCAN            |t3      |4        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([tp1.c1], [tp1.c2], [tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([tp1.c1])
  1 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256
  2 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256, dop=1
  3 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256
  4 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256,
      access([tp1.c1], [tp1.c2]), partitions(p[0-1])
  5 - output([tp2.c1], [tp2.c2]), filter([tp2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  6 - output([tp2.c1], [tp2.c2]), filter([? = tp2.c1]), rowset=256,
      access([tp2.c1], [tp2.c2]), partitions(p[0-1])
  7 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)

select /*+no_rewrite*/ * from tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select c2 from t3);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    2 |    2 |    2 |    2 |
|    1 |    1 |    1 |    1 |
|    3 |    3 | NULL | NULL |
+------+------+------+------+
EXPLAIN select * from t1 left join tp1 on t1.c1 = tp1.c1 and tp1.c1 in (select c2 from tp2);
Query Plan
============================================================
|ID|OPERATOR                       |NAME    |EST. ROWS|COST|
------------------------------------------------------------
|0 |HASH RIGHT OUTER JOIN          |        |4        |231 |
|1 | PX COORDINATOR                |        |1        |185 |
|2 |  EXCHANGE OUT DISTR           |:EX10001|1        |185 |
|3 |   SUBPLAN SCAN                |VIEW1   |1        |184 |
|4 |    HASH RIGHT SEMI JOIN       |        |1        |184 |
|5 |     EXCHANGE IN DISTR         |        |1        |92  |
|6 |      EXCHANGE OUT DISTR (PKEY)|:EX10000|1        |92  |
|7 |       PX PARTITION ITERATOR   |        |1        |92  |
|8 |        TABLE SCAN             |tp2     |1        |92  |
|9 |     PX PARTITION ITERATOR     |        |1        |92  |
|10|      TABLE SCAN               |tp1     |1        |92  |
|11| TABLE SCAN                    |t1      |4        |46  |
============================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [VIEW1.tp1.c1], [VIEW1.tp1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.tp1.c1]), other_conds(nil)
  1 - output([VIEW1.tp1.c1], [VIEW1.tp1.c2]), filter(nil), rowset=256
  2 - output([VIEW1.tp1.c1], [VIEW1.tp1.c2]), filter(nil), rowset=256, dop=1
  3 - output([VIEW1.tp1.c1], [VIEW1.tp1.c2]), filter(nil), rowset=256,
      access([VIEW1.tp1.c1], [VIEW1.tp1.c2])
  4 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256,
      equal_conds([tp1.c1 = tp2.c2]), other_conds(nil)
  5 - output([tp2.c2]), filter(nil), rowset=256
  6 - (#keys=1, [tp2.c2]), output([tp2.c2]), filter(nil), rowset=256, dop=1
  7 - output([tp2.c2]), filter(nil), rowset=256
  8 - output([tp2.c2]), filter(nil), rowset=256,
      access([tp2.c2]), partitions(p[0-1])
  9 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256
  10 - output([tp1.c1], [tp1.c2]), filter(nil), rowset=256,
      access([tp1.c1], [tp1.c2]), partitions(p[0-1])
  11 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select * from t1 left join tp1 on t1.c1 = tp1.c1 and tp1.c1 in (select c2 from tp2);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |
| NULL | NULL | NULL | NULL |
+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join tp1 on t1.c1 = tp1.c1 and tp1.c1 in (select c2 from tp2);
Query Plan
======================================================
|ID|OPERATOR                 |NAME    |EST. ROWS|COST|
------------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN   |        |4        |297 |
|1 | TABLE SCAN              |t1      |4        |46  |
|2 | SUBPLAN FILTER          |        |1        |106 |
|3 |  DISTRIBUTED TABLE SCAN |tp1     |1        |14  |
|4 |  PX COORDINATOR         |        |1        |92  |
|5 |   EXCHANGE OUT DISTR    |:EX10000|1        |92  |
|6 |    PX PARTITION ITERATOR|        |1        |92  |
|7 |     TABLE SCAN          |tp2     |1        |92  |
======================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [tp1.c1], [tp1.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([tp1.c1], [tp1.c2]), filter([tp1.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([tp1.c1], [tp1.c2]), filter([? = tp1.c1]), rowset=256,
      access([tp1.c1], [tp1.c2]), partitions(p[0-1])
  4 - output([tp2.c2]), filter(nil), rowset=256
  5 - output([tp2.c2]), filter(nil), rowset=256, dop=1
  6 - output([tp2.c2]), filter(nil), rowset=256
  7 - output([tp2.c2]), filter(nil), rowset=256,
      access([tp2.c2]), partitions(p[0-1])

select /*+no_rewrite*/ * from t1 left join tp1 on t1.c1 = tp1.c1 and tp1.c1 in (select c2 from tp2);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
|    1 |    1 |    1 |    1 |
|    2 |    2 |    2 |    2 |
|    3 |    3 |    3 |    3 |
| NULL | NULL | NULL | NULL |
+------+------+------+------+

## generate table
EXPLAIN select * from t1 left join (select c1+c2 a,c2 b from t2) v on t1.c1 = v.a and v.a in (select c2 from t3);
Query Plan
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |HASH RIGHT OUTER JOIN |     |4        |138 |
|1 | SUBPLAN SCAN         |VIEW1|1        |92  |
|2 |  HASH RIGHT SEMI JOIN|     |1        |92  |
|3 |   TABLE SCAN         |t3   |4        |46  |
|4 |   TABLE SCAN         |t2   |4        |46  |
|5 | TABLE SCAN           |t1   |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [VIEW1.t2.c1 + VIEW1.t2.c2], [VIEW1.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.t2.c1 + VIEW1.t2.c2]), other_conds(nil)
  1 - output([VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t2.c1], [VIEW1.t2.c2])
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 + t2.c2 = t3.c2]), other_conds(nil)
  3 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  5 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select * from t1 left join (select c1+c2 a,c2 b from t2) v on t1.c1 = v.a and v.a in (select c2 from t3);
+------+------+------+------+
| c1   | c2   | a    | b    |
+------+------+------+------+
|    1 |    1 | NULL | NULL |
|    2 |    2 |    2 |    1 |
|    3 |    3 | NULL | NULL |
| NULL | NULL | NULL | NULL |
+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join (select c1+c2 a,c2 b from t2) v on t1.c1 = v.a and v.a in (select c2 from t3);
Query Plan
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |NESTED-LOOP OUTER JOIN|    |4        |414 |
|1 | TABLE SCAN           |t1  |4        |46  |
|2 | SUBPLAN FILTER       |    |1        |91  |
|3 |  SUBPLAN SCAN        |v   |1        |46  |
|4 |   TABLE SCAN         |t2  |4        |46  |
|5 |  TABLE SCAN          |t3  |4        |46  |
===============================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v.a], [v.b]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([v.a], [v.b]), filter([v.a = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([v.a], [v.b]), filter([? = v.a]), rowset=256,
      access([v.a], [v.b])
  4 - output([t2.c1 + t2.c2], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  5 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join (select c1+c2 a,c2 b from t2) v on t1.c1 = v.a and v.a in (select c2 from t3);
+------+------+------+------+
| c1   | c2   | a    | b    |
+------+------+------+------+
|    1 |    1 | NULL | NULL |
|    2 |    2 |    2 |    1 |
|    3 |    3 | NULL | NULL |
| NULL | NULL | NULL | NULL |
+------+------+------+------+
EXPLAIN select t1.*, v.b, v.a, v.c from t1 left join (select c1 a,c2 b, c1 + c2 c from t2) v on t1.c1 = v.a and v.a in (select c2 from t3);
Query Plan
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |HASH OUTER JOIN       |     |4        |139 |
|1 | TABLE SCAN           |t1   |4        |46  |
|2 | SUBPLAN SCAN         |VIEW1|4        |92  |
|3 |  HASH RIGHT SEMI JOIN|     |4        |92  |
|4 |   TABLE SCAN         |t3   |4        |46  |
|5 |   TABLE SCAN         |t2   |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [VIEW1.t2.c2], [VIEW1.t2.c1], [VIEW1.t2.c1 + VIEW1.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.t2.c1]), other_conds(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t2.c1], [VIEW1.t2.c2])
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  4 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select t1.*, v.b, v.a, v.c from t1 left join (select c1 a,c2 b, c1 + c2 c from t2) v on t1.c1 = v.a and v.a in (select c2 from t3);
+------+------+------+------+------+
| c1   | c2   | b    | a    | c    |
+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    2 |
| NULL | NULL | NULL | NULL | NULL |
|    2 |    2 | NULL | NULL | NULL |
|    3 |    3 | NULL | NULL | NULL |
+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ t1.*, v.b, v.a, v.c from t1 left join (select c1 a,c2 b, c1 + c2 c from t2) v on t1.c1 = v.a and v.a in (select c2 from t3);
Query Plan
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |NESTED-LOOP OUTER JOIN|    |4        |414 |
|1 | TABLE SCAN           |t1  |4        |46  |
|2 | SUBPLAN FILTER       |    |1        |91  |
|3 |  SUBPLAN SCAN        |v   |1        |46  |
|4 |   TABLE SCAN         |t2  |4        |46  |
|5 |  TABLE SCAN          |t3  |4        |46  |
===============================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v.b], [v.a], [v.c]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([v.b], [v.a], [v.c]), filter([v.a = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([v.a], [v.b], [v.c]), filter([? = v.a]), rowset=256,
      access([v.a], [v.b], [v.c])
  4 - output([t2.c1], [t2.c2], [t2.c1 + t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  5 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)

select /*+no_rewrite*/ t1.*, v.b, v.a, v.c from t1 left join (select c1 a,c2 b, c1 + c2 c from t2) v on t1.c1 = v.a and v.a in (select c2 from t3);
+------+------+------+------+------+
| c1   | c2   | b    | a    | c    |
+------+------+------+------+------+
|    1 |    1 |    1 |    1 |    2 |
|    2 |    2 | NULL | NULL | NULL |
|    3 |    3 | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+
EXPLAIN select * from t1 left join (select c1+c2 a,c2 b from t2) v on t1.c1 = v.a and v.a in (select c2 from t4) left join t3 on t1.c1 = t3.c1;
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT OUTER JOIN  |     |4        |184 |
|1 | TABLE SCAN            |t3   |4        |46  |
|2 | HASH RIGHT OUTER JOIN |     |4        |138 |
|3 |  SUBPLAN SCAN         |VIEW1|1        |92  |
|4 |   HASH RIGHT SEMI JOIN|     |1        |92  |
|5 |    TABLE SCAN         |t4   |4        |46  |
|6 |    TABLE SCAN         |t2   |4        |46  |
|7 |  TABLE SCAN           |t1   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [VIEW1.t2.c1 + VIEW1.t2.c2], [VIEW1.t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [VIEW1.t2.c1 + VIEW1.t2.c2], [VIEW1.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.t2.c1 + VIEW1.t2.c2]), other_conds(nil)
  3 - output([VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t2.c1], [VIEW1.t2.c2])
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 + t2.c2 = t4.c2]), other_conds(nil)
  5 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  6 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  7 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select * from t1 left join (select c1+c2 a,c2 b from t2) v on t1.c1 = v.a and v.a in (select c2 from t4) left join t3 on t1.c1 = t3.c1;
+------+------+------+------+------+------+
| c1   | c2   | a    | b    | c1   | c2   |
+------+------+------+------+------+------+
|    1 |    1 | NULL | NULL |    1 |    1 |
|    2 |    2 |    2 |    1 |    2 |    2 |
|    3 |    3 | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join (select c1+c2 a,c2 b from t2) v on t1.c1 = v.a and v.a in (select c2 from t4) left join t3 on t1.c1 = t3.c1;
Query Plan
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |HASH RIGHT OUTER JOIN  |    |4        |460 |
|1 | TABLE SCAN            |t3  |4        |46  |
|2 | NESTED-LOOP OUTER JOIN|    |4        |414 |
|3 |  TABLE SCAN           |t1  |4        |46  |
|4 |  SUBPLAN FILTER       |    |1        |91  |
|5 |   SUBPLAN SCAN        |v   |1        |46  |
|6 |    TABLE SCAN         |t2  |4        |46  |
|7 |   TABLE SCAN          |t4  |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [v.a], [v.b], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [v.a], [v.b]), filter(nil), rowset=256,
      conds(nil), nl_params_([t1.c1])
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([v.a], [v.b]), filter([v.a = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  5 - output([v.a], [v.b]), filter([? = v.a]), rowset=256,
      access([v.a], [v.b])
  6 - output([t2.c1 + t2.c2], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  7 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join (select c1+c2 a,c2 b from t2) v on t1.c1 = v.a and v.a in (select c2 from t4) left join t3 on t1.c1 = t3.c1;
+------+------+------+------+------+------+
| c1   | c2   | a    | b    | c1   | c2   |
+------+------+------+------+------+------+
|    1 |    1 | NULL | NULL |    1 |    1 |
|    2 |    2 |    2 |    1 |    2 |    2 |
|    3 |    3 | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+

## join table
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4);
Query Plan
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |HASH OUTER JOIN       |     |4        |185 |
|1 | TABLE SCAN           |t3   |4        |46  |
|2 | SUBPLAN SCAN         |VIEW1|4        |139 |
|3 |  HASH RIGHT SEMI JOIN|     |4        |139 |
|4 |   TABLE SCAN         |t4   |4        |46  |
|5 |   HASH JOIN          |     |4        |92  |
|6 |    TABLE SCAN        |t1   |4        |46  |
|7 |    TABLE SCAN        |t2   |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  2 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2])
  3 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  4 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  5 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  6 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4);
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL |    1 |    1 |
| NULL | NULL | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL |    4 |    4 |
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4);
Query Plan
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |NESTED-LOOP OUTER JOIN|    |4        |600 |
|1 | TABLE SCAN           |t3  |4        |46  |
|2 | SUBPLAN FILTER       |    |2        |138 |
|3 |  HASH OUTER JOIN     |    |4        |92  |
|4 |   TABLE SCAN         |t1  |4        |46  |
|5 |   TABLE SCAN         |t2  |4        |46  |
|6 |  TABLE SCAN          |t4  |4        |46  |
===============================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t3.c1])
  1 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter([t1.c1 = ?]), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4);
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL |    1 |    1 |
| NULL | NULL | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL |    4 |    4 |
| NULL | NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4);
Query Plan
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |HASH OUTER JOIN       |     |4        |185 |
|1 | TABLE SCAN           |t3   |4        |46  |
|2 | SUBPLAN SCAN         |VIEW1|4        |139 |
|3 |  HASH RIGHT SEMI JOIN|     |4        |139 |
|4 |   TABLE SCAN         |t4   |4        |46  |
|5 |   HASH OUTER JOIN    |     |4        |92  |
|6 |    TABLE SCAN        |t1   |4        |46  |
|7 |    TABLE SCAN        |t2   |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t3.c1]), other_conds(nil)
  1 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  2 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2])
  3 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t4.c2]), other_conds(nil)
  4 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  5 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  6 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4);
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
|    2 |    2 | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL |    1 |    1 |
| NULL | NULL | NULL | NULL |    4 |    4 |
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4);
Query Plan
==================================================
|ID|OPERATOR                 |NAME|EST. ROWS|COST|
--------------------------------------------------
|0 |HASH RIGHT OUTER JOIN    |    |4        |121 |
|1 | TABLE SCAN              |t2  |4        |46  |
|2 | NESTED-LOOP OUTER JOIN  |    |4        |75  |
|3 |  TABLE SCAN             |t3  |4        |46  |
|4 |  SUBPLAN FILTER         |    |1        |52  |
|5 |   DISTRIBUTED TABLE SCAN|t1  |1        |7   |
|6 |   TABLE SCAN            |t4  |4        |46  |
==================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t3.c1])
  3 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter([t1.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  5 - output([t1.c1], [t1.c2]), filter([t1.c1 = ?]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4);
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL |    1 |    1 |
|    2 |    2 | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL |    4 |    4 |
| NULL | NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) left join t5 on t1.c1 = t5.c1;
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT OUTER JOIN  |     |4        |231 |
|1 | TABLE SCAN            |t5   |4        |46  |
|2 | HASH OUTER JOIN       |     |4        |185 |
|3 |  TABLE SCAN           |t3   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW1|4        |139 |
|5 |   HASH RIGHT SEMI JOIN|     |4        |139 |
|6 |    TABLE SCAN         |t4   |4        |46  |
|7 |    HASH JOIN          |     |4        |92  |
|8 |     TABLE SCAN        |t1   |4        |46  |
|9 |     TABLE SCAN        |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  2 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t3.c1]), other_conds(nil)
  3 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  4 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2])
  5 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  7 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  8 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  9 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) left join t5 on t1.c1 = t5.c1;
+------+------+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL |    1 |    1 | NULL | NULL |
| NULL | NULL | NULL | NULL |    2 |    2 | NULL | NULL |
| NULL | NULL | NULL | NULL |    4 |    4 | NULL | NULL |
+------+------+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) left join t5 on t1.c1 = t5.c1;
Query Plan
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |HASH RIGHT OUTER JOIN  |    |4        |646 |
|1 | TABLE SCAN            |t5  |4        |46  |
|2 | NESTED-LOOP OUTER JOIN|    |4        |600 |
|3 |  TABLE SCAN           |t3  |4        |46  |
|4 |  SUBPLAN FILTER       |    |2        |138 |
|5 |   HASH OUTER JOIN     |    |4        |92  |
|6 |    TABLE SCAN         |t1  |4        |46  |
|7 |    TABLE SCAN         |t2  |4        |46  |
|8 |   TABLE SCAN          |t4  |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t3.c1])
  3 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  5 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter([t1.c1 = ?]), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  6 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  8 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) left join t5 on t1.c1 = t5.c1;
+------+------+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL |    1 |    1 | NULL | NULL |
| NULL | NULL | NULL | NULL |    2 |    2 | NULL | NULL |
| NULL | NULL | NULL | NULL |    4 |    4 | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4) left join t5 on t1.c1 = t5.c1;
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT OUTER JOIN  |     |4        |231 |
|1 | TABLE SCAN            |t5   |4        |46  |
|2 | HASH OUTER JOIN       |     |4        |185 |
|3 |  TABLE SCAN           |t3   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW1|4        |139 |
|5 |   HASH RIGHT SEMI JOIN|     |4        |139 |
|6 |    TABLE SCAN         |t4   |4        |46  |
|7 |    HASH OUTER JOIN    |     |4        |92  |
|8 |     TABLE SCAN        |t1   |4        |46  |
|9 |     TABLE SCAN        |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  2 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t3.c1]), other_conds(nil)
  3 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  4 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2])
  5 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t4.c2]), other_conds(nil)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  7 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  8 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  9 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4) left join t5 on t1.c1 = t5.c1;
+------+------+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+------+------+
|    2 |    2 | NULL | NULL |    2 |    2 |    2 |    2 |
| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL |    1 |    1 | NULL | NULL |
| NULL | NULL | NULL | NULL |    4 |    4 | NULL | NULL |
+------+------+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4) left join t5 on t1.c1 = t5.c1;
Query Plan
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |HASH RIGHT OUTER JOIN     |    |4        |168 |
|1 | TABLE SCAN               |t5  |4        |46  |
|2 | HASH RIGHT OUTER JOIN    |    |4        |121 |
|3 |  TABLE SCAN              |t2  |4        |46  |
|4 |  NESTED-LOOP OUTER JOIN  |    |4        |75  |
|5 |   TABLE SCAN             |t3  |4        |46  |
|6 |   SUBPLAN FILTER         |    |1        |52  |
|7 |    DISTRIBUTED TABLE SCAN|t1  |1        |7   |
|8 |    TABLE SCAN            |t4  |4        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  3 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t3.c1])
  5 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  6 - output([t1.c1], [t1.c2]), filter([t1.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  7 - output([t1.c1], [t1.c2]), filter([t1.c1 = ?]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  8 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4) left join t5 on t1.c1 = t5.c1;
+------+------+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL |    1 |    1 | NULL | NULL |
|    2 |    2 | NULL | NULL |    2 |    2 |    2 |    2 |
| NULL | NULL | NULL | NULL |    4 |    4 | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) right join t5 on t1.c1 = t5.c1;
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH OUTER JOIN        |     |4        |231 |
|1 | TABLE SCAN            |t5   |4        |46  |
|2 | HASH JOIN             |     |4        |185 |
|3 |  TABLE SCAN           |t3   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW1|4        |139 |
|5 |   HASH RIGHT SEMI JOIN|     |4        |139 |
|6 |    TABLE SCAN         |t4   |4        |46  |
|7 |    HASH JOIN          |     |4        |92  |
|8 |     TABLE SCAN        |t1   |4        |46  |
|9 |     TABLE SCAN        |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  2 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t3.c1]), other_conds(nil)
  3 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  4 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2])
  5 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  7 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  8 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  9 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) right join t5 on t1.c1 = t5.c1;
+------+------+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL |    1 |    1 |
| NULL | NULL | NULL | NULL | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL | NULL | NULL |    5 |    5 |
+------+------+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) right join t5 on t1.c1 = t5.c1;
Query Plan
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |HASH OUTER JOIN        |    |4        |646 |
|1 | TABLE SCAN            |t5  |4        |46  |
|2 | NESTED-LOOP OUTER JOIN|    |4        |600 |
|3 |  TABLE SCAN           |t3  |4        |46  |
|4 |  SUBPLAN FILTER       |    |2        |138 |
|5 |   HASH OUTER JOIN     |    |4        |92  |
|6 |    TABLE SCAN         |t1  |4        |46  |
|7 |    TABLE SCAN         |t2  |4        |46  |
|8 |   TABLE SCAN          |t4  |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t3.c1])
  3 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter([t2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  5 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter([t1.c1 = ?]), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  6 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  8 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) right join t5 on t1.c1 = t5.c1;
+------+------+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL |    1 |    1 |
| NULL | NULL | NULL | NULL | NULL | NULL |    2 |    2 |
| NULL | NULL | NULL | NULL | NULL | NULL |    5 |    5 |
+------+------+------+------+------+------+------+------+
EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4) right join t5 on t1.c1 = t5.c1;
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH OUTER JOIN        |     |4        |231 |
|1 | TABLE SCAN            |t5   |4        |46  |
|2 | HASH JOIN             |     |4        |185 |
|3 |  TABLE SCAN           |t3   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW1|4        |139 |
|5 |   HASH RIGHT SEMI JOIN|     |4        |139 |
|6 |    TABLE SCAN         |t4   |4        |46  |
|7 |    HASH OUTER JOIN    |     |4        |92  |
|8 |     TABLE SCAN        |t1   |4        |46  |
|9 |     TABLE SCAN        |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  2 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t1.c1 = t3.c1]), other_conds(nil)
  3 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  4 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t2.c1], [VIEW1.t2.c2])
  5 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t4.c2]), other_conds(nil)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  7 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  8 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  9 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4) right join t5 on t1.c1 = t5.c1;
+------+------+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+------+------+
|    2 |    2 | NULL | NULL |    2 |    2 |    2 |    2 |
| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL |    1 |    1 |
| NULL | NULL | NULL | NULL | NULL | NULL |    5 |    5 |
+------+------+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4) right join t5 on t1.c1 = t5.c1;
Query Plan
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |HASH RIGHT OUTER JOIN     |    |4        |168 |
|1 | TABLE SCAN               |t2  |4        |46  |
|2 | HASH OUTER JOIN          |    |4        |121 |
|3 |  TABLE SCAN              |t5  |4        |46  |
|4 |  NESTED-LOOP OUTER JOIN  |    |4        |75  |
|5 |   TABLE SCAN             |t3  |4        |46  |
|6 |   SUBPLAN FILTER         |    |1        |52  |
|7 |    DISTRIBUTED TABLE SCAN|t1  |1        |7   |
|8 |    TABLE SCAN            |t4  |4        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2], [t5.c1], [t5.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t5.c1]), other_conds(nil)
  3 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  4 - output([t1.c1], [t1.c2], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_([t3.c1])
  5 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  6 - output([t1.c1], [t1.c2]), filter([t1.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  7 - output([t1.c1], [t1.c2]), filter([t1.c1 = ?]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  8 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select /*+no_rewrite*/ * from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t1.c1 in (select c2 from t4) right join t5 on t1.c1 = t5.c1;
+------+------+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+------+------+
|    2 |    2 | NULL | NULL |    2 |    2 |    2 |    2 |
| NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL |
| NULL | NULL | NULL | NULL | NULL | NULL |    1 |    1 |
| NULL | NULL | NULL | NULL | NULL | NULL |    5 |    5 |
+------+------+------+------+------+------+------+------+

## stmt has semi/anti join
EXPLAIN select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3) where t2.c1 not in (select c1 from t4);
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT ANTI JOIN NA|     |1        |185 |
|1 | TABLE SCAN            |t4   |4        |46  |
|2 | HASH OUTER JOIN       |     |4        |138 |
|3 |  TABLE SCAN           |t1   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW2|4        |92  |
|5 |   HASH RIGHT SEMI JOIN|     |4        |92  |
|6 |    TABLE SCAN         |t3   |4        |46  |
|7 |    TABLE SCAN         |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW2.t2.c2]), filter(nil), rowset=256,
      equal_conds([VIEW2.t2.c1 = t4.c1]), other_conds(nil)
  1 - output([t4.c1]), filter(nil), rowset=256,
      access([t4.c1]), partitions(p0)
  2 - output([VIEW2.t2.c2], [VIEW2.t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW2.t2.c1]), other_conds(nil)
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([VIEW2.t2.c1], [VIEW2.t2.c2]), filter(nil), rowset=256,
      access([VIEW2.t2.c1], [VIEW2.t2.c2])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  6 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3) where t2.c1 not in (select c1 from t4);
+------+
| c2   |
+------+
+------+
EXPLAIN select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3) where t2.c1 in (select c1 from t4);
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |HASH RIGHT SEMI JOIN |    |4        |185 |
|1 | TABLE SCAN          |t3  |4        |46  |
|2 | HASH RIGHT SEMI JOIN|    |4        |138 |
|3 |  TABLE SCAN         |t4  |4        |46  |
|4 |  HASH JOIN          |    |4        |92  |
|5 |   TABLE SCAN        |t1  |4        |46  |
|6 |   TABLE SCAN        |t2  |4        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  1 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  2 - output([t2.c2], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c1]), other_conds(nil)
  3 - output([t4.c1]), filter(nil), rowset=256,
      access([t4.c1]), partitions(p0)
  4 - output([t2.c2], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  6 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3) where t2.c1 in (select c1 from t4);
+------+
| c2   |
+------+
+------+

EXPLAIN select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where t2.c1 not in (select c1 from t5);
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT ANTI JOIN NA|     |1        |231 |
|1 | TABLE SCAN            |t5   |4        |46  |
|2 | HASH OUTER JOIN       |     |4        |185 |
|3 |  TABLE SCAN           |t3   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW2|4        |138 |
|5 |   HASH RIGHT SEMI JOIN|     |4        |138 |
|6 |    TABLE SCAN         |t4   |4        |46  |
|7 |    HASH JOIN          |     |4        |92  |
|8 |     TABLE SCAN        |t1   |4        |46  |
|9 |     TABLE SCAN        |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW2.t2.c2]), filter(nil), rowset=256,
      equal_conds([VIEW2.t2.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1]), filter(nil), rowset=256,
      access([t5.c1]), partitions(p0)
  2 - output([VIEW2.t2.c2], [VIEW2.t2.c1]), filter(nil), rowset=256,
      equal_conds([VIEW2.t1.c1 = t3.c1]), other_conds(nil)
  3 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  4 - output([VIEW2.t1.c1], [VIEW2.t2.c1], [VIEW2.t2.c2]), filter(nil), rowset=256,
      access([VIEW2.t1.c1], [VIEW2.t2.c1], [VIEW2.t2.c2])
  5 - output([t1.c1], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  7 - output([t1.c1], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  8 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  9 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where t2.c1 not in (select c1 from t5);
+------+
| c2   |
+------+
+------+
EXPLAIN select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where t2.c1 in (select c1 from t5);
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |HASH RIGHT SEMI JOIN |    |4        |231 |
|1 | TABLE SCAN          |t4  |4        |46  |
|2 | HASH RIGHT SEMI JOIN|    |4        |185 |
|3 |  TABLE SCAN         |t5  |4        |46  |
|4 |  HASH JOIN          |    |4        |138 |
|5 |   TABLE SCAN        |t1  |4        |46  |
|6 |   HASH JOIN         |    |4        |92  |
|7 |    TABLE SCAN       |t3  |4        |46  |
|8 |    TABLE SCAN       |t2  |4        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  1 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  2 - output([t2.c2], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t5.c1]), other_conds(nil)
  3 - output([t5.c1]), filter(nil), rowset=256,
      access([t5.c1]), partitions(p0)
  4 - output([t2.c2], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  6 - output([t2.c2], [t2.c1], [t3.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c1]), other_conds(nil)
  7 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  8 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where t2.c1 in (select c1 from t5);
+------+
| c2   |
+------+
+------+
EXPLAIN select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where t1.c1 not in (select c1 from t5);
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT ANTI JOIN NA|     |1        |231 |
|1 | TABLE SCAN            |t5   |4        |46  |
|2 | HASH OUTER JOIN       |     |4        |185 |
|3 |  TABLE SCAN           |t3   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW2|4        |138 |
|5 |   HASH RIGHT SEMI JOIN|     |4        |138 |
|6 |    TABLE SCAN         |t4   |4        |46  |
|7 |    HASH JOIN          |     |4        |92  |
|8 |     TABLE SCAN        |t1   |4        |46  |
|9 |     TABLE SCAN        |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW2.t2.c2]), filter(nil), rowset=256,
      equal_conds([VIEW2.t1.c1 = t5.c1]), other_conds(nil)
  1 - output([t5.c1]), filter(nil), rowset=256,
      access([t5.c1]), partitions(p0)
  2 - output([VIEW2.t2.c2], [VIEW2.t1.c1]), filter(nil), rowset=256,
      equal_conds([VIEW2.t1.c1 = t3.c1]), other_conds(nil)
  3 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  4 - output([VIEW2.t1.c1], [VIEW2.t2.c2]), filter(nil), rowset=256,
      access([VIEW2.t1.c1], [VIEW2.t2.c2])
  5 - output([t1.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  6 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  7 - output([t1.c1], [t2.c2], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  8 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  9 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where t1.c1 not in (select c1 from t5);
+------+
| c2   |
+------+
+------+
EXPLAIN select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where t1.c1 in (select c1 from t5);
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |HASH RIGHT SEMI JOIN |    |4        |231 |
|1 | TABLE SCAN          |t4  |4        |46  |
|2 | HASH RIGHT SEMI JOIN|    |4        |185 |
|3 |  TABLE SCAN         |t5  |4        |46  |
|4 |  HASH JOIN          |    |4        |138 |
|5 |   TABLE SCAN        |t1  |4        |46  |
|6 |   HASH JOIN         |    |4        |92  |
|7 |    TABLE SCAN       |t3  |4        |46  |
|8 |    TABLE SCAN       |t2  |4        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  1 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  2 - output([t2.c2], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t5.c1]), other_conds(nil)
  3 - output([t5.c1]), filter(nil), rowset=256,
      access([t5.c1]), partitions(p0)
  4 - output([t2.c2], [t1.c1], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  6 - output([t2.c2], [t3.c1], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t3.c1 = t2.c1]), other_conds(nil)
  7 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  8 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where t1.c1 in (select c1 from t5);
+------+
| c2   |
+------+
+------+
EXPLAIN select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where (t1.c1, t2.c1) not in (select c1,c2 from t5);
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |NESTED-LOOP ANTI JOIN  |     |1        |231 |
|1 | HASH OUTER JOIN       |     |4        |185 |
|2 |  TABLE SCAN           |t3   |4        |46  |
|3 |  SUBPLAN SCAN         |VIEW2|4        |138 |
|4 |   HASH RIGHT SEMI JOIN|     |4        |138 |
|5 |    TABLE SCAN         |t4   |4        |46  |
|6 |    HASH JOIN          |     |4        |92  |
|7 |     TABLE SCAN        |t1   |4        |46  |
|8 |     TABLE SCAN        |t2   |4        |46  |
|9 | MATERIAL              |     |4        |46  |
|10|  TABLE SCAN           |t5   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW2.t2.c2]), filter(nil), rowset=256,
      conds([(T_OP_OR, VIEW2.t1.c1 = t5.c1, (T_OP_IS, VIEW2.t1.c1, NULL, 0), (T_OP_IS, t5.c1, NULL, 0))], [(T_OP_OR, VIEW2.t2.c1 = t5.c2, (T_OP_IS, VIEW2.t2.c1, NULL, 0), (T_OP_IS, t5.c2, NULL, 0))]), nl_params_(nil)
  1 - output([VIEW2.t2.c2], [VIEW2.t1.c1], [VIEW2.t2.c1]), filter(nil), rowset=256,
      equal_conds([VIEW2.t1.c1 = t3.c1]), other_conds(nil)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  3 - output([VIEW2.t1.c1], [VIEW2.t2.c1], [VIEW2.t2.c2]), filter(nil), rowset=256,
      access([VIEW2.t1.c1], [VIEW2.t2.c1], [VIEW2.t2.c2])
  4 - output([t1.c1], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  5 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  6 - output([t1.c1], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  7 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  8 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  9 - output([t5.c1], [t5.c2]), filter(nil), rowset=256
  10 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)

select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where (t1.c1, t2.c1) not in (select c1,c2 from t5);
+------+
| c2   |
+------+
+------+
EXPLAIN select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where (t1.c1, t2.c1) in (select c1,c2 from t5);
Query Plan
============================================
|ID|OPERATOR          |NAME |EST. ROWS|COST|
--------------------------------------------
|0 |HASH SEMI JOIN    |     |1        |229 |
|1 | HASH JOIN        |     |1        |184 |
|2 |  HASH JOIN       |     |1        |138 |
|3 |   HASH JOIN      |     |1        |92  |
|4 |    SUBPLAN SCAN  |VIEW4|1        |46  |
|5 |     HASH DISTINCT|     |1        |46  |
|6 |      TABLE SCAN  |t5   |1        |46  |
|7 |    TABLE SCAN    |t3   |4        |46  |
|8 |   TABLE SCAN     |t1   |4        |46  |
|9 |  TABLE SCAN      |t2   |4        |46  |
|10| TABLE SCAN       |t4   |4        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t4.c2]), other_conds(nil)
  1 - output([t2.c2], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = VIEW4.VIEW1.c2]), other_conds(nil)
  2 - output([VIEW4.VIEW1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW4.VIEW1.c1]), other_conds(nil)
  3 - output([VIEW4.VIEW1.c1], [VIEW4.VIEW1.c2]), filter(nil), rowset=256,
      equal_conds([VIEW4.VIEW1.c1 = t3.c1]), other_conds(nil)
  4 - output([VIEW4.VIEW1.c1], [VIEW4.VIEW1.c2]), filter(nil), rowset=256,
      access([VIEW4.VIEW1.c1], [VIEW4.VIEW1.c2])
  5 - output([t5.c1], [t5.c2]), filter(nil), rowset=256,
      distinct([t5.c1], [t5.c2])
  6 - output([t5.c1], [t5.c2]), filter([t5.c1 = t5.c2]), rowset=256,
      access([t5.c1], [t5.c2]), partitions(p0)
  7 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  8 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  9 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  10 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)

select t2.c2 from t1 left join t2 on t1.c1 = t2.c1 right join t3 on t1.c1 = t3.c1 and t2.c1 in (select c2 from t4) where (t1.c1, t2.c1) in (select c1,c2 from t5);
+------+
| c2   |
+------+
+------+

EXPLAIN select * from t4 where c1 not in (select t1.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
Query Plan
================================================
|ID|OPERATOR               |NAME|EST. ROWS|COST|
------------------------------------------------
|0 |HASH RIGHT ANTI JOIN NA|    |1        |92  |
|1 | TABLE SCAN            |t1  |4        |46  |
|2 | TABLE SCAN            |t4  |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      equal_conds([t4.c1 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2]), partitions(p0)

select * from t4 where c1 not in (select t1.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t4 where c1 in (select t1.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
Query Plan
=============================================
|ID|OPERATOR            |NAME|EST. ROWS|COST|
---------------------------------------------
|0 |HASH RIGHT SEMI JOIN|    |4        |92  |
|1 | TABLE SCAN         |t1  |4        |46  |
|2 | TABLE SCAN         |t4  |4        |46  |
=============================================

Outputs & filters:
-------------------------------------
  0 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      equal_conds([t4.c1 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2]), partitions(p0)

select * from t4 where c1 in (select t1.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
|    3 |    3 |
+------+------+
EXPLAIN select * from t4 where c1 not in (select t2.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT ANTI JOIN NA|     |1        |185 |
|1 | SUBPLAN SCAN          |VIEW1|4        |138 |
|2 |  HASH OUTER JOIN      |     |4        |138 |
|3 |   TABLE SCAN          |t1   |4        |46  |
|4 |   SUBPLAN SCAN        |VIEW2|4        |92  |
|5 |    HASH SEMI JOIN     |     |4        |92  |
|6 |     TABLE SCAN        |t2   |4        |46  |
|7 |     TABLE SCAN        |t3   |4        |46  |
|8 | TABLE SCAN            |t4   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      equal_conds([t4.c1 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  2 - output([VIEW2.t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW2.t2.c1]), other_conds(nil)
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([VIEW2.t2.c1]), filter(nil), rowset=256,
      access([VIEW2.t2.c1])
  5 - output([t2.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  6 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  7 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  8 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2]), partitions(p0)

select * from t4 where c1 not in (select t2.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t4 where c1 in (select t2.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
Query Plan
==============================================
|ID|OPERATOR            |NAME |EST. ROWS|COST|
----------------------------------------------
|0 |HASH RIGHT SEMI JOIN|     |4        |185 |
|1 | SUBPLAN SCAN       |VIEW1|4        |138 |
|2 |  HASH SEMI JOIN    |     |4        |138 |
|3 |   HASH JOIN        |     |4        |92  |
|4 |    TABLE SCAN      |t1   |4        |46  |
|5 |    TABLE SCAN      |t2   |4        |46  |
|6 |   TABLE SCAN       |t3   |4        |46  |
|7 | TABLE SCAN         |t4   |4        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      equal_conds([t4.c1 = VIEW1.c1]), other_conds(nil)
  1 - output([VIEW1.c1]), filter(nil), rowset=256,
      access([VIEW1.c1])
  2 - output([t2.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  3 - output([t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  5 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  6 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  7 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2]), partitions(p0)

select * from t4 where c1 in (select t2.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t4 where c1 not in (select t1.c1 + t2.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT ANTI JOIN NA|     |1        |185 |
|1 | SUBPLAN SCAN          |VIEW1|4        |138 |
|2 |  HASH OUTER JOIN      |     |4        |138 |
|3 |   TABLE SCAN          |t1   |4        |46  |
|4 |   SUBPLAN SCAN        |VIEW2|4        |92  |
|5 |    HASH SEMI JOIN     |     |4        |92  |
|6 |     TABLE SCAN        |t2   |4        |46  |
|7 |     TABLE SCAN        |t3   |4        |46  |
|8 | TABLE SCAN            |t4   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      equal_conds([t4.c1 = VIEW1.t1.c1 + t2.c1]), other_conds(nil)
  1 - output([VIEW1.t1.c1 + t2.c1]), filter(nil), rowset=256,
      access([VIEW1.t1.c1 + t2.c1])
  2 - output([t1.c1 + VIEW2.t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW2.t2.c1]), other_conds(nil)
  3 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  4 - output([VIEW2.t2.c1]), filter(nil), rowset=256,
      access([VIEW2.t2.c1])
  5 - output([t2.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  6 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  7 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  8 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2]), partitions(p0)

select * from t4 where c1 not in (select t1.c1 + t2.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select * from t4 where c1 in (select t1.c1 + t2.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
Query Plan
================================================
|ID|OPERATOR              |NAME |EST. ROWS|COST|
------------------------------------------------
|0 |HASH RIGHT SEMI JOIN  |     |4        |185 |
|1 | SUBPLAN SCAN         |VIEW1|4        |138 |
|2 |  HASH RIGHT SEMI JOIN|     |4        |138 |
|3 |   TABLE SCAN         |t3   |4        |46  |
|4 |   HASH JOIN          |     |4        |92  |
|5 |    TABLE SCAN        |t1   |4        |46  |
|6 |    TABLE SCAN        |t2   |4        |46  |
|7 | TABLE SCAN           |t4   |4        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      equal_conds([t4.c1 = VIEW1.t1.c1 + t2.c1]), other_conds(nil)
  1 - output([VIEW1.t1.c1 + t2.c1]), filter(nil), rowset=256,
      access([VIEW1.t1.c1 + t2.c1])
  2 - output([t1.c1 + t2.c1]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  3 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  4 - output([t1.c1], [t2.c1]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t2.c1]), other_conds(nil)
  5 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  6 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  7 - output([t4.c1], [t4.c2]), filter(nil), rowset=256,
      access([t4.c1], [t4.c2]), partitions(p0)

select * from t4 where c1 in (select t1.c1 + t2.c1 from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3));
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
+------+------+

EXPLAIN select * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3) where t2.c1 not in (select t4.c1 from t4 left join t5 on t4.c1 = t5.c1 and t5.c1 in (select c2 from t3));
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH RIGHT ANTI JOIN NA|     |1        |185 |
|1 | TABLE SCAN            |t4   |4        |46  |
|2 | HASH OUTER JOIN       |     |4        |139 |
|3 |  TABLE SCAN           |t1   |4        |46  |
|4 |  SUBPLAN SCAN         |VIEW3|4        |92  |
|5 |   HASH RIGHT SEMI JOIN|     |4        |92  |
|6 |    TABLE SCAN         |t3   |4        |46  |
|7 |    TABLE SCAN         |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [VIEW3.t2.c1], [VIEW3.t2.c2]), filter(nil), rowset=256,
      equal_conds([VIEW3.t2.c1 = t4.c1]), other_conds(nil)
  1 - output([t4.c1]), filter(nil), rowset=256,
      access([t4.c1]), partitions(p0)
  2 - output([t1.c1], [t1.c2], [VIEW3.t2.c1], [VIEW3.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW3.t2.c1]), other_conds(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([VIEW3.t2.c1], [VIEW3.t2.c2]), filter(nil), rowset=256,
      access([VIEW3.t2.c1], [VIEW3.t2.c2])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t3.c2]), other_conds(nil)
  6 - output([t3.c2]), filter(nil), rowset=256,
      access([t3.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from t1 left join t2 on t1.c1 = t2.c1 and t2.c1 in (select c2 from t3) where t2.c1 not in (select t4.c1 from t4 left join t5 on t4.c1 = t5.c1 and t5.c1 in (select c2 from t3));
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
+------+------+------+------+

## update outer join
explain update t1 left join t2 on t1.c1 = t2.c1 and t2.c2 in (select c1 from t3) set t2.c2 = 10;
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |UPDATE                 |     |4        |193 |
|1 | HASH OUTER JOIN       |     |4        |138 |
|2 |  TABLE SCAN           |t1   |4        |46  |
|3 |  SUBPLAN SCAN         |VIEW1|4        |92  |
|4 |   HASH RIGHT SEMI JOIN|     |4        |92  |
|5 |    TABLE SCAN         |t3   |4        |46  |
|6 |    TABLE SCAN         |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{VIEW1: ({t2: (VIEW1.t2.__pk_increment, VIEW1.t2.c1, VIEW1.t2.c2)}), hash_distinct}]),
      update([VIEW1.t2.c2=column_conv(INT,PS:(11,0),NULL,cast(10, INT(-1, 0)))])
  1 - output([VIEW1.t2.__pk_increment], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.t2.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([VIEW1.t2.__pk_increment], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t2.__pk_increment], [VIEW1.t2.c1], [VIEW1.t2.c2])
  4 - output([t2.__pk_increment], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c2 = t3.c1]), other_conds(nil)
  5 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  6 - output([t2.__pk_increment], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.__pk_increment], [t2.c1], [t2.c2]), partitions(p0)

EXPLAIN update t1 left join t2 on t1.c1 = t2.c1 and t2.c2 in (select c1 from t3) set t2.c2 = 10;
Query Plan
=================================================
|ID|OPERATOR               |NAME |EST. ROWS|COST|
-------------------------------------------------
|0 |UPDATE                 |     |4        |193 |
|1 | HASH OUTER JOIN       |     |4        |138 |
|2 |  TABLE SCAN           |t1   |4        |46  |
|3 |  SUBPLAN SCAN         |VIEW1|4        |92  |
|4 |   HASH RIGHT SEMI JOIN|     |4        |92  |
|5 |    TABLE SCAN         |t3   |4        |46  |
|6 |    TABLE SCAN         |t2   |4        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{VIEW1: ({t2: (VIEW1.t2.__pk_increment, VIEW1.t2.c1, VIEW1.t2.c2)}), hash_distinct}]),
      update([VIEW1.t2.c2=column_conv(INT,PS:(11,0),NULL,cast(10, INT(-1, 0)))])
  1 - output([VIEW1.t2.__pk_increment], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = VIEW1.t2.c1]), other_conds(nil)
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  3 - output([VIEW1.t2.__pk_increment], [VIEW1.t2.c1], [VIEW1.t2.c2]), filter(nil), rowset=256,
      access([VIEW1.t2.__pk_increment], [VIEW1.t2.c1], [VIEW1.t2.c2])
  4 - output([t2.__pk_increment], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c2 = t3.c1]), other_conds(nil)
  5 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  6 - output([t2.__pk_increment], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.__pk_increment], [t2.c1], [t2.c2]), partitions(p0)

update t1 left join t2 on t1.c1 = t2.c1 and t2.c2 in (select c1 from t3) set t2.c2 = 10;
explain update /*+use_merge(tp1 view1)*/ tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select c1 from t3) set tp2.c2 = 10;
Query Plan
==============================================================
|ID|OPERATOR                         |NAME    |EST. ROWS|COST|
--------------------------------------------------------------
|0 |DISTRIBUTED UPDATE               |        |1        |263 |
|1 | PX COORDINATOR                  |        |1        |232 |
|2 |  EXCHANGE OUT DISTR             |:EX10001|1        |231 |
|3 |   MERGE RIGHT OUTER JOIN        |        |1        |231 |
|4 |    SORT                         |        |1        |140 |
|5 |     SUBPLAN SCAN                |VIEW1   |1        |140 |
|6 |      HASH SEMI JOIN             |        |1        |140 |
|7 |       PX PARTITION ITERATOR     |        |1        |92  |
|8 |        TABLE SCAN               |tp2     |1        |92  |
|9 |       EXCHANGE IN DISTR         |        |4        |48  |
|10|        EXCHANGE OUT DISTR (PKEY)|:EX10000|4        |47  |
|11|         TABLE SCAN              |t3      |4        |46  |
|12|    SORT                         |        |1        |92  |
|13|     PX PARTITION ITERATOR       |        |1        |92  |
|14|      TABLE SCAN                 |tp1     |1        |92  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{VIEW1: ({tp2: (VIEW1.tp2.__pk_increment, VIEW1.tp2.c1, VIEW1.tp2.c2)}), hash_distinct}]),
      update([VIEW1.tp2.c2=column_conv(INT,PS:(11,0),NULL,cast(10, INT(-1, 0)))])
  1 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256
  2 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256, dop=1
  3 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256,
      equal_conds([tp1.c1 = VIEW1.tp2.c1]), other_conds(nil)
  4 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256, sort_keys([VIEW1.tp2.c1, ASC])
  5 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256,
      access([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2])
  6 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      equal_conds([tp2.c1 = t3.c1]), other_conds(nil)
  7 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256
  8 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      access([tp2.__pk_increment], [tp2.c1], [tp2.c2]), partitions(p[0-1])
  9 - output([t3.c1]), filter(nil), rowset=256
  10 - (#keys=1, [t3.c1]), output([t3.c1]), filter(nil), rowset=256, is_single, dop=1
  11 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  12 - output([tp1.c1]), filter(nil), rowset=256, sort_keys([tp1.c1, ASC])
  13 - output([tp1.c1]), filter(nil), rowset=256
  14 - output([tp1.c1]), filter(nil), rowset=256,
      access([tp1.c1]), partitions(p[0-1])

EXPLAIN update /*+use_merge(tp1 view1)*/ tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select c1 from t3) set tp2.c2 = 10;
Query Plan
==============================================================
|ID|OPERATOR                         |NAME    |EST. ROWS|COST|
--------------------------------------------------------------
|0 |DISTRIBUTED UPDATE               |        |1        |263 |
|1 | PX COORDINATOR                  |        |1        |232 |
|2 |  EXCHANGE OUT DISTR             |:EX10001|1        |231 |
|3 |   MERGE RIGHT OUTER JOIN        |        |1        |231 |
|4 |    SORT                         |        |1        |140 |
|5 |     SUBPLAN SCAN                |VIEW1   |1        |140 |
|6 |      HASH SEMI JOIN             |        |1        |140 |
|7 |       PX PARTITION ITERATOR     |        |1        |92  |
|8 |        TABLE SCAN               |tp2     |1        |92  |
|9 |       EXCHANGE IN DISTR         |        |4        |48  |
|10|        EXCHANGE OUT DISTR (PKEY)|:EX10000|4        |47  |
|11|         TABLE SCAN              |t3      |4        |46  |
|12|    SORT                         |        |1        |92  |
|13|     PX PARTITION ITERATOR       |        |1        |92  |
|14|      TABLE SCAN                 |tp1     |1        |92  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{VIEW1: ({tp2: (VIEW1.tp2.__pk_increment, VIEW1.tp2.c1, VIEW1.tp2.c2)}), hash_distinct}]),
      update([VIEW1.tp2.c2=column_conv(INT,PS:(11,0),NULL,cast(10, INT(-1, 0)))])
  1 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256
  2 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256, dop=1
  3 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256,
      equal_conds([tp1.c1 = VIEW1.tp2.c1]), other_conds(nil)
  4 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256, sort_keys([VIEW1.tp2.c1, ASC])
  5 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256,
      access([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2])
  6 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      equal_conds([tp2.c1 = t3.c1]), other_conds(nil)
  7 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256
  8 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      access([tp2.__pk_increment], [tp2.c1], [tp2.c2]), partitions(p[0-1])
  9 - output([t3.c1]), filter(nil), rowset=256
  10 - (#keys=1, [t3.c1]), output([t3.c1]), filter(nil), rowset=256, is_single, dop=1
  11 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  12 - output([tp1.c1]), filter(nil), rowset=256, sort_keys([tp1.c1, ASC])
  13 - output([tp1.c1]), filter(nil), rowset=256
  14 - output([tp1.c1]), filter(nil), rowset=256,
      access([tp1.c1]), partitions(p[0-1])

update /*+use_merge(tp1 view1)*/ tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select c1 from t3) set tp2.c2 = 10;

## bug: https://work.aone.alibaba-inc.com/issue/30929464
drop table if exists C, D, BB, CC, B;
CREATE TABLE C (
col_varchar_10 varchar(10),
col_varchar varchar (1),
col_int int,
pk int,
col_varchar_20 varchar(20),
col_varchar_key varchar (1),
col_varchar_10_key varchar(10),
col_int_key int,
col_varchar_20_key varchar(20),
/*Indices*/
primary key (pk) ,
key idx3(pk, col_varchar_key ),
key idx5(pk, col_varchar_10_key ),
key idx1(pk, col_int_key ),
key idx7(pk, col_varchar_20_key )) ;

CREATE TABLE D (
pk int,
col_varchar_10 varchar(10),
col_varchar_20 varchar(20),
col_varchar_10_key varchar(10),
col_varchar_20_key varchar(20),
col_int int,
col_int_key int,
col_varchar_key varchar (1),
col_varchar varchar (1),
/*Indices*/
primary key (pk) ,
key idx5(pk, col_varchar_10_key ),
key idx7(pk, col_varchar_20_key ),
key idx1(pk, col_int_key ),
key idx3(pk, col_varchar_key )) ;

CREATE TABLE BB (
col_varchar_20_key varchar(20),
col_int_key int,
col_int int,
col_varchar_10 varchar(10),
col_varchar_10_key varchar(10),
col_varchar_key varchar (1),
col_varchar varchar (1),
col_varchar_20 varchar(20),
pk int,
/*Indices*/
key idx7(pk, col_varchar_20_key ),
key idx1(pk, col_int_key ),
key idx5(pk, col_varchar_10_key ),
key idx3(pk, col_varchar_key ),
primary key (pk) ) ;

CREATE TABLE CC (
col_varchar_20_key varchar(20),
col_varchar_key varchar (1),
col_varchar_10_key varchar(10),
col_varchar_20 varchar(20),
col_int int,
pk int,
col_varchar varchar (1),
col_varchar_10 varchar(10),
col_int_key int,
/*Indices*/
key idx7(pk, col_varchar_20_key ),
key idx3(pk, col_varchar_key ),
key idx5(pk, col_varchar_10_key ),
primary key (pk) ,
key idx1(pk, col_int_key )) ;

CREATE TABLE B (
col_varchar varchar (1),
col_int int,
col_varchar_20 varchar(20),
col_varchar_10 varchar(10),
col_int_key int,
col_varchar_10_key varchar(10),
pk int,
col_varchar_20_key varchar(20),
col_varchar_key varchar (1),
/*Indices*/
key idx1(pk, col_int_key ),
key idx5(pk, col_varchar_10_key ),
primary key (pk) ,
key idx7(pk, col_varchar_20_key ),
key idx3(pk, col_varchar_key )) ;

EXPLAIN SELECT table2 . col_int_key AS field1
FROM ( C AS table1 LEFT  JOIN
      ( CC AS table2 INNER JOIN
        (  SELECT   SUBQUERY1_t2 . *
            FROM ( D AS SUBQUERY1_t2 RIGHT  JOIN
                      CC AS SUBQUERY1_t3 ON (SUBQUERY1_t3 . `col_varchar_10_key` = SUBQUERY1_t2 . `col_varchar_key`
                                            AND SUBQUERY1_t2 . `col_varchar_10` != SOME ( SELECT   CHILD_SUBQUERY1_t1 . `col_varchar_10_key` AS CHILD_SUBQUERY1_field1
                                                                                    FROM C AS CHILD_SUBQUERY1_t1 )))
            WHERE   EXISTS ( SELECT DISTINCT  CHILD_SUBQUERY2_t1 . `col_varchar_10` AS CHILD_SUBQUERY1_field1 FROM CC AS CHILD_SUBQUERY2_t1 WHERE CHILD_SUBQUERY2_t1 . `col_int_key` != SUBQUERY1_t3 . `pk` ) )
        AS table3 ON (table3 . `col_varchar_key` = table2 . `col_varchar_20_key`  ) )
     ON (table3 . `pk` = table2 . `pk`  ) )
WHERE ( table1 . `col_varchar_10_key` > table3 . `col_varchar_20` AND table1 . `col_int` <> table1 . `col_int` )  GROUP BY field1  ORDER BY field1;
Query Plan
========================================================================
|ID|OPERATOR                   |NAME                    |EST. ROWS|COST|
------------------------------------------------------------------------
|0 |MERGE GROUP BY             |                        |0        |228 |
|1 | SORT                      |                        |0        |228 |
|2 |  NESTED-LOOP SEMI JOIN    |                        |0        |228 |
|3 |   HASH JOIN               |                        |0        |182 |
|4 |    NESTED-LOOP SEMI JOIN  |                        |0        |137 |
|5 |     NESTED-LOOP JOIN      |                        |0        |91  |
|6 |      NESTED-LOOP JOIN     |                        |0        |91  |
|7 |       TABLE SCAN          |SUBQUERY1_t2            |1        |46  |
|8 |       MATERIAL            |                        |0        |46  |
|9 |        TABLE SCAN         |table1                  |0        |46  |
|10|      DISTRIBUTED TABLE GET|table2                  |1        |7   |
|11|     MATERIAL              |                        |1        |46  |
|12|      TABLE SCAN           |CHILD_SUBQUERY1_t1(idx5)|1        |46  |
|13|    TABLE SCAN             |SUBQUERY1_t3(idx5)      |1        |46  |
|14|   MATERIAL                |                        |1        |46  |
|15|    TABLE SCAN             |CHILD_SUBQUERY2_t1(idx1)|1        |46  |
========================================================================

Outputs & filters:
-------------------------------------
  0 - output([table2.col_int_key]), filter(nil), rowset=256,
      group([table2.col_int_key]), agg_func(nil)
  1 - output([table2.col_int_key]), filter(nil), rowset=256, sort_keys([table2.col_int_key, ASC])
  2 - output([table2.col_int_key]), filter(nil), rowset=256,
      conds([CHILD_SUBQUERY2_t1.col_int_key != SUBQUERY1_t3.pk]), nl_params_(nil)
  3 - output([table2.col_int_key], [SUBQUERY1_t3.pk]), filter(nil), rowset=256,
      equal_conds([SUBQUERY1_t3.col_varchar_10_key = SUBQUERY1_t2.col_varchar_key]), other_conds(nil)
  4 - output([table2.col_int_key], [SUBQUERY1_t2.col_varchar_key]), filter(nil), rowset=256,
      conds([SUBQUERY1_t2.col_varchar_10 != CHILD_SUBQUERY1_t1.col_varchar_10_key]), nl_params_(nil)
  5 - output([table2.col_int_key], [SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.col_varchar_10]), filter(nil), rowset=256,
      conds(nil), nl_params_([SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.pk])
  6 - output([SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_varchar_10]), filter(nil), rowset=256,
      conds([table1.col_varchar_10_key > SUBQUERY1_t2.col_varchar_20]), nl_params_(nil)
  7 - output([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.col_varchar_10], [SUBQUERY1_t2.col_varchar_20]), filter(nil), rowset=256,
      access([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.col_varchar_10], [SUBQUERY1_t2.col_varchar_20]), partitions(p0)
  8 - output([table1.col_varchar_10_key]), filter(nil), rowset=256
  9 - output([table1.col_varchar_10_key]), filter([table1.col_int != table1.col_int]), rowset=256,
      access([table1.col_varchar_10_key], [table1.col_int]), partitions(p0)
  10 - output([table2.col_int_key]), filter([? = table2.col_varchar_20_key]), rowset=256,
      access([table2.col_varchar_20_key], [table2.col_int_key]), partitions(p0)
  11 - output([CHILD_SUBQUERY1_t1.col_varchar_10_key]), filter(nil), rowset=256
  12 - output([CHILD_SUBQUERY1_t1.col_varchar_10_key]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY1_t1.col_varchar_10_key]), partitions(p0)
  13 - output([SUBQUERY1_t3.pk], [SUBQUERY1_t3.col_varchar_10_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t3.pk], [SUBQUERY1_t3.col_varchar_10_key]), partitions(p0)
  14 - output([CHILD_SUBQUERY2_t1.col_int_key]), filter(nil), rowset=256
  15 - output([CHILD_SUBQUERY2_t1.col_int_key]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY2_t1.col_int_key]), partitions(p0)

SELECT table2 . col_int_key AS field1
FROM ( C AS table1 LEFT  JOIN
      ( CC AS table2 INNER JOIN
        (  SELECT   SUBQUERY1_t2 . *
            FROM ( D AS SUBQUERY1_t2 RIGHT  JOIN
                      CC AS SUBQUERY1_t3 ON (SUBQUERY1_t3 . `col_varchar_10_key` = SUBQUERY1_t2 . `col_varchar_key`
                                            AND SUBQUERY1_t2 . `col_varchar_10` != SOME ( SELECT   CHILD_SUBQUERY1_t1 . `col_varchar_10_key` AS CHILD_SUBQUERY1_field1
                                                                                    FROM C AS CHILD_SUBQUERY1_t1 )))
            WHERE   EXISTS ( SELECT DISTINCT  CHILD_SUBQUERY2_t1 . `col_varchar_10` AS CHILD_SUBQUERY1_field1 FROM CC AS CHILD_SUBQUERY2_t1 WHERE CHILD_SUBQUERY2_t1 . `col_int_key` != SUBQUERY1_t3 . `pk` ) )
        AS table3 ON (table3 . `col_varchar_key` = table2 . `col_varchar_20_key`  ) )
     ON (table3 . `pk` = table2 . `pk`  ) )
WHERE ( table1 . `col_varchar_10_key` > table3 . `col_varchar_20` AND table1 . `col_int` <> table1 . `col_int` )  GROUP BY field1  ORDER BY field1;
+--------+
| field1 |
+--------+
+--------+

EXPLAIN SELECT  SUBQUERY1_t2 . *
FROM ( D AS SUBQUERY1_t2 RIGHT  JOIN
          CC AS SUBQUERY1_t3 ON (SUBQUERY1_t3 . `col_varchar_10_key` = SUBQUERY1_t2 . `col_varchar_key`
                                AND SUBQUERY1_t2 . `col_varchar_10` != SOME ( SELECT   CHILD_SUBQUERY1_t1 . `col_varchar_10_key` AS CHILD_SUBQUERY1_field1
                                                                        FROM C AS CHILD_SUBQUERY1_t1 )))
WHERE EXISTS (SELECT DISTINCT CHILD_SUBQUERY2_t1 . `col_varchar_10` AS CHILD_SUBQUERY1_field1 FROM CC AS CHILD_SUBQUERY2_t1 WHERE CHILD_SUBQUERY2_t1 . `col_int_key` != SUBQUERY1_t2 . `pk`);
Query Plan
====================================================================
|ID|OPERATOR               |NAME                    |EST. ROWS|COST|
--------------------------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN  |                        |0        |182 |
|1 | HASH JOIN             |                        |0        |137 |
|2 |  NESTED-LOOP SEMI JOIN|                        |0        |91  |
|3 |   TABLE SCAN          |SUBQUERY1_t2            |1        |46  |
|4 |   MATERIAL            |                        |1        |46  |
|5 |    TABLE SCAN         |CHILD_SUBQUERY1_t1(idx5)|1        |46  |
|6 |  TABLE SCAN           |SUBQUERY1_t3(idx5)      |1        |46  |
|7 | MATERIAL              |                        |1        |46  |
|8 |  TABLE SCAN           |CHILD_SUBQUERY2_t1(idx1)|1        |46  |
====================================================================

Outputs & filters:
-------------------------------------
  0 - output([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_varchar_10], [SUBQUERY1_t2.col_varchar_20], [SUBQUERY1_t2.col_varchar_10_key], [SUBQUERY1_t2.col_varchar_20_key], [SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_int_key], [SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.col_varchar]), filter(nil), rowset=256,
      conds([CHILD_SUBQUERY2_t1.col_int_key != SUBQUERY1_t2.pk]), nl_params_(nil)
  1 - output([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_varchar_10], [SUBQUERY1_t2.col_varchar_20], [SUBQUERY1_t2.col_varchar_10_key], [SUBQUERY1_t2.col_varchar_20_key], [SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_int_key], [SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.col_varchar]), filter(nil), rowset=256,
      equal_conds([SUBQUERY1_t3.col_varchar_10_key = SUBQUERY1_t2.col_varchar_key]), other_conds(nil)
  2 - output([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_varchar_10], [SUBQUERY1_t2.col_varchar_20], [SUBQUERY1_t2.col_varchar_10_key], [SUBQUERY1_t2.col_varchar_20_key], [SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_int_key], [SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.col_varchar]), filter(nil), rowset=256,
      conds([SUBQUERY1_t2.col_varchar_10 != CHILD_SUBQUERY1_t1.col_varchar_10_key]), nl_params_(nil)
  3 - output([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.col_varchar_10], [SUBQUERY1_t2.col_varchar_20], [SUBQUERY1_t2.col_varchar_10_key], [SUBQUERY1_t2.col_varchar_20_key], [SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_int_key], [SUBQUERY1_t2.col_varchar]), filter(nil), rowset=256,
      access([SUBQUERY1_t2.pk], [SUBQUERY1_t2.col_varchar_key], [SUBQUERY1_t2.col_varchar_10], [SUBQUERY1_t2.col_varchar_20], [SUBQUERY1_t2.col_varchar_10_key], [SUBQUERY1_t2.col_varchar_20_key], [SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_int_key], [SUBQUERY1_t2.col_varchar]), partitions(p0)
  4 - output([CHILD_SUBQUERY1_t1.col_varchar_10_key]), filter(nil), rowset=256
  5 - output([CHILD_SUBQUERY1_t1.col_varchar_10_key]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY1_t1.col_varchar_10_key]), partitions(p0)
  6 - output([SUBQUERY1_t3.col_varchar_10_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t3.col_varchar_10_key]), partitions(p0)
  7 - output([CHILD_SUBQUERY2_t1.col_int_key]), filter(nil), rowset=256
  8 - output([CHILD_SUBQUERY2_t1.col_int_key]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY2_t1.col_int_key]), partitions(p0)

SELECT  SUBQUERY1_t2 . *
FROM ( D AS SUBQUERY1_t2 RIGHT  JOIN
          CC AS SUBQUERY1_t3 ON (SUBQUERY1_t3 . `col_varchar_10_key` = SUBQUERY1_t2 . `col_varchar_key`
                                AND SUBQUERY1_t2 . `col_varchar_10` != SOME ( SELECT   CHILD_SUBQUERY1_t1 . `col_varchar_10_key` AS CHILD_SUBQUERY1_field1
                                                                        FROM C AS CHILD_SUBQUERY1_t1 )))
WHERE EXISTS (SELECT DISTINCT CHILD_SUBQUERY2_t1 . `col_varchar_10` AS CHILD_SUBQUERY1_field1 FROM CC AS CHILD_SUBQUERY2_t1 WHERE CHILD_SUBQUERY2_t1 . `col_int_key` != SUBQUERY1_t2 . `pk`);
+----+----------------+----------------+--------------------+--------------------+---------+-------------+-----------------+-------------+
| pk | col_varchar_10 | col_varchar_20 | col_varchar_10_key | col_varchar_20_key | col_int | col_int_key | col_varchar_key | col_varchar |
+----+----------------+----------------+--------------------+--------------------+---------+-------------+-----------------+-------------+
+----+----------------+----------------+--------------------+--------------------+---------+-------------+-----------------+-------------+

## 简化case
EXPLAIN select * from ( t1 right  join t2 on (t2.c1 = t1.c1 and t1.c2 not in ( select c1 from t3)));
Query Plan
===================================================
|ID|OPERATOR                 |NAME |EST. ROWS|COST|
---------------------------------------------------
|0 |HASH RIGHT OUTER JOIN    |     |4        |138 |
|1 | SUBPLAN SCAN            |VIEW1|1        |92  |
|2 |  HASH RIGHT ANTI JOIN NA|     |1        |92  |
|3 |   TABLE SCAN            |t3   |4        |46  |
|4 |   TABLE SCAN            |t1   |4        |46  |
|5 | TABLE SCAN              |t2   |4        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = VIEW1.t1.c1]), other_conds(nil)
  1 - output([VIEW1.t1.c1], [VIEW1.t1.c2]), filter(nil), rowset=256,
      access([VIEW1.t1.c1], [VIEW1.t1.c2])
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t3.c1]), other_conds(nil)
  3 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from ( t1 right  join t2 on (t2.c1 = t1.c1 and t1.c2 not in ( select c1 from t3)));
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
| NULL | NULL |    1 |   10 |
| NULL | NULL |    3 |    3 |
| NULL | NULL |    4 |    4 |
| NULL | NULL | NULL | NULL |
+------+------+------+------+

EXPLAIN select * from ( t1 right join t2 on (t2.c1 = t1.c1 and t1.c2 not in (select c1 from t3)))
where exists (select distinct c2 from t2 where t1.c2 != t2.c1);
Query Plan
==================================================
|ID|OPERATOR                 |NAME|EST. ROWS|COST|
--------------------------------------------------
|0 |NESTED-LOOP SEMI JOIN    |    |1        |183 |
|1 | HASH JOIN               |    |1        |138 |
|2 |  HASH RIGHT ANTI JOIN NA|    |1        |92  |
|3 |   TABLE SCAN            |t3  |4        |46  |
|4 |   TABLE SCAN            |t1  |4        |46  |
|5 |  TABLE SCAN             |t2  |4        |46  |
|6 | MATERIAL                |    |4        |46  |
|7 |  TABLE SCAN             |t2  |4        |46  |
==================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      conds([t1.c2 != t2.c1]), nl_params_(nil)
  1 - output([t1.c1], [t1.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = t1.c1]), other_conds(nil)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t3.c1]), other_conds(nil)
  3 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)
  6 - output([t2.c1]), filter(nil), rowset=256
  7 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from ( t1 right join t2 on (t2.c1 = t1.c1 and t1.c2 not in (select c1 from t3)))
where exists (select distinct c2 from t2 where t1.c2 != t2.c1);
+------+------+------+------+
| c1   | c2   | c1   | c2   |
+------+------+------+------+
+------+------+------+------+

EXPLAIN select * from ( t1 right join t3 on t1.c1 = t3.c1 right join t2 on (t2.c1 = t1.c1 and t1.c2 not in ( select c1 from t4)));
Query Plan
====================================================
|ID|OPERATOR                  |NAME |EST. ROWS|COST|
----------------------------------------------------
|0 |HASH RIGHT OUTER JOIN     |     |4        |183 |
|1 | SUBPLAN SCAN             |VIEW1|1        |138 |
|2 |  HASH JOIN               |     |1        |138 |
|3 |   HASH RIGHT ANTI JOIN NA|     |1        |92  |
|4 |    TABLE SCAN            |t4   |4        |46  |
|5 |    TABLE SCAN            |t1   |4        |46  |
|6 |   TABLE SCAN             |t3   |4        |46  |
|7 | TABLE SCAN               |t2   |4        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.t1.c1], [VIEW1.t1.c2], [VIEW1.t3.c1], [VIEW1.t3.c2], [t2.c1], [t2.c2]), filter(nil), rowset=256,
      equal_conds([t2.c1 = VIEW1.t1.c1]), other_conds(nil)
  1 - output([VIEW1.t3.c1], [VIEW1.t3.c2], [VIEW1.t1.c1], [VIEW1.t1.c2]), filter(nil), rowset=256,
      access([VIEW1.t3.c1], [VIEW1.t3.c2], [VIEW1.t1.c1], [VIEW1.t1.c2])
  2 - output([t3.c1], [t3.c2], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c1 = t3.c1]), other_conds(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      equal_conds([t1.c2 = t4.c1]), other_conds(nil)
  4 - output([t4.c1]), filter(nil), rowset=256,
      access([t4.c1]), partitions(p0)
  5 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  6 - output([t3.c1], [t3.c2]), filter(nil), rowset=256,
      access([t3.c1], [t3.c2]), partitions(p0)
  7 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from ( t1 right join t3 on t1.c1 = t3.c1 right join t2 on (t2.c1 = t1.c1 and t1.c2 not in ( select c1 from t4)));
+------+------+------+------+------+------+
| c1   | c2   | c1   | c2   | c1   | c2   |
+------+------+------+------+------+------+
| NULL | NULL | NULL | NULL |    1 |   10 |
| NULL | NULL | NULL | NULL |    3 |    3 |
| NULL | NULL | NULL | NULL |    4 |    4 |
| NULL | NULL | NULL | NULL | NULL | NULL |
+------+------+------+------+------+------+

## bug: https://work.aone.alibaba-inc.com/issue/31003123
EXPLAIN SELECT Count(table1 . `pk`)     AS field1,
       table1 . col_varchar_key AS field2
FROM   ( (SELECT DISTINCT SUBQUERY1_t1 . *
        FROM   ( cc AS SUBQUERY1_t1
                 RIGHT JOIN bb AS SUBQUERY1_t2
                         ON ( SUBQUERY1_t2 . `pk` = SUBQUERY1_t1 . `col_int` ) )
        WHERE  SUBQUERY1_t1 . `pk` < 7) AS table1
         RIGHT OUTER JOIN d AS table2
                       ON ( table2 . `pk` = table1 . `col_int_key`
                            AND ( 9, 7 ) IN (SELECT Sum(SUBQUERY2_t1 .
                                                        `col_int_key`) AS
                                                    SUBQUERY2_field1,
                                                    Count(SUBQUERY2_t1 . `pk`)
                                                    AS
                                                    SUBQUERY2_field2
                                             FROM   ( cc AS SUBQUERY2_t1
                                                      INNER JOIN cc AS
                                                      SUBQUERY2_t2
                                                              ON ( SUBQUERY2_t2 .
                                                                   `col_int_key`
                                                                   =
                                                                   SUBQUERY2_t1 .
                                                                   `pk` )
                                                    )
                                            ) ) )
WHERE  ( EXISTS ((SELECT 5
                  FROM   DUAL)) )
        OR table1 . `pk` < table1 . `col_int`
GROUP  BY field2
ORDER  BY field1,
          field2;
Query Plan
=======================================================================
|ID|OPERATOR                        |NAME              |EST. ROWS|COST|
-----------------------------------------------------------------------
|0 |SORT                            |                  |1        |99  |
|1 | HASH GROUP BY                  |                  |1        |99  |
|2 |  SUBPLAN FILTER                |                  |1        |99  |
|3 |   MERGE OUTER JOIN             |                  |1        |99  |
|4 |    TABLE SCAN                  |table2(idx5)      |1        |46  |
|5 |    SORT                        |                  |1        |53  |
|6 |     SUBPLAN SCAN               |VIEW2             |1        |53  |
|7 |      NESTED-LOOP JOIN CARTESIAN|                  |1        |53  |
|8 |       SUBPLAN SCAN             |VIEW3             |1        |53  |
|9 |        SCALAR GROUP BY         |                  |1        |53  |
|10|         NESTED-LOOP JOIN       |                  |1        |53  |
|11|          TABLE SCAN            |SUBQUERY2_t2(idx1)|1        |46  |
|12|          DISTRIBUTED TABLE GET |SUBQUERY2_t1      |1        |7   |
|13|       NESTED-LOOP JOIN         |                  |1        |53  |
|14|        TABLE SCAN              |SUBQUERY1_t1      |1        |46  |
|15|        DISTRIBUTED TABLE GET   |SUBQUERY1_t2      |1        |7   |
|16|   LIMIT                        |                  |1        |1   |
|17|    EXPRESSION                  |                  |1        |1   |
=======================================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(VIEW2.VIEW1.pk)], [VIEW2.VIEW1.col_varchar_key]), filter(nil), rowset=256, sort_keys([T_FUN_COUNT(VIEW2.VIEW1.pk), ASC], [VIEW2.VIEW1.col_varchar_key, ASC])
  1 - output([T_FUN_COUNT(VIEW2.VIEW1.pk)], [VIEW2.VIEW1.col_varchar_key]), filter(nil), rowset=256,
      group([VIEW2.VIEW1.col_varchar_key]), agg_func([T_FUN_COUNT(VIEW2.VIEW1.pk)])
  2 - output([VIEW2.VIEW1.col_varchar_key], [VIEW2.VIEW1.pk]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  3 - output([VIEW2.VIEW1.col_varchar_key], [VIEW2.VIEW1.pk]), filter([? OR VIEW2.VIEW1.pk < VIEW2.VIEW1.col_int]), rowset=256,
      equal_conds([table2.pk = VIEW2.VIEW1.col_int_key]), other_conds(nil)
  4 - output([table2.pk]), filter(nil), rowset=256,
      access([table2.pk]), partitions(p0)
  5 - output([VIEW2.VIEW1.col_varchar_key], [VIEW2.VIEW1.pk], [VIEW2.VIEW1.col_int_key], [VIEW2.VIEW1.col_int]), filter(nil), rowset=256, sort_keys([VIEW2.VIEW1.col_int_key, ASC])
  6 - output([VIEW2.VIEW1.col_varchar_key], [VIEW2.VIEW1.col_int], [VIEW2.VIEW1.pk], [VIEW2.VIEW1.col_int_key]), filter(nil), rowset=256,
      access([VIEW2.VIEW1.col_varchar_key], [VIEW2.VIEW1.col_int], [VIEW2.VIEW1.pk], [VIEW2.VIEW1.col_int_key])
  7 - output([SUBQUERY1_t1.col_varchar_key], [SUBQUERY1_t1.col_int], [SUBQUERY1_t1.pk], [SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  8 - output(nil), filter(nil), rowset=256,
      access(nil)
  9 - output([T_FUN_SUM(SUBQUERY2_t1.col_int_key)], [T_FUN_COUNT(SUBQUERY2_t1.pk)]), filter([T_FUN_COUNT(SUBQUERY2_t1.pk) = 7], [cast(9, DECIMAL(1, 0)) = T_FUN_SUM(SUBQUERY2_t1.col_int_key)]), rowset=256,
      group(nil), agg_func([T_FUN_SUM(SUBQUERY2_t1.col_int_key)], [T_FUN_COUNT(SUBQUERY2_t1.pk)])
  10 - output([SUBQUERY2_t1.pk], [SUBQUERY2_t1.col_int_key]), filter(nil), rowset=256,
      conds(nil), nl_params_([SUBQUERY2_t2.col_int_key])
  11 - output([SUBQUERY2_t2.col_int_key]), filter(nil), rowset=256,
      access([SUBQUERY2_t2.col_int_key]), partitions(p0)
  12 - output([SUBQUERY2_t1.pk], [SUBQUERY2_t1.col_int_key]), filter(nil), rowset=256,
      access([GROUP_ID], [SUBQUERY2_t1.pk], [SUBQUERY2_t1.col_int_key]), partitions(p0)
  13 - output([SUBQUERY1_t1.col_varchar_key], [SUBQUERY1_t1.col_int], [SUBQUERY1_t1.pk], [SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256,
      conds(nil), nl_params_([SUBQUERY1_t1.col_int])
  14 - output([SUBQUERY1_t1.pk], [SUBQUERY1_t1.col_int], [SUBQUERY1_t1.col_varchar_key], [SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t1.pk], [SUBQUERY1_t1.col_int], [SUBQUERY1_t1.col_varchar_key], [SUBQUERY1_t1.col_int_key]), partitions(p0)
  15 - output(nil), filter(nil), rowset=256,
      access([GROUP_ID]), partitions(p0)
  16 - output([5]), filter(nil), rowset=256, limit(1), offset(nil)
  17 - output([1]), filter(nil)
      values({1})

SELECT Count(table1 . `pk`)     AS field1,
       table1 . col_varchar_key AS field2
FROM   ( (SELECT DISTINCT SUBQUERY1_t1 . *
        FROM   ( cc AS SUBQUERY1_t1
                 RIGHT JOIN bb AS SUBQUERY1_t2
                         ON ( SUBQUERY1_t2 . `pk` = SUBQUERY1_t1 . `col_int` ) )
        WHERE  SUBQUERY1_t1 . `pk` < 7) AS table1
         RIGHT OUTER JOIN d AS table2
                       ON ( table2 . `pk` = table1 . `col_int_key`
                            AND ( 9, 7 ) IN (SELECT Sum(SUBQUERY2_t1 .
                                                        `col_int_key`) AS
                                                    SUBQUERY2_field1,
                                                    Count(SUBQUERY2_t1 . `pk`)
                                                    AS
                                                    SUBQUERY2_field2
                                             FROM   ( cc AS SUBQUERY2_t1
                                                      INNER JOIN cc AS
                                                      SUBQUERY2_t2
                                                              ON ( SUBQUERY2_t2 .
                                                                   `col_int_key`
                                                                   =
                                                                   SUBQUERY2_t1 .
                                                                   `pk` )
                                                    )
                                            ) ) )
WHERE  ( EXISTS ((SELECT 5
                  FROM   DUAL)) )
        OR table1 . `pk` < table1 . `col_int`
GROUP  BY field2
ORDER  BY field1,
          field2;
+--------+--------+
| field1 | field2 |
+--------+--------+
+--------+--------+

EXPLAIN SELECT  table1 . col_varchar_key
FROM (SELECT * FROM CC AS SUBQUERY1_t1) AS table1
      RIGHT OUTER JOIN D AS table2 ON table2 . `pk` = table1 . `col_int_key`
                                    AND 9  IN (SELECT `col_int_key` AS SUBQUERY2_field1 FROM CC AS SUBQUERY2_t1);
Query Plan
==============================================================
|ID|OPERATOR                     |NAME        |EST. ROWS|COST|
--------------------------------------------------------------
|0 |MERGE OUTER JOIN             |            |1        |137 |
|1 | TABLE SCAN                  |table2(idx5)|1        |46  |
|2 | SORT                        |            |1        |91  |
|3 |  SUBPLAN SCAN               |VIEW1       |1        |91  |
|4 |   NESTED-LOOP JOIN CARTESIAN|            |1        |91  |
|5 |    TABLE SCAN               |SUBQUERY1_t1|1        |46  |
|6 |    MATERIAL                 |            |1        |46  |
|7 |     SUBPLAN SCAN            |VIEW2       |1        |46  |
|8 |      TABLE SCAN             |SUBQUERY2_t1|1        |46  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([VIEW1.SUBQUERY1_t1.col_varchar_key]), filter(nil), rowset=256,
      equal_conds([table2.pk = VIEW1.SUBQUERY1_t1.col_int_key]), other_conds(nil)
  1 - output([table2.pk]), filter(nil), rowset=256,
      access([table2.pk]), partitions(p0)
  2 - output([VIEW1.SUBQUERY1_t1.col_varchar_key], [VIEW1.SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256, sort_keys([VIEW1.SUBQUERY1_t1.col_int_key, ASC])
  3 - output([VIEW1.SUBQUERY1_t1.col_varchar_key], [VIEW1.SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256,
      access([VIEW1.SUBQUERY1_t1.col_varchar_key], [VIEW1.SUBQUERY1_t1.col_int_key])
  4 - output([SUBQUERY1_t1.col_varchar_key], [SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  5 - output([SUBQUERY1_t1.col_varchar_key], [SUBQUERY1_t1.col_int_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t1.col_varchar_key], [SUBQUERY1_t1.col_int_key]), partitions(p0)
  6 - output(nil), filter(nil), rowset=256
  7 - output(nil), filter(nil), rowset=256,
      access(nil)
  8 - output([1]), filter([SUBQUERY2_t1.col_int_key = 9]), rowset=256,
      access([SUBQUERY2_t1.col_int_key]), partitions(p0),
      limit(1), offset(nil)

SELECT  table1 . col_varchar_key
FROM (SELECT * FROM CC AS SUBQUERY1_t1) AS table1
      RIGHT OUTER JOIN D AS table2 ON table2 . `pk` = table1 . `col_int_key`
                                    AND 9  IN (SELECT `col_int_key` AS SUBQUERY2_field1 FROM CC AS SUBQUERY2_t1);
+-----------------+
| col_varchar_key |
+-----------------+
+-----------------+

## bug: https://work.aone.alibaba-inc.com/issue/31277032
EXPLAIN SELECT Min(table2 . `pk`) AS field1
FROM   ( cc AS table1
RIGHT OUTER JOIN c AS table2
ON ( table2 . `col_varchar` = table1 . `col_varchar_key` )
)
WHERE  ( ( 9, 5 ) IN (SELECT Sum(SUBQUERY1_t1 . `col_int`) AS SUBQUERY1_field1,
Max(SUBQUERY1_t1 . `pk`)      AS SUBQUERY1_field2
FROM   ( cc AS SUBQUERY1_t1
LEFT JOIN ( c AS SUBQUERY1_t2
INNER JOIN c AS SUBQUERY1_t3
ON ( SUBQUERY1_t3 .
`col_int_key` =
SUBQUERY1_t2 .
`col_int_key`
OR ( 'x', 'j' ) IN
(SELECT Sum(CHILD_SUBQUERY1_t1 .
`col_varchar_key`) AS
CHILD_SUBQUERY1_field1,
Sum(CHILD_SUBQUERY1_t1 .
`col_varchar`
)
AS
CHILD_SUBQUERY1_field2
FROM   ( cc AS CHILD_SUBQUERY1_t1
INNER JOIN cc AS
CHILD_SUBQUERY1_t2
ON (
CHILD_SUBQUERY1_t2 .
`col_varchar_20`
=
CHILD_SUBQUERY1_t1 .
`col_varchar_key`
) )
) ) )
ON ( SUBQUERY1_t3 . `col_varchar` =
SUBQUERY1_t2 . `col_varchar_key`
OR
SUBQUERY1_t3 . `col_varchar_20_key` NOT
IN
(SELECT 5
UNION
SELECT 8)
) )
WHERE  ( 'i', 'm' ) IN (SELECT Min(CHILD_SUBQUERY3_t1 .
`col_varchar`)       AS
CHILD_SUBQUERY3_field1,
Count(CHILD_SUBQUERY3_t1 .
`col_varchar_key`) AS
CHILD_SUBQUERY3_field2
FROM   ( cc AS CHILD_SUBQUERY3_t1
RIGHT JOIN b AS
CHILD_SUBQUERY3_t2
ON (
CHILD_SUBQUERY3_t2 .
`col_varchar_10` =
CHILD_SUBQUERY3_t1 .
`col_varchar_key` )
)
WHERE
CHILD_SUBQUERY3_t2 . `col_varchar_10`
<=
CHILD_SUBQUERY3_t2 . `col_varchar`)) )
AND ( table1 . `col_int_key` NOT BETWEEN 226 AND ( 226 + 183 )
OR table1 . `col_varchar_key` <= 'm' )
AND (SELECT Max(SUBQUERY2_t1 . `col_varchar_20`) AS SUBQUERY2_field1
FROM   ( cc AS SUBQUERY2_t1
INNER JOIN c AS SUBQUERY2_t2
ON ( SUBQUERY2_t2 . `col_varchar_key` =
SUBQUERY2_t1 . `col_varchar` ) )) IS NULL
HAVING field1 > 't'
ORDER  BY field1;
Query Plan
============================================================================
|ID|OPERATOR                             |NAME              |EST. ROWS|COST|
----------------------------------------------------------------------------
|0 |SCALAR GROUP BY                      |                  |1        |92  |
|1 | NESTED-LOOP JOIN CARTESIAN          |                  |1        |92  |
|2 |  SUBPLAN SCAN                       |VIEW2             |1        |92  |
|3 |   SCALAR GROUP BY                   |                  |1        |92  |
|4 |    NESTED-LOOP JOIN CARTESIAN       |                  |1        |92  |
|5 |     SUBPLAN SCAN                    |VIEW1             |1        |92  |
|6 |      SCALAR GROUP BY                |                  |1        |92  |
|7 |       HASH OUTER JOIN               |                  |1        |92  |
|8 |        TABLE SCAN                   |CHILD_SUBQUERY3_t2|1        |46  |
|9 |        TABLE SCAN                   |CHILD_SUBQUERY3_t1|1        |46  |
|10|     NESTED-LOOP OUTER JOIN CARTESIAN|                  |1        |228 |
|11|      TABLE SCAN                     |SUBQUERY1_t1      |1        |46  |
|12|      MATERIAL                       |                  |1        |183 |
|13|       SUBPLAN SCAN                  |VIEW3             |1        |183 |
|14|        SUBPLAN FILTER               |                  |1        |183 |
|15|         NESTED-LOOP JOIN            |                  |1        |91  |
|16|          TABLE SCAN                 |SUBQUERY1_t3      |1        |46  |
|17|          MATERIAL                   |                  |1        |46  |
|18|           TABLE SCAN                |SUBQUERY1_t2      |1        |46  |
|19|         MERGE UNION DISTINCT        |                  |2        |1   |
|20|          EXPRESSION                 |                  |1        |1   |
|21|          EXPRESSION                 |                  |1        |1   |
|22|         SCALAR GROUP BY             |                  |1        |92  |
|23|          HASH JOIN                  |                  |1        |92  |
|24|           TABLE SCAN                |CHILD_SUBQUERY1_t2|1        |46  |
|25|           TABLE SCAN                |CHILD_SUBQUERY1_t1|1        |46  |
|26|  NESTED-LOOP JOIN CARTESIAN         |                  |1        |96  |
|27|   SUBPLAN SCAN                      |VIEW4             |1        |92  |
|28|    SCALAR GROUP BY                  |                  |1        |92  |
|29|     HASH JOIN                       |                  |1        |92  |
|30|      TABLE SCAN                     |SUBQUERY2_t2(idx3)|1        |46  |
|31|      TABLE SCAN                     |SUBQUERY2_t1      |1        |46  |
|32|   HASH JOIN                         |                  |1        |92  |
|33|    TABLE SCAN                       |table1            |1        |46  |
|34|    TABLE SCAN                       |table2            |1        |46  |
============================================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(table2.pk)]), filter([cast(T_FUN_MIN(table2.pk), DECIMAL(11, 0)) > cast('t', DECIMAL(1, -1))]), rowset=256,
      group(nil), agg_func([T_FUN_MIN(table2.pk)])
  1 - output([table2.pk]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  2 - output(nil), filter(nil), rowset=256,
      access(nil)
  3 - output([T_FUN_SUM(SUBQUERY1_t1.col_int)], [T_FUN_MAX(SUBQUERY1_t1.pk)]), filter([T_FUN_MAX(SUBQUERY1_t1.pk) = 5], [cast(9, DECIMAL(1, 0)) = T_FUN_SUM(SUBQUERY1_t1.col_int)]), rowset=256,
      group(nil), agg_func([T_FUN_SUM(SUBQUERY1_t1.col_int)], [T_FUN_MAX(SUBQUERY1_t1.pk)])
  4 - output([SUBQUERY1_t1.pk], [SUBQUERY1_t1.col_int]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  5 - output(nil), filter(nil), rowset=256,
      access(nil)
  6 - output([T_FUN_MIN(CHILD_SUBQUERY3_t1.col_varchar)], [cast(T_FUN_COUNT(CHILD_SUBQUERY3_t1.col_varchar_key), DECIMAL(20, 0))]), filter([T_FUN_MIN(CHILD_SUBQUERY3_t1.col_varchar) = 'i'], [cast('m', DECIMAL(1, -1)) = cast(T_FUN_COUNT(CHILD_SUBQUERY3_t1.col_varchar_key), DECIMAL(20, 0))]), rowset=256,
      group(nil), agg_func([T_FUN_MIN(CHILD_SUBQUERY3_t1.col_varchar)], [T_FUN_COUNT(CHILD_SUBQUERY3_t1.col_varchar_key)])
  7 - output([CHILD_SUBQUERY3_t1.col_varchar_key], [CHILD_SUBQUERY3_t1.col_varchar]), filter(nil), rowset=256,
      equal_conds([CHILD_SUBQUERY3_t2.col_varchar_10 = CHILD_SUBQUERY3_t1.col_varchar_key]), other_conds(nil)
  8 - output([CHILD_SUBQUERY3_t2.col_varchar_10]), filter([CHILD_SUBQUERY3_t2.col_varchar_10 <= CHILD_SUBQUERY3_t2.col_varchar]), rowset=256,
      access([CHILD_SUBQUERY3_t2.col_varchar_10], [CHILD_SUBQUERY3_t2.col_varchar]), partitions(p0)
  9 - output([CHILD_SUBQUERY3_t1.col_varchar_key], [CHILD_SUBQUERY3_t1.col_varchar]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY3_t1.col_varchar_key], [CHILD_SUBQUERY3_t1.col_varchar]), partitions(p0)
  10 - output([SUBQUERY1_t1.pk], [SUBQUERY1_t1.col_int]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  11 - output([SUBQUERY1_t1.pk], [SUBQUERY1_t1.col_int]), filter(nil), rowset=256,
      access([SUBQUERY1_t1.pk], [SUBQUERY1_t1.col_int]), partitions(p0)
  12 - output(nil), filter(nil), rowset=256
  13 - output(nil), filter(nil), rowset=256,
      access(nil)
  14 - output([1]), filter([SUBQUERY1_t3.col_varchar = SUBQUERY1_t2.col_varchar_key OR cast(SUBQUERY1_t3.col_varchar_20_key, DECIMAL(-1, -1)) != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_([(cast('x', DOUBLE(-1, -1)), cast('j', DOUBLE(-1, -1))) = ANY(subquery(2))]), init_plan_idxs_([1])
  15 - output([SUBQUERY1_t3.col_varchar], [SUBQUERY1_t3.col_varchar_20_key], [SUBQUERY1_t2.col_varchar_key]), filter(nil), rowset=256,
      conds([SUBQUERY1_t3.col_int_key = SUBQUERY1_t2.col_int_key OR ?]), nl_params_(nil)
  16 - output([SUBQUERY1_t3.col_int_key], [SUBQUERY1_t3.col_varchar], [SUBQUERY1_t3.col_varchar_20_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t3.col_int_key], [SUBQUERY1_t3.col_varchar], [SUBQUERY1_t3.col_varchar_20_key]), partitions(p0)
  17 - output([SUBQUERY1_t2.col_int_key], [SUBQUERY1_t2.col_varchar_key]), filter(nil), rowset=256
  18 - output([SUBQUERY1_t2.col_int_key], [SUBQUERY1_t2.col_varchar_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t2.col_int_key], [SUBQUERY1_t2.col_varchar_key]), partitions(p0)
  19 - output([cast(UNION([1]), DECIMAL(1, 0))]), filter(nil), rowset=256
  20 - output([5]), filter(nil)
      values({5})
  21 - output([8]), filter(nil)
      values({8})
  22 - output([T_FUN_SUM(cast(CHILD_SUBQUERY1_t1.col_varchar_key, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(CHILD_SUBQUERY1_t1.col_varchar, DOUBLE(-1, -1)))]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(cast(CHILD_SUBQUERY1_t1.col_varchar_key, DOUBLE(-1, -1)))], [T_FUN_SUM(cast(CHILD_SUBQUERY1_t1.col_varchar, DOUBLE(-1, -1)))])
  23 - output([CHILD_SUBQUERY1_t1.col_varchar_key], [CHILD_SUBQUERY1_t1.col_varchar]), filter(nil), rowset=256,
      equal_conds([CHILD_SUBQUERY1_t2.col_varchar_20 = CHILD_SUBQUERY1_t1.col_varchar_key]), other_conds(nil)
  24 - output([CHILD_SUBQUERY1_t2.col_varchar_20]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY1_t2.col_varchar_20]), partitions(p0)
  25 - output([CHILD_SUBQUERY1_t1.col_varchar_key], [CHILD_SUBQUERY1_t1.col_varchar]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY1_t1.col_varchar_key], [CHILD_SUBQUERY1_t1.col_varchar]), partitions(p0)
  26 - output([table2.pk]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  27 - output(nil), filter(nil), rowset=256,
      access(nil)
  28 - output([T_FUN_MAX(SUBQUERY2_t1.col_varchar_20)]), filter([(T_OP_IS, T_FUN_MAX(SUBQUERY2_t1.col_varchar_20), NULL, 0)]), rowset=256,
      group(nil), agg_func([T_FUN_MAX(SUBQUERY2_t1.col_varchar_20)])
  29 - output([SUBQUERY2_t1.col_varchar_20]), filter(nil), rowset=256,
      equal_conds([SUBQUERY2_t2.col_varchar_key = SUBQUERY2_t1.col_varchar]), other_conds(nil)
  30 - output([SUBQUERY2_t2.col_varchar_key]), filter(nil), rowset=256,
      access([SUBQUERY2_t2.col_varchar_key]), partitions(p0)
  31 - output([SUBQUERY2_t1.col_varchar], [SUBQUERY2_t1.col_varchar_20]), filter(nil), rowset=256,
      access([SUBQUERY2_t1.col_varchar], [SUBQUERY2_t1.col_varchar_20]), partitions(p0)
  32 - output([table2.pk]), filter(nil), rowset=256,
      equal_conds([table2.col_varchar = table1.col_varchar_key]), other_conds(nil)
  33 - output([table1.col_varchar_key]), filter([(T_OP_OR, table1.col_int_key < 226, table1.col_int_key > 226 + 183, table1.col_varchar_key <= 'm')]), rowset=256,
      access([table1.col_varchar_key], [table1.col_int_key]), partitions(p0)
  34 - output([table2.pk], [table2.col_varchar]), filter(nil), rowset=256,
      access([table2.pk], [table2.col_varchar]), partitions(p0)

Warnings:
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
SELECT Min(table2 . `pk`) AS field1
FROM   ( cc AS table1
RIGHT OUTER JOIN c AS table2
ON ( table2 . `col_varchar` = table1 . `col_varchar_key` )
)
WHERE  ( ( 9, 5 ) IN (SELECT Sum(SUBQUERY1_t1 . `col_int`) AS SUBQUERY1_field1,
Max(SUBQUERY1_t1 . `pk`)      AS SUBQUERY1_field2
FROM   ( cc AS SUBQUERY1_t1
LEFT JOIN ( c AS SUBQUERY1_t2
INNER JOIN c AS SUBQUERY1_t3
ON ( SUBQUERY1_t3 .
`col_int_key` =
SUBQUERY1_t2 .
`col_int_key`
OR ( 'x', 'j' ) IN
(SELECT Sum(CHILD_SUBQUERY1_t1 .
`col_varchar_key`) AS
CHILD_SUBQUERY1_field1,
Sum(CHILD_SUBQUERY1_t1 .
`col_varchar`
)
AS
CHILD_SUBQUERY1_field2
FROM   ( cc AS CHILD_SUBQUERY1_t1
INNER JOIN cc AS
CHILD_SUBQUERY1_t2
ON (
CHILD_SUBQUERY1_t2 .
`col_varchar_20`
=
CHILD_SUBQUERY1_t1 .
`col_varchar_key`
) )
) ) )
ON ( SUBQUERY1_t3 . `col_varchar` =
SUBQUERY1_t2 . `col_varchar_key`
OR
SUBQUERY1_t3 . `col_varchar_20_key` NOT
IN
(SELECT 5
UNION
SELECT 8)
) )
WHERE  ( 'i', 'm' ) IN (SELECT Min(CHILD_SUBQUERY3_t1 .
`col_varchar`)       AS
CHILD_SUBQUERY3_field1,
Count(CHILD_SUBQUERY3_t1 .
`col_varchar_key`) AS
CHILD_SUBQUERY3_field2
FROM   ( cc AS CHILD_SUBQUERY3_t1
RIGHT JOIN b AS
CHILD_SUBQUERY3_t2
ON (
CHILD_SUBQUERY3_t2 .
`col_varchar_10` =
CHILD_SUBQUERY3_t1 .
`col_varchar_key` )
)
WHERE
CHILD_SUBQUERY3_t2 . `col_varchar_10`
<=
CHILD_SUBQUERY3_t2 . `col_varchar`)) )
AND ( table1 . `col_int_key` NOT BETWEEN 226 AND ( 226 + 183 )
OR table1 . `col_varchar_key` <= 'm' )
AND (SELECT Max(SUBQUERY2_t1 . `col_varchar_20`) AS SUBQUERY2_field1
FROM   ( cc AS SUBQUERY2_t1
INNER JOIN c AS SUBQUERY2_t2
ON ( SUBQUERY2_t2 . `col_varchar_key` =
SUBQUERY2_t1 . `col_varchar` ) )) IS NULL
HAVING field1 > 't'
ORDER  BY field1;
+--------+
| field1 |
+--------+
+--------+
Warnings:
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'
Warning	1292	Truncated incorrect DOUBLE value: 'x'
Warning	1292	Truncated incorrect DOUBLE value: 'j'

## 简化case
EXPLAIN SELECT 1 FROM ( cc AS SUBQUERY1_t1 LEFT JOIN ( c AS SUBQUERY1_t2
INNER JOIN c AS SUBQUERY1_t3
ON ( SUBQUERY1_t3.`col_int_key` = SUBQUERY1_t2.`col_int_key`
OR 1 IN (SELECT 1 union select 2))
) ON (SUBQUERY1_t3.`col_varchar_20_key` NOT IN (SELECT 5 UNION SELECT 8)));
Query Plan
=======================================================================
|ID|OPERATOR                        |NAME              |EST. ROWS|COST|
-----------------------------------------------------------------------
|0 |NESTED-LOOP OUTER JOIN CARTESIAN|                  |1        |137 |
|1 | TABLE SCAN                     |SUBQUERY1_t1(idx7)|1        |46  |
|2 | MATERIAL                       |                  |0        |92  |
|3 |  SUBPLAN SCAN                  |VIEW1             |0        |92  |
|4 |   SUBPLAN FILTER               |                  |0        |92  |
|5 |    NESTED-LOOP JOIN            |                  |0        |92  |
|6 |     TABLE SCAN                 |SUBQUERY1_t2(idx1)|1        |46  |
|7 |     MATERIAL                   |                  |0        |46  |
|8 |      HASH ANTI JOIN SNA        |                  |0        |46  |
|9 |       TABLE SCAN               |SUBQUERY1_t3      |1        |46  |
|10|       SUBPLAN SCAN             |VIEW2             |2        |1   |
|11|        MERGE UNION DISTINCT    |                  |2        |1   |
|12|         EXPRESSION             |                  |1        |1   |
|13|         EXPRESSION             |                  |1        |1   |
|14|    MERGE UNION DISTINCT        |                  |2        |1   |
|15|     EXPRESSION                 |                  |1        |1   |
|16|     EXPRESSION                 |                  |1        |1   |
=======================================================================

Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)
  2 - output(nil), filter(nil), rowset=256
  3 - output(nil), filter(nil), rowset=256,
      access(nil)
  4 - output([1]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([1 = ANY(subquery(1))]), init_plan_idxs_(nil)
  5 - output(nil), filter(nil), rowset=256,
      conds([SUBQUERY1_t3.col_int_key = SUBQUERY1_t2.col_int_key OR ?]), nl_params_(nil)
  6 - output([SUBQUERY1_t2.col_int_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t2.col_int_key]), partitions(p0)
  7 - output([SUBQUERY1_t3.col_int_key]), filter(nil), rowset=256
  8 - output([SUBQUERY1_t3.col_int_key]), filter(nil), rowset=256,
      equal_conds([cast(SUBQUERY1_t3.col_varchar_20_key, DECIMAL(-1, -1)) = VIEW2.5]), other_conds(nil)
  9 - output([SUBQUERY1_t3.col_int_key], [SUBQUERY1_t3.col_varchar_20_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t3.col_int_key], [SUBQUERY1_t3.col_varchar_20_key]), partitions(p0)
  10 - output([VIEW2.5]), filter(nil), rowset=256,
      access([VIEW2.5])
  11 - output([cast(UNION([1]), DECIMAL(1, 0))]), filter(nil), rowset=256
  12 - output([5]), filter(nil)
      values({5})
  13 - output([8]), filter(nil)
      values({8})
  14 - output([UNION([1])]), filter(nil), rowset=256
  15 - output([1]), filter(nil)
      values({1})
  16 - output([2]), filter(nil)
      values({2})

SELECT 1 FROM ( cc AS SUBQUERY1_t1 LEFT JOIN ( c AS SUBQUERY1_t2
INNER JOIN c AS SUBQUERY1_t3
ON ( SUBQUERY1_t3.`col_int_key` = SUBQUERY1_t2.`col_int_key`
OR 1 IN (SELECT 1 union select 2))
) ON (SUBQUERY1_t3.`col_varchar_20_key` NOT IN (SELECT 5 UNION SELECT 8)));
+---+
| 1 |
+---+
+---+

drop table t1,t2,t3,t4,t5,tp1,tp2,C,D,BB,CC,B;

## bug: https://work.aone.alibaba-inc.com/issue/31698561
drop table if exists t1, tp1, tp2;
Warnings:
Note	1051	Unknown table 'db_simplify.t1'
Note	1051	Unknown table 'db_simplify.tp1'
Note	1051	Unknown table 'db_simplify.tp2'

create table t1 (c1 int, c2 int);
create table tp1 (c1 int, c2 int) partition by hash(c1) partitions 2;
create table tp2 (c1 int, c2 int) partition by hash(c1) partitions 2;

EXPLAIN select * from tp2;
Query Plan
====================================================
|ID|OPERATOR               |NAME    |EST. ROWS|COST|
----------------------------------------------------
|0 |PX COORDINATOR         |        |1        |93  |
|1 | EXCHANGE OUT DISTR    |:EX10000|1        |93  |
|2 |  PX PARTITION ITERATOR|        |1        |92  |
|3 |   TABLE SCAN          |tp2     |1        |92  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(tp2.c1, tp2.c2)]), filter(nil), rowset=256
  1 - output([INTERNAL_FUNCTION(tp2.c1, tp2.c2)]), filter(nil), rowset=256, dop=1
  2 - output([tp2.c1], [tp2.c2]), filter(nil), rowset=256
  3 - output([tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      access([tp2.c1], [tp2.c2]), partitions(p[0-1])

select * from tp2;
+------+------+
| c1   | c2   |
+------+------+
|    2 |    3 |
|    1 |    2 |
+------+------+
EXPLAIN update tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select /*+no_unnest*/c1 from t1) set tp2.c2 = 10;
Query Plan
============================================================
|ID|OPERATOR                       |NAME    |EST. ROWS|COST|
------------------------------------------------------------
|0 |DISTRIBUTED UPDATE             |        |1        |262 |
|1 | PX COORDINATOR                |        |1        |231 |
|2 |  EXCHANGE OUT DISTR           |:EX10002|1        |231 |
|3 |   HASH RIGHT OUTER JOIN       |        |1        |231 |
|4 |    EXCHANGE IN DISTR          |        |1        |139 |
|5 |     EXCHANGE OUT DISTR (PKEY) |:EX10001|1        |139 |
|6 |      SUBPLAN SCAN             |VIEW1   |1        |138 |
|7 |       SUBPLAN FILTER          |        |1        |138 |
|8 |        EXCHANGE IN DISTR      |        |1        |93  |
|9 |         EXCHANGE OUT DISTR    |:EX10000|1        |93  |
|10|          PX PARTITION ITERATOR|        |1        |92  |
|11|           TABLE SCAN          |tp2     |1        |92  |
|12|        TABLE SCAN             |t1      |2        |46  |
|13|    PX PARTITION ITERATOR      |        |1        |92  |
|14|     TABLE SCAN                |tp1     |1        |92  |
============================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{VIEW1: ({tp2: (VIEW1.tp2.__pk_increment, VIEW1.tp2.c1, VIEW1.tp2.c2)}), hash_distinct}]),
      update([VIEW1.tp2.c2=column_conv(INT,PS:(11,0),NULL,cast(10, INT(-1, 0)))])
  1 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256
  2 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256, dop=1
  3 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256,
      equal_conds([tp1.c1 = VIEW1.tp2.c1]), other_conds(nil)
  4 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256
  5 - (#keys=1, [VIEW1.tp2.c1]), output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256, is_single, dop=1
  6 - output([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2]), filter(nil), rowset=256,
      access([VIEW1.tp2.__pk_increment], [VIEW1.tp2.c1], [VIEW1.tp2.c2])
  7 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter([tp2.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  8 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256
  9 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256, dop=1
  10 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256
  11 - output([tp2.__pk_increment], [tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      access([tp2.__pk_increment], [tp2.c1], [tp2.c2]), partitions(p[0-1])
  12 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  13 - output([tp1.c1]), filter(nil), rowset=256
  14 - output([tp1.c1]), filter(nil), rowset=256,
      access([tp1.c1]), partitions(p[0-1])

update tp1 left join tp2 on tp1.c1 = tp2.c1 and tp2.c1 in (select /*+no_unnest*/c1 from t1) set tp2.c2 = 10;
EXPLAIN select * from tp2;
Query Plan
====================================================
|ID|OPERATOR               |NAME    |EST. ROWS|COST|
----------------------------------------------------
|0 |PX COORDINATOR         |        |1        |93  |
|1 | EXCHANGE OUT DISTR    |:EX10000|1        |93  |
|2 |  PX PARTITION ITERATOR|        |1        |92  |
|3 |   TABLE SCAN          |tp2     |1        |92  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([INTERNAL_FUNCTION(tp2.c1, tp2.c2)]), filter(nil), rowset=256
  1 - output([INTERNAL_FUNCTION(tp2.c1, tp2.c2)]), filter(nil), rowset=256, dop=1
  2 - output([tp2.c1], [tp2.c2]), filter(nil), rowset=256
  3 - output([tp2.c1], [tp2.c2]), filter(nil), rowset=256,
      access([tp2.c1], [tp2.c2]), partitions(p[0-1])

select * from tp2;
+------+------+
| c1   | c2   |
+------+------+
|    2 |   10 |
|    1 |   10 |
+------+------+

drop table t1;
drop table tp1;
drop table tp2;

set autocommit = 0;


*********************push down outer join on condition end**************

************************pullup select expr in query with offset begin**********
************************通过调整逻辑算子分配顺序实现,case不移除**********************

set autocommit = 1;

drop table if exists t1, t2;
create table t1 (c1 int, c2 int);
create table t2 (c1 int, c2 int);
EXPLAIN select c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 limit 1 offset 2;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0),
      limit(1), offset(2)
  2 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 limit 1 offset 2;
+------+------+--------------------------------------+
| c1   | c2   | (select c1 from t2 where c2 = t1.c1) |
+------+------+--------------------------------------+
|    3 |    3 |                                    3 |
+------+------+--------------------------------------+
EXPLAIN select /*+no_rewrite*/ c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 limit 1 offset 2;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0),
      limit(1), offset(2)
  2 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select /*+no_rewrite*/ c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 limit 1 offset 2;
+------+------+--------------------------------------+
| c1   | c2   | (select c1 from t2 where c2 = t1.c1) |
+------+------+--------------------------------------+
|    3 |    3 |                                    3 |
+------+------+--------------------------------------+
EXPLAIN select c1, c2, c1 + c2, c2 + (select c1 from t2 where c2 = t1.c1) from t1 limit 1 offset 2;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c1 + t1.c2], [t1.c2 + subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0),
      limit(1), offset(2)
  2 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select c1, c2, c1 + c2, c2 + (select c1 from t2 where c2 = t1.c1) from t1 limit 1 offset 2;
+------+------+---------+-------------------------------------------+
| c1   | c2   | c1 + c2 | c2 + (select c1 from t2 where c2 = t1.c1) |
+------+------+---------+-------------------------------------------+
|    3 |    3 |       6 |                                         6 |
+------+------+---------+-------------------------------------------+
EXPLAIN select /*+no_rewrite*/ c1, c2, c1 + c2, c2 + (select c1 from t2 where c2 = t1.c1) from t1 limit 1 offset 2;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [t1.c1 + t1.c2], [t1.c2 + subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0),
      limit(1), offset(2)
  2 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select /*+no_rewrite*/ c1, c2, c1 + c2, c2 + (select c1 from t2 where c2 = t1.c1) from t1 limit 1 offset 2;
+------+------+---------+-------------------------------------------+
| c1   | c2   | c1 + c2 | c2 + (select c1 from t2 where c2 = t1.c1) |
+------+------+---------+-------------------------------------------+
|    3 |    3 |       6 |                                         6 |
+------+------+---------+-------------------------------------------+

EXPLAIN select c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 order by 3 limit 10 offset 2;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |LIMIT           |    |3        |273 |
|1 | TOP-N SORT     |    |5        |273 |
|2 |  SUBPLAN FILTER|    |5        |273 |
|3 |   TABLE SCAN   |t1  |5        |46  |
|4 |   TABLE SCAN   |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256, limit(10), offset(2)
  1 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256, sort_keys([subquery(1), ASC]), topn(10 + 2)
  2 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 order by 3 limit 10 offset 2;
+------+------+--------------------------------------+
| c1   | c2   | (select c1 from t2 where c2 = t1.c1) |
+------+------+--------------------------------------+
|    1 |    1 |                                    1 |
|    2 |    2 |                                    2 |
|    3 |    3 |                                    3 |
+------+------+--------------------------------------+
EXPLAIN select /*+no_rewrite*/ c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 order by 3 limit 10 offset 2;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |LIMIT           |    |3        |273 |
|1 | TOP-N SORT     |    |5        |273 |
|2 |  SUBPLAN FILTER|    |5        |273 |
|3 |   TABLE SCAN   |t1  |5        |46  |
|4 |   TABLE SCAN   |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256, limit(10), offset(2)
  1 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256, sort_keys([subquery(1), ASC]), topn(10 + 2)
  2 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select /*+no_rewrite*/ c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 order by 3 limit 10 offset 2;
+------+------+--------------------------------------+
| c1   | c2   | (select c1 from t2 where c2 = t1.c1) |
+------+------+--------------------------------------+
|    1 |    1 |                                    1 |
|    2 |    2 |                                    2 |
|    3 |    3 |                                    3 |
+------+------+--------------------------------------+
EXPLAIN select c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 group by c1, c2 limit 10 offset 2;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |3        |183 |
|1 | LIMIT         |    |3        |47  |
|2 |  HASH GROUP BY|    |5        |47  |
|3 |   TABLE SCAN  |t1  |5        |46  |
|4 | TABLE SCAN    |t2  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, limit(10), offset(2)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 group by c1, c2 limit 10 offset 2;
+------+------+--------------------------------------+
| c1   | c2   | (select c1 from t2 where c2 = t1.c1) |
+------+------+--------------------------------------+
|    3 |    3 |                                    3 |
|    4 |    4 |                                 NULL |
|    5 |    5 |                                 NULL |
+------+------+--------------------------------------+
EXPLAIN select /*+no_rewrite*/ c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 group by c1, c2 limit 10 offset 2;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |3        |183 |
|1 | LIMIT         |    |3        |47  |
|2 |  HASH GROUP BY|    |5        |47  |
|3 |   TABLE SCAN  |t1  |5        |46  |
|4 | TABLE SCAN    |t2  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, limit(10), offset(2)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      group([t1.c1], [t1.c2]), agg_func(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  4 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select /*+no_rewrite*/ c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 group by c1, c2 limit 10 offset 2;
+------+------+--------------------------------------+
| c1   | c2   | (select c1 from t2 where c2 = t1.c1) |
+------+------+--------------------------------------+
|    3 |    3 |                                    3 |
|    4 |    4 |                                 NULL |
|    5 |    5 |                                 NULL |
+------+------+--------------------------------------+
EXPLAIN select c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 group by c1, c2 with rollup limit 10 offset 2;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |SUBPLAN FILTER  |    |3        |183 |
|1 | LIMIT          |    |3        |46  |
|2 |  MERGE GROUP BY|    |5        |46  |
|3 |   SORT         |    |5        |46  |
|4 |    TABLE SCAN  |t1  |5        |46  |
|5 | TABLE SCAN     |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, limit(10), offset(2)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1], [t1.c2]), agg_func(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 group by c1, c2 with rollup limit 10 offset 2;
+------+------+--------------------------------------+
| c1   | c2   | (select c1 from t2 where c2 = t1.c1) |
+------+------+--------------------------------------+
|    2 |    2 |                                    2 |
|    2 | NULL |                                    2 |
|    3 |    3 |                                    3 |
|    3 | NULL |                                    3 |
|    4 |    4 |                                 NULL |
|    4 | NULL |                                 NULL |
|    5 |    5 |                                 NULL |
|    5 | NULL |                                 NULL |
| NULL | NULL |                                 NULL |
+------+------+--------------------------------------+
EXPLAIN select /*+no_rewrite*/ c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 group by c1, c2 with rollup limit 10 offset 2;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |SUBPLAN FILTER  |    |3        |183 |
|1 | LIMIT          |    |3        |46  |
|2 |  MERGE GROUP BY|    |5        |46  |
|3 |   SORT         |    |5        |46  |
|4 |    TABLE SCAN  |t1  |5        |46  |
|5 | TABLE SCAN     |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2], [subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, limit(10), offset(2)
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1], [t1.c2]), agg_func(nil)
  3 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  4 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  5 - output([t2.c1]), filter([t2.c2 = ?]), rowset=256,
      access([t2.c2], [t2.c1]), partitions(p0)

select /*+no_rewrite*/ c1, c2, (select c1 from t2 where c2 = t1.c1) from t1 group by c1, c2 with rollup limit 10 offset 2;
+------+------+--------------------------------------+
| c1   | c2   | (select c1 from t2 where c2 = t1.c1) |
+------+------+--------------------------------------+
|    2 |    2 |                                    2 |
|    2 | NULL |                                    2 |
|    3 |    3 |                                    3 |
|    3 | NULL |                                    3 |
|    4 |    4 |                                 NULL |
|    4 | NULL |                                 NULL |
|    5 |    5 |                                 NULL |
|    5 | NULL |                                 NULL |
| NULL | NULL |                                 NULL |
+------+------+--------------------------------------+

## 目前存在bug: https://work.aone.alibaba-inc.com/issue/31341869
##select /*+no_rewrite*/ c1, (select max(c2) from t2) a from t1 order by (select c1 from t2 where c2 = a) + 1;
##select /*+no_rewrite*/ c1, (select max(c2) from t2) a from t1 group  by (select c1 from t2 where c2 = a) + 1;
##select /*+no_rewrite*/ c1, (select max(c2) from t2) a from t1 order by (select c1 from t2 where c2 in (select c1 from t1 where c2 = a)) + 1;
##select /*+no_rewrite*/ c1, (select c1 from t2 where c2 = max(t1.c1) over () limit 1) a from t1 group  by (select c1 from t2 where c2 = a);
##select /*+no_rewrite*/ c1, (select c2 from t2 zt2 where c1 = zt1.c1) a from t1 zt1 order by (select /*+no_rewrite*/ c1 from t2 zt3 where c2 = a);
##select /*+no_rewrite*/ c1, (select c2 from t2 zt2 where c1 = zt1.c1) a from t1 zt1 order by (select /*+no_rewrite*/ c1 from t2 zt3 where c2 = a) desc;
##select /*+no_rewrite*/ zt1.c1, (select zt2.c2 from t2 zt2 where zt2.c1 = zt1.c1) a from t1 zt1 order by (select /*+no_rewrite*/ zt3.c1 from t2 zt3 where zt3.c2 = a);
##select /*+no_rewrite*/ (select c1 from t2 where t1.c1 = c2 limit 1) a from t1 group by a order by a;
drop table t1;
drop table t2;

set autocommit = 0;


************************pullup select expr in query with offset end**********
DROP TABLE IF EXISTS B, C, BB, CC;
CREATE TABLE B (
col_varchar_10_key varchar(10),
pk int,
col_varchar_20_key varchar(20),
col_varchar varchar (1),
col_varchar_10 varchar(10),
col_int int,
col_varchar_20 varchar(20),
col_varchar_key varchar (1),
col_int_key int,
/*Indices*/
key idx5(pk, col_varchar_10_key ),
primary key (pk) ,
key idx7(pk, col_varchar_20_key ),
key idx3(pk, col_varchar_key ),
key idx1(pk, col_int_key )) ;

CREATE TABLE C (
col_varchar_10_key varchar(10),
col_varchar_10 varchar(10),
col_int_key int,
col_varchar_20_key varchar(20),
col_varchar_key varchar (1),
pk int,
col_int int,
col_varchar_20 varchar(20),
col_varchar varchar (1),
/*Indices*/
key idx5(pk, col_varchar_10_key ),
key idx1(pk, col_int_key ),
key idx7(pk, col_varchar_20_key ),
key idx3(pk, col_varchar_key ),
primary key (pk) ) ;

CREATE TABLE BB (
col_varchar_20_key varchar(20),
pk int,
col_varchar_10 varchar(10),
col_varchar_key varchar (1),
col_varchar_10_key varchar(10),
col_int_key int,
col_varchar varchar (1),
col_int int,
col_varchar_20 varchar(20),
/*Indices*/
key idx7(pk, col_varchar_20_key ),
primary key (pk) ,
key idx3(pk, col_varchar_key ),
key idx5(pk, col_varchar_10_key ),
key idx1(pk, col_int_key )) ;

CREATE TABLE CC (
col_varchar_10 varchar(10),
col_varchar varchar (1),
col_int int,
col_varchar_key varchar (1),
pk int,
col_varchar_10_key varchar(10),
col_varchar_20 varchar(20),
col_int_key int,
col_varchar_20_key varchar(20),
/*Indices*/
key idx3(pk, col_varchar_key ),
primary key (pk) ,
key idx5(pk, col_varchar_10_key ),
key idx1(pk, col_int_key ),
key idx7(pk, col_varchar_20_key )) ;
EXPLAIN SELECT table1 . col_int_key AS field1,
       table1 . col_varchar_20_key AS field2,
       MAX(table1 . `col_varchar`) AS field3,
       table2 . `col_int_key` AS field4,

  (SELECT DISTINCT SUM(SUBQUERY1_t1 . `pk`) AS SUBQUERY1_field1
   FROM C AS SUBQUERY1_t1) AS field5,
       CONCAT (table1 . `col_varchar_20`,
               table1 . `col_varchar_20_key`) AS field6,
              table1 . `col_varchar_20` AS field7,
              table2 . col_varchar_10_key AS field8,
              table1 . `col_int` AS field9,
              table1 . col_varchar_20_key AS field10,

  (SELECT MAX(SUBQUERY2_t2 . `pk`) AS SUBQUERY2_field1
   FROM (BB AS SUBQUERY2_t1
         LEFT OUTER JOIN C AS SUBQUERY2_t2 ON (SUBQUERY2_t2 . `col_varchar_key` = SUBQUERY2_t1 . `col_varchar`))) AS field11,
              MIN(table1 . `col_int`) AS field12,
              table1 . col_varchar_10_key AS field13
FROM (CC AS table1
      LEFT  JOIN ((B AS table2
                   INNER JOIN CC AS table3 ON (table3 . `col_varchar_key` = table2 . `col_varchar_10_key`))) ON (table3 . `pk` = table2 . `col_int_key`))
WHERE (table1 . `col_varchar_10` IN
         (SELECT SUBQUERY3_t1 . `col_varchar_20` AS SUBQUERY3_field1
          FROM CC AS SUBQUERY3_t1
          GROUP BY SUBQUERY3_field1))
  AND (table1 . `col_varchar_key` IN ('a')
       OR table1 . `col_varchar_key` <> 'g')
  AND table1 . `col_varchar` IS NULL
GROUP BY field1,
         field2,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field13
HAVING field6 >= 'bx'
ORDER BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field12,
         field13
LIMIT 100;
Query Plan
=============================================================================
|ID|OPERATOR                              |NAME              |EST. ROWS|COST|
-----------------------------------------------------------------------------
|0 |TOP-N SORT                            |                  |0        |281 |
|1 | MERGE GROUP BY                       |                  |0        |281 |
|2 |  SORT                                |                  |0        |281 |
|3 |   NESTED-LOOP JOIN CARTESIAN         |                  |0        |281 |
|4 |    NESTED-LOOP JOIN CARTESIAN        |                  |0        |190 |
|5 |     HASH JOIN                        |                  |0        |144 |
|6 |      NESTED-LOOP OUTER JOIN CARTESIAN|                  |0        |99  |
|7 |       TABLE SCAN                     |table1            |0        |46  |
|8 |       MATERIAL                       |                  |1        |53  |
|9 |        NESTED-LOOP JOIN              |                  |1        |53  |
|10|         TABLE SCAN                   |table2            |1        |46  |
|11|         DISTRIBUTED TABLE GET        |table3            |1        |7   |
|12|      SUBPLAN SCAN                    |VIEW1             |1        |46  |
|13|       HASH GROUP BY                  |                  |1        |46  |
|14|        TABLE SCAN                    |SUBQUERY3_t1      |1        |46  |
|15|     MATERIAL                         |                  |1        |46  |
|16|      SUBPLAN SCAN                    |VIEW2             |1        |46  |
|17|       SCALAR GROUP BY                |                  |1        |46  |
|18|        TABLE SCAN                    |SUBQUERY1_t1(idx5)|1        |46  |
|19|    MATERIAL                          |                  |1        |92  |
|20|     SUBPLAN SCAN                     |VIEW3             |1        |92  |
|21|      SCALAR GROUP BY                 |                  |1        |92  |
|22|       HASH OUTER JOIN                |                  |1        |92  |
|23|        TABLE SCAN                    |SUBQUERY2_t1      |1        |46  |
|24|        TABLE SCAN                    |SUBQUERY2_t2(idx3)|1        |46  |
=============================================================================

Outputs & filters:
-------------------------------------
  0 - output([table1.col_int_key], [table1.col_varchar_20_key], [T_FUN_MAX(table1.col_varchar)], [table2.col_int_key], [VIEW2.SUBQUERY1_field1], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_20_key], [VIEW3.SUBQUERY2_field1], [T_FUN_MIN(table1.col_int)], [table1.col_varchar_10_key]), filter(nil), rowset=256, sort_keys([table1.col_int_key, ASC], [table1.col_varchar_20_key, ASC], [T_FUN_MAX(table1.col_varchar), ASC], [table2.col_int_key, ASC], [VIEW2.SUBQUERY1_field1, ASC], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key), ASC], [table1.col_varchar_20, ASC], [table2.col_varchar_10_key, ASC], [table1.col_int, ASC], [VIEW3.SUBQUERY2_field1, ASC], [T_FUN_MIN(table1.col_int), ASC], [table1.col_varchar_10_key, ASC]), topn(100), prefix_pos(2)
  1 - output([table1.col_int_key], [table1.col_varchar_20_key], [T_FUN_MAX(table1.col_varchar)], [table2.col_int_key], [VIEW2.SUBQUERY1_field1], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [VIEW3.SUBQUERY2_field1], [T_FUN_MIN(table1.col_int)], [table1.col_varchar_10_key]), filter(nil), rowset=256,
      group([table1.col_int_key], [table1.col_varchar_20_key], [VIEW2.SUBQUERY1_field1], [VIEW3.SUBQUERY2_field1], [table2.col_int_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_10_key]), agg_func([T_FUN_MAX(table1.col_varchar)], [T_FUN_MIN(table1.col_int)])
  2 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [VIEW2.SUBQUERY1_field1], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [VIEW3.SUBQUERY2_field1], [table1.col_varchar_10_key], [table1.col_varchar]), filter(nil), rowset=256, sort_keys([table1.col_int_key, ASC], [table1.col_varchar_20_key, ASC], [VIEW2.SUBQUERY1_field1, ASC], [VIEW3.SUBQUERY2_field1, ASC], [table2.col_int_key, ASC], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key), ASC], [table1.col_varchar_20, ASC], [table2.col_varchar_10_key, ASC], [table1.col_int, ASC], [table1.col_varchar_10_key, ASC])
  3 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [VIEW2.SUBQUERY1_field1], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [VIEW3.SUBQUERY2_field1], [table1.col_varchar_10_key], [table1.col_varchar]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  4 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [VIEW2.SUBQUERY1_field1], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_10_key], [table1.col_varchar]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  5 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_10_key], [table1.col_varchar]), filter(nil), rowset=256,
      equal_conds([table1.col_varchar_10 = VIEW1.SUBQUERY3_field1]), other_conds(nil)
  6 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_10_key], [table1.col_varchar_10], [table1.col_varchar]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  7 - output([table1.col_varchar_10], [table1.col_varchar], [table1.col_int_key], [table1.col_varchar_20_key], [table1.col_varchar_20], [table1.col_int], [table1.col_varchar_10_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)]), filter([(T_OP_IS, table1.col_varchar, NULL, 0)], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key) >= 'bx'], [table1.col_varchar_key = 'a' OR table1.col_varchar_key != 'g']), rowset=256,
      access([table1.col_varchar_10], [table1.col_varchar_key], [table1.col_varchar], [table1.col_int_key], [table1.col_varchar_20_key], [table1.col_varchar_20], [table1.col_int], [table1.col_varchar_10_key]), partitions(p0)
  8 - output([table2.col_int_key], [table2.col_varchar_10_key]), filter(nil), rowset=256
  9 - output([table2.col_int_key], [table2.col_varchar_10_key]), filter(nil), rowset=256,
      conds(nil), nl_params_([table2.col_int_key], [table2.col_varchar_10_key])
  10 - output([table2.col_varchar_10_key], [table2.col_int_key]), filter(nil), rowset=256,
      access([table2.col_varchar_10_key], [table2.col_int_key]), partitions(p0)
  11 - output(nil), filter([table3.col_varchar_key = ?]), rowset=256,
      access([table3.col_varchar_key]), partitions(p0)
  12 - output([VIEW1.SUBQUERY3_field1]), filter(nil), rowset=256,
      access([VIEW1.SUBQUERY3_field1])
  13 - output([SUBQUERY3_t1.col_varchar_20]), filter(nil), rowset=256,
      group([SUBQUERY3_t1.col_varchar_20]), agg_func(nil)
  14 - output([SUBQUERY3_t1.col_varchar_20]), filter(nil), rowset=256,
      access([SUBQUERY3_t1.col_varchar_20]), partitions(p0)
  15 - output([VIEW2.SUBQUERY1_field1]), filter(nil), rowset=256
  16 - output([VIEW2.SUBQUERY1_field1]), filter(nil), rowset=256,
      access([VIEW2.SUBQUERY1_field1])
  17 - output([T_FUN_SUM(SUBQUERY1_t1.pk)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(SUBQUERY1_t1.pk)])
  18 - output([SUBQUERY1_t1.pk]), filter(nil), rowset=256,
      access([SUBQUERY1_t1.pk]), partitions(p0)
  19 - output([VIEW3.SUBQUERY2_field1]), filter(nil), rowset=256
  20 - output([VIEW3.SUBQUERY2_field1]), filter(nil), rowset=256,
      access([VIEW3.SUBQUERY2_field1])
  21 - output([T_FUN_MAX(SUBQUERY2_t2.pk)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(SUBQUERY2_t2.pk)])
  22 - output([SUBQUERY2_t2.pk]), filter(nil), rowset=256,
      equal_conds([SUBQUERY2_t2.col_varchar_key = SUBQUERY2_t1.col_varchar]), other_conds(nil)
  23 - output([SUBQUERY2_t1.col_varchar]), filter(nil), rowset=256,
      access([SUBQUERY2_t1.col_varchar]), partitions(p0)
  24 - output([SUBQUERY2_t2.pk], [SUBQUERY2_t2.col_varchar_key]), filter(nil), rowset=256,
      access([SUBQUERY2_t2.pk], [SUBQUERY2_t2.col_varchar_key]), partitions(p0)

SELECT table1 . col_int_key AS field1,
       table1 . col_varchar_20_key AS field2,
       MAX(table1 . `col_varchar`) AS field3,
       table2 . `col_int_key` AS field4,

  (SELECT DISTINCT SUM(SUBQUERY1_t1 . `pk`) AS SUBQUERY1_field1
   FROM C AS SUBQUERY1_t1) AS field5,
       CONCAT (table1 . `col_varchar_20`,
               table1 . `col_varchar_20_key`) AS field6,
              table1 . `col_varchar_20` AS field7,
              table2 . col_varchar_10_key AS field8,
              table1 . `col_int` AS field9,
              table1 . col_varchar_20_key AS field10,

  (SELECT MAX(SUBQUERY2_t2 . `pk`) AS SUBQUERY2_field1
   FROM (BB AS SUBQUERY2_t1
         LEFT OUTER JOIN C AS SUBQUERY2_t2 ON (SUBQUERY2_t2 . `col_varchar_key` = SUBQUERY2_t1 . `col_varchar`))) AS field11,
              MIN(table1 . `col_int`) AS field12,
              table1 . col_varchar_10_key AS field13
FROM (CC AS table1
      LEFT  JOIN ((B AS table2
                   INNER JOIN CC AS table3 ON (table3 . `col_varchar_key` = table2 . `col_varchar_10_key`))) ON (table3 . `pk` = table2 . `col_int_key`))
WHERE (table1 . `col_varchar_10` IN
         (SELECT SUBQUERY3_t1 . `col_varchar_20` AS SUBQUERY3_field1
          FROM CC AS SUBQUERY3_t1
          GROUP BY SUBQUERY3_field1))
  AND (table1 . `col_varchar_key` IN ('a')
       OR table1 . `col_varchar_key` <> 'g')
  AND table1 . `col_varchar` IS NULL
GROUP BY field1,
         field2,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field13
HAVING field6 >= 'bx'
ORDER BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field12,
         field13
LIMIT 100;
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+
| field1 | field2 | field3 | field4 | field5 | field6 | field7 | field8 | field9 | field10 | field11 | field12 | field13 |
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+
|      5 | w      | NULL   |   NULL |      3 | xw     | x      | NULL   |      2 | w       |       2 |       2 | n       |
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+

EXPLAIN SELECT /*+no_rewrite*/table1 . col_int_key AS field1,
       table1 . col_varchar_20_key AS field2,
       MAX(table1 . `col_varchar`) AS field3,
       table2 . `col_int_key` AS field4,

  (SELECT DISTINCT SUM(SUBQUERY1_t1 . `pk`) AS SUBQUERY1_field1
   FROM C AS SUBQUERY1_t1) AS field5,
       CONCAT (table1 . `col_varchar_20`,
               table1 . `col_varchar_20_key`) AS field6,
              table1 . `col_varchar_20` AS field7,
              table2 . col_varchar_10_key AS field8,
              table1 . `col_int` AS field9,
              table1 . col_varchar_20_key AS field10,

  (SELECT MAX(SUBQUERY2_t2 . `pk`) AS SUBQUERY2_field1
   FROM (BB AS SUBQUERY2_t1
         LEFT OUTER JOIN C AS SUBQUERY2_t2 ON (SUBQUERY2_t2 . `col_varchar_key` = SUBQUERY2_t1 . `col_varchar`))) AS field11,
              MIN(table1 . `col_int`) AS field12,
              table1 . col_varchar_10_key AS field13
FROM (CC AS table1
      LEFT  JOIN ((B AS table2
                   INNER JOIN CC AS table3 ON (table3 . `col_varchar_key` = table2 . `col_varchar_10_key`))) ON (table3 . `pk` = table2 . `col_int_key`))
WHERE (table1 . `col_varchar_10` IN
         (SELECT SUBQUERY3_t1 . `col_varchar_20` AS SUBQUERY3_field1
          FROM CC AS SUBQUERY3_t1
          GROUP BY SUBQUERY3_field1))
  AND (table1 . `col_varchar_key` IN ('a')
       OR table1 . `col_varchar_key` <> 'g')
  AND table1 . `col_varchar` IS NULL
GROUP BY field1,
         field2,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field13
HAVING field6 >= 'bx'
ORDER BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field12,
         field13
LIMIT 100;
Query Plan
============================================================================
|ID|OPERATOR                             |NAME              |EST. ROWS|COST|
----------------------------------------------------------------------------
|0 |TOP-N SORT                           |                  |0        |281 |
|1 | MERGE GROUP BY                      |                  |0        |281 |
|2 |  SORT                               |                  |0        |281 |
|3 |   SUBPLAN FILTER                    |                  |0        |281 |
|4 |    SUBPLAN FILTER                   |                  |0        |144 |
|5 |     NESTED-LOOP OUTER JOIN CARTESIAN|                  |0        |99  |
|6 |      TABLE SCAN                     |table1            |0        |46  |
|7 |      MATERIAL                       |                  |1        |53  |
|8 |       NESTED-LOOP JOIN              |                  |1        |53  |
|9 |        TABLE SCAN                   |table2            |1        |46  |
|10|        DISTRIBUTED TABLE GET        |table3            |1        |7   |
|11|     HASH GROUP BY                   |                  |1        |46  |
|12|      TABLE SCAN                     |SUBQUERY3_t1      |1        |46  |
|13|    SCALAR GROUP BY                  |                  |1        |46  |
|14|     TABLE SCAN                      |SUBQUERY1_t1(idx5)|1        |46  |
|15|    SCALAR GROUP BY                  |                  |1        |92  |
|16|     HASH OUTER JOIN                 |                  |1        |92  |
|17|      TABLE SCAN                     |SUBQUERY2_t1      |1        |46  |
|18|      TABLE SCAN                     |SUBQUERY2_t2(idx3)|1        |46  |
============================================================================

Outputs & filters:
-------------------------------------
  0 - output([table1.col_int_key], [table1.col_varchar_20_key], [T_FUN_MAX(table1.col_varchar)], [table2.col_int_key], [?], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_20_key], [?], [T_FUN_MIN(table1.col_int)], [table1.col_varchar_10_key]), filter(nil), rowset=256, sort_keys([table1.col_int_key, ASC], [table1.col_varchar_20_key, ASC], [T_FUN_MAX(table1.col_varchar), ASC], [table2.col_int_key, ASC], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key), ASC], [table1.col_varchar_20, ASC], [table2.col_varchar_10_key, ASC], [table1.col_int, ASC], [T_FUN_MIN(table1.col_int), ASC], [table1.col_varchar_10_key, ASC]), topn(100), prefix_pos(2)
  1 - output([table1.col_int_key], [table1.col_varchar_20_key], [T_FUN_MAX(table1.col_varchar)], [table2.col_int_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [T_FUN_MIN(table1.col_int)], [table1.col_varchar_10_key], [?], [?]), filter([CONCAT(table1.col_varchar_20, table1.col_varchar_20_key) >= 'bx']), rowset=256,
      group([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_20_key], [table1.col_varchar_10_key]), agg_func([T_FUN_MAX(table1.col_varchar)], [T_FUN_MIN(table1.col_int)])
  2 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key)], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_10_key], [?], [?], [table1.col_varchar]), filter(nil), rowset=256, sort_keys([table1.col_int_key, ASC], [table1.col_varchar_20_key, ASC], [table2.col_int_key, ASC], [CONCAT(table1.col_varchar_20, table1.col_varchar_20_key), ASC], [table1.col_varchar_20, ASC], [table2.col_varchar_10_key, ASC], [table1.col_int, ASC], [table1.col_varchar_20_key, ASC], [table1.col_varchar_10_key, ASC])
  3 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_10_key], [?], [?], [table1.col_varchar]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)], [subquery(2)]), init_plan_idxs_(nil)
  4 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_10_key], [table1.col_varchar]), filter([table1.col_varchar_10 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  5 - output([table1.col_int_key], [table1.col_varchar_20_key], [table2.col_int_key], [table1.col_varchar_20], [table2.col_varchar_10_key], [table1.col_int], [table1.col_varchar_10_key], [table1.col_varchar_10], [table1.col_varchar]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  6 - output([table1.col_varchar_10], [table1.col_varchar], [table1.col_int_key], [table1.col_varchar_20_key], [table1.col_varchar_20], [table1.col_int], [table1.col_varchar_10_key]), filter([(T_OP_IS, table1.col_varchar, NULL, 0)], [table1.col_varchar_key = 'a' OR table1.col_varchar_key != 'g']), rowset=256,
      access([table1.col_varchar_10], [table1.col_varchar_key], [table1.col_varchar], [table1.col_int_key], [table1.col_varchar_20_key], [table1.col_varchar_20], [table1.col_int], [table1.col_varchar_10_key]), partitions(p0)
  7 - output([table2.col_int_key], [table2.col_varchar_10_key]), filter(nil), rowset=256
  8 - output([table2.col_int_key], [table2.col_varchar_10_key]), filter(nil), rowset=256,
      conds(nil), nl_params_([table2.col_int_key], [table2.col_varchar_10_key])
  9 - output([table2.col_varchar_10_key], [table2.col_int_key]), filter(nil), rowset=256,
      access([table2.col_varchar_10_key], [table2.col_int_key]), partitions(p0)
  10 - output(nil), filter([table3.col_varchar_key = ?]), rowset=256,
      access([table3.col_varchar_key]), partitions(p0)
  11 - output([SUBQUERY3_t1.col_varchar_20]), filter(nil), rowset=256,
      group([SUBQUERY3_t1.col_varchar_20]), agg_func(nil)
  12 - output([SUBQUERY3_t1.col_varchar_20]), filter(nil), rowset=256,
      access([SUBQUERY3_t1.col_varchar_20]), partitions(p0)
  13 - output([T_FUN_SUM(SUBQUERY1_t1.pk)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(SUBQUERY1_t1.pk)])
  14 - output([SUBQUERY1_t1.pk]), filter(nil), rowset=256,
      access([SUBQUERY1_t1.pk]), partitions(p0)
  15 - output([T_FUN_MAX(SUBQUERY2_t2.pk)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(SUBQUERY2_t2.pk)])
  16 - output([SUBQUERY2_t2.pk]), filter(nil), rowset=256,
      equal_conds([SUBQUERY2_t2.col_varchar_key = SUBQUERY2_t1.col_varchar]), other_conds(nil)
  17 - output([SUBQUERY2_t1.col_varchar]), filter(nil), rowset=256,
      access([SUBQUERY2_t1.col_varchar]), partitions(p0)
  18 - output([SUBQUERY2_t2.pk], [SUBQUERY2_t2.col_varchar_key]), filter(nil), rowset=256,
      access([SUBQUERY2_t2.pk], [SUBQUERY2_t2.col_varchar_key]), partitions(p0)

SELECT /*+no_rewrite*/table1 . col_int_key AS field1,
       table1 . col_varchar_20_key AS field2,
       MAX(table1 . `col_varchar`) AS field3,
       table2 . `col_int_key` AS field4,

  (SELECT DISTINCT SUM(SUBQUERY1_t1 . `pk`) AS SUBQUERY1_field1
   FROM C AS SUBQUERY1_t1) AS field5,
       CONCAT (table1 . `col_varchar_20`,
               table1 . `col_varchar_20_key`) AS field6,
              table1 . `col_varchar_20` AS field7,
              table2 . col_varchar_10_key AS field8,
              table1 . `col_int` AS field9,
              table1 . col_varchar_20_key AS field10,

  (SELECT MAX(SUBQUERY2_t2 . `pk`) AS SUBQUERY2_field1
   FROM (BB AS SUBQUERY2_t1
         LEFT OUTER JOIN C AS SUBQUERY2_t2 ON (SUBQUERY2_t2 . `col_varchar_key` = SUBQUERY2_t1 . `col_varchar`))) AS field11,
              MIN(table1 . `col_int`) AS field12,
              table1 . col_varchar_10_key AS field13
FROM (CC AS table1
      LEFT  JOIN ((B AS table2
                   INNER JOIN CC AS table3 ON (table3 . `col_varchar_key` = table2 . `col_varchar_10_key`))) ON (table3 . `pk` = table2 . `col_int_key`))
WHERE (table1 . `col_varchar_10` IN
         (SELECT SUBQUERY3_t1 . `col_varchar_20` AS SUBQUERY3_field1
          FROM CC AS SUBQUERY3_t1
          GROUP BY SUBQUERY3_field1))
  AND (table1 . `col_varchar_key` IN ('a')
       OR table1 . `col_varchar_key` <> 'g')
  AND table1 . `col_varchar` IS NULL
GROUP BY field1,
         field2,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field13
HAVING field6 >= 'bx'
ORDER BY field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8,
         field9,
         field10,
         field11,
         field12,
         field13
LIMIT 100;
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+
| field1 | field2 | field3 | field4 | field5 | field6 | field7 | field8 | field9 | field10 | field11 | field12 | field13 |
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+
|      5 | w      | NULL   |   NULL |      3 | xw     | x      | NULL   |      2 | w       |       2 |       2 | n       |
+--------+--------+--------+--------+--------+--------+--------+--------+--------+---------+---------+---------+---------+


*********************convert count(const) to count(*) or 0 *******************

drop table if exists t1;
create table t1(c1 int, c2 int ,c3 int);
EXPLAIN select count(distinct 1, null) from t1 group by c1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |46  |
|1 | SORT         |    |1        |46  |
|2 |  TABLE SCAN  |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(distinct 1, NULL)]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_COUNT(distinct 1, NULL)])
  1 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC])
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select count(distinct 1, null) from t1 group by c1;
+-------------------------+
| count(distinct 1, null) |
+-------------------------+
|                       0 |
|                       0 |
|                       0 |
+-------------------------+
EXPLAIN select /*+no_rewrite*/ count(distinct 1, null) from t1 group by c1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |46  |
|1 | SORT         |    |1        |46  |
|2 |  TABLE SCAN  |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(distinct 1, NULL)]), filter(nil), rowset=256,
      group([t1.c1]), agg_func([T_FUN_COUNT(distinct 1, NULL)])
  1 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC])
  2 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ count(distinct 1, null) from t1 group by c1;
+-------------------------+
| count(distinct 1, null) |
+-------------------------+
|                       0 |
|                       0 |
|                       0 |
+-------------------------+

EXPLAIN select count(distinct 1, null) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(distinct 1, NULL)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT(distinct 1, NULL)])
  1 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)

select count(distinct 1, null) from t1;
+-------------------------+
| count(distinct 1, null) |
+-------------------------+
|                       0 |
+-------------------------+
EXPLAIN select /*+no_rewrite*/ count(distinct 1, null) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(distinct 1, NULL)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT(distinct 1, NULL)])
  1 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)

select /*+no_rewrite*/ count(distinct 1, null) from t1;
+-------------------------+
| count(distinct 1, null) |
+-------------------------+
|                       0 |
+-------------------------+

EXPLAIN select count(distinct 1, null);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |1   |
|1 | EXPRESSION    |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(1, NULL)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT(1, NULL)])
  1 - output([1]), filter(nil)
      values({1})

select count(distinct 1, null);
+-------------------------+
| count(distinct 1, null) |
+-------------------------+
|                       0 |
+-------------------------+
EXPLAIN select /*+no_rewrite*/ count(distinct 1, null);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |1   |
|1 | EXPRESSION    |    |1        |1   |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_COUNT(distinct 1, NULL)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_COUNT(distinct 1, NULL)])
  1 - output([1]), filter(nil)
      values({1})

select /*+no_rewrite*/ count(distinct 1, null);
+-------------------------+
| count(distinct 1, null) |
+-------------------------+
|                       0 |
+-------------------------+

drop table t1;


*********************convert count(const) to count(*) or 0 *******************

##强化order by消除:https://work.aone.alibaba-inc.com/issue/23383677
drop table if exists t1, t2 ,t3;
create table t1(a int, b int, c int);
create table t2(a int, b int, c int);
create table t3(a int, b int, c int);
create table t_temp(a int, b int, c int);
create table t_temp_join(a int, b int, c int, d int, e int, f int);

set autocommit = 0;

##test basic view stmt ==> remove order by
EXPLAIN select a, b from (select a, b from t1 order by a) group by a, b;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |46  |
|1 | TABLE SCAN  |t1  |1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      group([t1.a], [t1.b]), agg_func(nil)
  1 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      access([t1.a], [t1.b]), partitions(p0)

select a, b from (select a, b from t1 order by a) group by a, b;
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
+------+------+
EXPLAIN select /*+no_rewrite*/a,b from (select * from t1 order by a) group by a, b;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH GROUP BY|               |1        |46  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b]), filter(nil), rowset=256,
      group([.a], [.b]), agg_func(nil)
  1 - output([.a], [.b]), filter(nil), rowset=256,
      access([.a], [.b])
  2 - output([t1.a], [t1.b]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      access([t1.a], [t1.b]), partitions(p0)

select /*+no_rewrite*/a,b from (select * from t1 order by a) group by a, b;
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    4 |    4 |
+------+------+
EXPLAIN insert into t_temp select * from (select * from t1 order by a) group by a, b;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |INSERT         |               |1        |57  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW2|1        |46  |
|2 |  HASH GROUP BY|               |1        |46  |
|3 |   TABLE SCAN  |t1             |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.c)])
  1 - output([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      group([t1.a], [t1.b]), agg_func(nil)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert into t_temp select * from (select * from t1 order by a) group by a, b;
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
|    1 |    1 |    1 |
|    2 |    2 |    2 |
|    3 |    3 |    3 |
|    4 |    4 |    4 |
+------+------+------+
rollback;
EXPLAIN insert /*+NO_REWRITE*/into t_temp select * from (select * from t1 order by a) group by a, b;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |INSERT         |               |1        |57  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW2|1        |46  |
|2 |  HASH GROUP BY|               |1        |46  |
|3 |   TABLE SCAN  |t1             |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.c)])
  1 - output([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      group([t1.a], [t1.b]), agg_func(nil)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert /*+NO_REWRITE*/into t_temp select * from (select * from t1 order by a) group by a, b;
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN update t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a);
Query Plan
================================================
|ID|OPERATOR             |NAME  |EST. ROWS|COST|
------------------------------------------------
|0 |UPDATE               |      |1        |123 |
|1 | HASH RIGHT SEMI JOIN|      |1        |91  |
|2 |  TABLE SCAN         |t1    |1        |46  |
|3 |  TABLE SCAN         |t_temp|1        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]),
      update([t_temp.b=column_conv(INT,PS:(11,0),NULL,cast(t_temp.b + 100, INT(-1, 0)))])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      equal_conds([t_temp.b = t1.a]), other_conds(nil)
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  3 - output([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), partitions(p0)

update t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN update /*+no_rewrite*/t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a);
Query Plan
==========================================
|ID|OPERATOR       |NAME  |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE         |      |1        |119 |
|1 | SUBPLAN FILTER|      |1        |91  |
|2 |  TABLE SCAN   |t_temp|1        |46  |
|3 |  SORT         |      |1        |46  |
|4 |   TABLE SCAN  |t1    |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]),
      update([t_temp.b=column_conv(INT,PS:(11,0),NULL,cast(t_temp.b + 100, INT(-1, 0)))])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter([t_temp.b = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), partitions(p0)
  3 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  4 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

update /*+no_rewrite*/t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN delete from t_temp where not exists (select null from t1 where t1.a = t_temp.a order by a);
Query Plan
================================================
|ID|OPERATOR             |NAME  |EST. ROWS|COST|
------------------------------------------------
|0 |DELETE               |      |1        |98  |
|1 | HASH RIGHT ANTI JOIN|      |1        |91  |
|2 |  TABLE SCAN         |t1    |1        |46  |
|3 |  TABLE SCAN         |t_temp|1        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      equal_conds([t1.a = t_temp.a]), other_conds(nil)
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  3 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

delete from t_temp where not exists (select null from t1 where t1.a = t_temp.a order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN delete /*+no_rewrite*/from t_temp where not exists (select null from t1 where t1.a = t_temp.a order by t_temp.a);
Query Plan
==========================================
|ID|OPERATOR       |NAME  |EST. ROWS|COST|
------------------------------------------
|0 |DELETE         |      |1        |100 |
|1 | SUBPLAN FILTER|      |1        |91  |
|2 |  TABLE SCAN   |t_temp|1        |46  |
|3 |  TABLE SCAN   |t1    |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter([(T_OP_NOT_EXISTS, subquery(1))]), rowset=256,
      exec_params_([t_temp.a]), onetime_exprs_(nil), init_plan_idxs_(nil)
  2 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)
  3 - output([NULL]), filter([t1.a = ?]), rowset=256,
      access([t1.a]), partitions(p0)

delete /*+no_rewrite*/from t_temp where not exists (select null from t1 where t1.a = t_temp.a order by t_temp.a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;

EXPLAIN select a, b from (select a, b from t1 order by a) group by a, b limit 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |LIMIT         |    |1        |46  |
|1 | HASH GROUP BY|    |1        |46  |
|2 |  TABLE SCAN  |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b]), filter(nil), rowset=256, limit(1), offset(nil)
  1 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      group([t1.a], [t1.b]), agg_func(nil)
  2 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      access([t1.a], [t1.b]), partitions(p0)

select a, b from (select a, b from t1 order by a) group by a, b limit 1;
+------+------+
| a    | b    |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/ a, b from (select a, b from t1 order by a) group by a, b limit 1;
Query Plan
==================================================
|ID|OPERATOR      |NAME           |EST. ROWS|COST|
--------------------------------------------------
|0 |LIMIT         |               |1        |46  |
|1 | HASH GROUP BY|               |1        |46  |
|2 |  SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|3 |   SORT       |               |1        |46  |
|4 |    TABLE SCAN|t1             |1        |46  |
==================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b]), filter(nil), rowset=256, limit(1), offset(nil)
  1 - output([.a], [.b]), filter(nil), rowset=256,
      group([.a], [.b]), agg_func(nil)
  2 - output([.a], [.b]), filter(nil), rowset=256,
      access([.a], [.b])
  3 - output([t1.a], [t1.b]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  4 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      access([t1.a], [t1.b]), partitions(p0)

select /*+no_rewrite*/ a, b from (select a, b from t1 order by a) group by a, b limit 1;
+------+------+
| a    | b    |
+------+------+
+------+------+

EXPLAIN select a, b from (select a, b from t1 order by a, (select a from t3)) group by a, b;
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |HASH GROUP BY   |               |1        |91  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |91  |
|2 |  SUBPLAN FILTER|               |1        |91  |
|3 |   TABLE SCAN   |t1             |1        |46  |
|4 |   TABLE SCAN   |t3             |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b]), filter(nil), rowset=256,
      group([.a], [.b]), agg_func(nil)
  1 - output([.a], [.b]), filter(nil), rowset=256,
      access([.a], [.b])
  2 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      access([t1.a], [t1.b]), partitions(p0)
  4 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select a, b from (select a, b from t1 order by a, (select a from t3)) group by a, b;
+------+------+
| a    | b    |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/ a, b from (select a, b from t1 order by a, (select a from t3)) group by a, b;
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |HASH GROUP BY    |               |1        |91  |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |91  |
|2 |  SORT           |               |1        |91  |
|3 |   SUBPLAN FILTER|               |1        |91  |
|4 |    TABLE SCAN   |t1             |1        |46  |
|5 |    TABLE SCAN   |t3             |1        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b]), filter(nil), rowset=256,
      group([.a], [.b]), agg_func(nil)
  1 - output([.a], [.b]), filter(nil), rowset=256,
      access([.a], [.b])
  2 - output([t1.a], [t1.b]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([t1.a], [t1.b]), filter(nil), rowset=256,
      access([t1.a], [t1.b]), partitions(p0)
  5 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select /*+no_rewrite*/ a, b from (select a, b from t1 order by a, (select a from t3)) group by a, b;
+------+------+
| a    | b    |
+------+------+
+------+------+
EXPLAIN insert into t_temp select * from (select * from t1 order by a, (select a from t3)) group by a, b;
Query Plan
======================================================
|ID|OPERATOR          |NAME           |EST. ROWS|COST|
------------------------------------------------------
|0 |INSERT            |               |1        |102 |
|1 | SUBPLAN SCAN     |ANONYMOUS_VIEW2|1        |91  |
|2 |  HASH GROUP BY   |               |1        |91  |
|3 |   SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |91  |
|4 |    SUBPLAN FILTER|               |1        |91  |
|5 |     TABLE SCAN   |t1             |1        |46  |
|6 |     TABLE SCAN   |t3             |1        |46  |
======================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.c)])
  1 - output([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c])
  2 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      group([.a], [.b]), agg_func(nil)
  3 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  6 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

insert into t_temp select * from (select * from t1 order by a, (select a from t3)) group by a, b;
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN insert /*+NO_REWRITE*/into t_temp select * from (select * from t1 order by a, (select a from t3)) group by a, b;
Query Plan
======================================================
|ID|OPERATOR          |NAME           |EST. ROWS|COST|
------------------------------------------------------
|0 |INSERT            |               |1        |102 |
|1 | SUBPLAN SCAN     |ANONYMOUS_VIEW2|1        |91  |
|2 |  HASH GROUP BY   |               |1        |91  |
|3 |   SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |91  |
|4 |    SUBPLAN FILTER|               |1        |91  |
|5 |     TABLE SCAN   |t1             |1        |46  |
|6 |     TABLE SCAN   |t3             |1        |46  |
======================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.c)])
  1 - output([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c])
  2 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      group([.a], [.b]), agg_func(nil)
  3 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  6 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

insert /*+NO_REWRITE*/into t_temp select * from (select * from t1 order by a, (select a from t3)) group by a, b;
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN update t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a, (select a from t3));
Query Plan
================================================
|ID|OPERATOR             |NAME  |EST. ROWS|COST|
------------------------------------------------
|0 |UPDATE               |      |1        |168 |
|1 | HASH RIGHT SEMI JOIN|      |1        |137 |
|2 |  SUBPLAN SCAN       |VIEW1 |1        |91  |
|3 |   SUBPLAN FILTER    |      |1        |91  |
|4 |    TABLE SCAN       |t1    |1        |46  |
|5 |    TABLE SCAN       |t3    |1        |46  |
|6 |  TABLE SCAN         |t_temp|1        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]),
      update([t_temp.b=column_conv(INT,PS:(11,0),NULL,cast(t_temp.b + 100, INT(-1, 0)))])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      equal_conds([t_temp.b = VIEW1.a]), other_conds(nil)
  2 - output([VIEW1.a]), filter(nil), rowset=256,
      access([VIEW1.a])
  3 - output([t1.a]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  5 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)
  6 - output([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), partitions(p0)

update t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a, (select a from t3));
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN update /*+NO_REWRITE*/t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a, (select a from t3));
Query Plan
============================================
|ID|OPERATOR         |NAME  |EST. ROWS|COST|
--------------------------------------------
|0 |UPDATE           |      |1        |164 |
|1 | SUBPLAN FILTER  |      |1        |137 |
|2 |  TABLE SCAN     |t_temp|1        |46  |
|3 |  SORT           |      |1        |91  |
|4 |   SUBPLAN FILTER|      |1        |91  |
|5 |    TABLE SCAN   |t1    |1        |46  |
|6 |    TABLE SCAN   |t3    |1        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]),
      update([t_temp.b=column_conv(INT,PS:(11,0),NULL,cast(t_temp.b + 100, INT(-1, 0)))])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter([t_temp.b = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), partitions(p0)
  3 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  4 - output([t1.a]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  6 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

update /*+NO_REWRITE*/t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a, (select a from t3));
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN delete from t_temp where t_temp.b in (select a from t1 order by a, (select a from t3));
Query Plan
================================================
|ID|OPERATOR             |NAME  |EST. ROWS|COST|
------------------------------------------------
|0 |DELETE               |      |1        |148 |
|1 | HASH RIGHT SEMI JOIN|      |1        |137 |
|2 |  SUBPLAN SCAN       |VIEW1 |1        |91  |
|3 |   SUBPLAN FILTER    |      |1        |91  |
|4 |    TABLE SCAN       |t1    |1        |46  |
|5 |    TABLE SCAN       |t3    |1        |46  |
|6 |  TABLE SCAN         |t_temp|1        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      equal_conds([t_temp.b = VIEW1.a]), other_conds(nil)
  2 - output([VIEW1.a]), filter(nil), rowset=256,
      access([VIEW1.a])
  3 - output([t1.a]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  5 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)
  6 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

delete from t_temp where t_temp.b in (select a from t1 order by a, (select a from t3));
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN delete /*+NO_REWRITE*/from t_temp where t_temp.b in (select a from t1 order by a, (select a from t3));
Query Plan
============================================
|ID|OPERATOR         |NAME  |EST. ROWS|COST|
--------------------------------------------
|0 |DELETE           |      |1        |146 |
|1 | SUBPLAN FILTER  |      |1        |137 |
|2 |  TABLE SCAN     |t_temp|1        |46  |
|3 |  SORT           |      |1        |91  |
|4 |   SUBPLAN FILTER|      |1        |91  |
|5 |    TABLE SCAN   |t1    |1        |46  |
|6 |    TABLE SCAN   |t3    |1        |46  |
============================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter([t_temp.b = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)
  3 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  4 - output([t1.a]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  5 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  6 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

delete /*+NO_REWRITE*/from t_temp where t_temp.b in (select a from t1 order by a, (select a from t3));
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;

EXPLAIN select sum(a) from (select a from t1 order by a);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SCALAR GROUP BY|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.a)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.a)])
  1 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select sum(a) from (select a from t1 order by a);
+--------+
| sum(a) |
+--------+
|   NULL |
+--------+
EXPLAIN select /*+no_rewrite*/sum(a) from (select a from t1 order by a);
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SCALAR GROUP BY|               |1        |46  |
|1 | SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT         |               |1        |46  |
|3 |   TABLE SCAN  |t1             |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.a)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.a)])
  1 - output([.a]), filter(nil), rowset=256,
      access([.a])
  2 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select /*+no_rewrite*/sum(a) from (select a from t1 order by a);
+--------+
| sum(a) |
+--------+
|   NULL |
+--------+

EXPLAIN select sum(a) from (select a from t1 order by a) limit 1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |LIMIT           |    |1        |46  |
|1 | SCALAR GROUP BY|    |1        |46  |
|2 |  TABLE SCAN    |t1  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(t1.a)]), filter(nil), rowset=256, limit(1), offset(nil)
  1 - output([T_FUN_SUM(t1.a)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(t1.a)])
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select sum(a) from (select a from t1 order by a) limit 1;
+--------+
| sum(a) |
+--------+
|   NULL |
+--------+
EXPLAIN select /*+no_rewrite*/sum(a) from (select a from t1 order by a) limit 1;
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |LIMIT           |               |1        |46  |
|1 | SCALAR GROUP BY|               |1        |46  |
|2 |  SUBPLAN SCAN  |ANONYMOUS_VIEW1|1        |46  |
|3 |   SORT         |               |1        |46  |
|4 |    TABLE SCAN  |t1             |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.a)]), filter(nil), rowset=256, limit(1), offset(nil)
  1 - output([T_FUN_SUM(.a)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.a)])
  2 - output([.a]), filter(nil), rowset=256,
      access([.a])
  3 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  4 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select /*+no_rewrite*/sum(a) from (select a from t1 order by a) limit 1;
+--------+
| sum(a) |
+--------+
|   NULL |
+--------+

EXPLAIN select sum(a) from (select a from t1 order by a, (select a from t3));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SCALAR GROUP BY |               |1        |91  |
|1 | SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |91  |
|2 |  SUBPLAN FILTER|               |1        |91  |
|3 |   TABLE SCAN   |t1             |1        |46  |
|4 |   TABLE SCAN   |t3             |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.a)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.a)])
  1 - output([.a]), filter(nil), rowset=256,
      access([.a])
  2 - output([t1.a]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  4 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select sum(a) from (select a from t1 order by a, (select a from t3));
+--------+
| sum(a) |
+--------+
|   NULL |
+--------+
EXPLAIN select /*+no_rewrite*/sum(a) from (select a from t1 order by a, (select a from t3));
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |SCALAR GROUP BY  |               |1        |91  |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |91  |
|2 |  SORT           |               |1        |91  |
|3 |   SUBPLAN FILTER|               |1        |91  |
|4 |    TABLE SCAN   |t1             |1        |46  |
|5 |    TABLE SCAN   |t3             |1        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_SUM(.a)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(.a)])
  1 - output([.a]), filter(nil), rowset=256,
      access([.a])
  2 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  5 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select /*+no_rewrite*/sum(a) from (select a from t1 order by a, (select a from t3));
+--------+
| sum(a) |
+--------+
|   NULL |
+--------+

EXPLAIN select distinct * from (select * from t1 order by a);
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH DISTINCT|    |1        |46  |
|1 | TABLE SCAN  |t1  |1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      distinct([t1.a], [t1.b], [t1.c])
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select distinct * from (select * from t1 order by a);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/distinct * from (select * from t1 order by a);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH DISTINCT|               |1        |46  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      distinct([.a], [.b], [.c])
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select /*+no_rewrite*/distinct * from (select * from t1 order by a);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

EXPLAIN select distinct * from (select * from t1 order by a) limit 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |LIMIT         |    |1        |46  |
|1 | HASH DISTINCT|    |1        |46  |
|2 |  TABLE SCAN  |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, limit(1), offset(nil)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      distinct([t1.a], [t1.b], [t1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select distinct * from (select * from t1 order by a) limit 1;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/distinct * from (select * from t1 order by a) limit 1;
Query Plan
==================================================
|ID|OPERATOR      |NAME           |EST. ROWS|COST|
--------------------------------------------------
|0 |LIMIT         |               |1        |46  |
|1 | HASH DISTINCT|               |1        |46  |
|2 |  SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|3 |   SORT       |               |1        |46  |
|4 |    TABLE SCAN|t1             |1        |46  |
==================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256, limit(1), offset(nil)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      distinct([.a], [.b], [.c])
  2 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select /*+no_rewrite*/distinct * from (select * from t1 order by a) limit 1;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

EXPLAIN select distinct * from (select * from t1 order by a, (select a from t3));
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | HASH DISTINCT|    |1        |46  |
|2 |  TABLE SCAN  |t1  |1        |46  |
|3 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      distinct([t1.a], [t1.b], [t1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  3 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select distinct * from (select * from t1 order by a, (select a from t3));
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/distinct * from (select * from t1 order by a, (select a from t3));
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |HASH DISTINCT    |               |1        |91  |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |91  |
|2 |  SORT           |               |1        |91  |
|3 |   SUBPLAN FILTER|               |1        |91  |
|4 |    TABLE SCAN   |t1             |1        |46  |
|5 |    TABLE SCAN   |t3             |1        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      distinct([.a], [.b], [.c])
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  5 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select /*+no_rewrite*/distinct * from (select * from t1 order by a, (select a from t3));
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

EXPLAIN select * from (select * from t1 order by a) order by b;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |SORT       |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.b, ASC])
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from (select * from t1 order by a) order by b;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a) order by b;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |SORT         |               |1        |46  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256, sort_keys([.b, ASC])
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a) order by b;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

EXPLAIN select * from (select * from t1 order by a) order by b limit 1;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.b, ASC]), topn(1)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from (select * from t1 order by a) order by b limit 1;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a) order by b limit 1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |TOP-N SORT   |               |1        |46  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256, sort_keys([.b, ASC]), topn(1)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a) order by b limit 1;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

EXPLAIN select * from (select * from t1 order by a, (select a from t3)) order by b;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |SORT       |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.b, ASC])
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from (select * from t1 order by a, (select a from t3)) order by b;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a, (select a from t3)) order by b;
Query Plan
=====================================================
|ID|OPERATOR         |NAME           |EST. ROWS|COST|
-----------------------------------------------------
|0 |SORT             |               |1        |91  |
|1 | SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |91  |
|2 |  SORT           |               |1        |91  |
|3 |   SUBPLAN FILTER|               |1        |91  |
|4 |    TABLE SCAN   |t1             |1        |46  |
|5 |    TABLE SCAN   |t3             |1        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256, sort_keys([.b, ASC])
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  5 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a, (select a from t3)) order by b;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

##test basic view stmt ==> can't remove order by
EXPLAIN select * from (select * from t1 order by a);
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |SORT       |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from (select * from t1 order by a);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a);
Query Plan
================================================
|ID|OPERATOR    |NAME           |EST. ROWS|COST|
------------------------------------------------
|0 |SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|1 | SORT       |               |1        |46  |
|2 |  TABLE SCAN|t1             |1        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN insert into t_temp select * from (select * from t1 order by a);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW2|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.c)])
  1 - output([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert into t_temp select * from (select * from t1 order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN insert /*+NO_REWRITE*/into t_temp select * from (select * from t1 order by a);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW2|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.c)])
  1 - output([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert /*+NO_REWRITE*/into t_temp select * from (select * from t1 order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN update t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a);
Query Plan
================================================
|ID|OPERATOR             |NAME  |EST. ROWS|COST|
------------------------------------------------
|0 |UPDATE               |      |1        |123 |
|1 | HASH RIGHT SEMI JOIN|      |1        |91  |
|2 |  TABLE SCAN         |t1    |1        |46  |
|3 |  TABLE SCAN         |t_temp|1        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]),
      update([t_temp.b=column_conv(INT,PS:(11,0),NULL,cast(t_temp.b + 100, INT(-1, 0)))])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      equal_conds([t_temp.b = t1.a]), other_conds(nil)
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  3 - output([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), partitions(p0)

update t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN update /*+NO_REWRITE*/t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a);
Query Plan
==========================================
|ID|OPERATOR       |NAME  |EST. ROWS|COST|
------------------------------------------
|0 |UPDATE         |      |1        |119 |
|1 | SUBPLAN FILTER|      |1        |91  |
|2 |  TABLE SCAN   |t_temp|1        |46  |
|3 |  SORT         |      |1        |46  |
|4 |   TABLE SCAN  |t1    |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}]),
      update([t_temp.b=column_conv(INT,PS:(11,0),NULL,cast(t_temp.b + 100, INT(-1, 0)))])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter([t_temp.b = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.b], [t_temp.a], [t_temp.c]), partitions(p0)
  3 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  4 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

update /*+NO_REWRITE*/t_temp set t_temp.b = t_temp.b + 100 where t_temp.b in (select a from t1 order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN delete from t_temp where t_temp.b in (select a from t1 order by a);
Query Plan
================================================
|ID|OPERATOR             |NAME  |EST. ROWS|COST|
------------------------------------------------
|0 |DELETE               |      |1        |103 |
|1 | HASH RIGHT SEMI JOIN|      |1        |91  |
|2 |  TABLE SCAN         |t1    |1        |46  |
|3 |  TABLE SCAN         |t_temp|1        |46  |
================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      equal_conds([t_temp.b = t1.a]), other_conds(nil)
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)
  3 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

delete from t_temp where t_temp.b in (select a from t1 order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;
EXPLAIN delete /*+NO_REWRITE*/from t_temp where t_temp.b in (select a from t1 order by a);
Query Plan
==========================================
|ID|OPERATOR       |NAME  |EST. ROWS|COST|
------------------------------------------
|0 |DELETE         |      |1        |100 |
|1 | SUBPLAN FILTER|      |1        |91  |
|2 |  TABLE SCAN   |t_temp|1        |46  |
|3 |  SORT         |      |1        |46  |
|4 |   TABLE SCAN  |t1    |1        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t_temp: ({t_temp: (t_temp.__pk_increment, t_temp.a, t_temp.b, t_temp.c)})}])
  1 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter([t_temp.b = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.__pk_increment], [t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)
  3 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  4 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

delete /*+NO_REWRITE*/from t_temp where t_temp.b in (select a from t1 order by a);
EXPLAIN select * from t_temp;
Query Plan
=====================================
|ID|OPERATOR  |NAME  |EST. ROWS|COST|
-------------------------------------
|0 |TABLE SCAN|t_temp|1        |46  |
=====================================

Outputs & filters:
-------------------------------------
  0 - output([t_temp.a], [t_temp.b], [t_temp.c]), filter(nil), rowset=256,
      access([t_temp.a], [t_temp.b], [t_temp.c]), partitions(p0)

select * from t_temp;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
rollback;

EXPLAIN select * from (select * from t1 order by a) limit 1;
Query Plan
====================================
|ID|OPERATOR   |NAME|EST. ROWS|COST|
------------------------------------
|0 |TOP-N SORT |    |1        |46  |
|1 | TABLE SCAN|t1  |1        |46  |
====================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from (select * from t1 order by a) limit 1;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a) limit 1;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |LIMIT        |               |1        |46  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256, limit(1), offset(nil)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a) limit 1;
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

EXPLAIN select distinct * from (select * from t1 order by a limit 1);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH DISTINCT|               |1        |46  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      distinct([.a], [.b], [.c])
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select distinct * from (select * from t1 order by a limit 1);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/distinct * from (select * from t1 order by a limit 1);
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |HASH DISTINCT|               |1        |46  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT |               |1        |46  |
|3 |   TABLE SCAN|t1             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      distinct([.a], [.b], [.c])
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select /*+no_rewrite*/distinct * from (select * from t1 order by a limit 1);
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

EXPLAIN select a from (select a from t1 order by a limit 1) group by a;
Query Plan
==================================================
|ID|OPERATOR      |NAME           |EST. ROWS|COST|
--------------------------------------------------
|0 |MERGE GROUP BY|               |1        |46  |
|1 | SUBPLAN SCAN |ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT  |               |1        |46  |
|3 |   TABLE SCAN |t1             |1        |46  |
==================================================

Outputs & filters:
-------------------------------------
  0 - output([.a]), filter(nil), rowset=256,
      group([.a]), agg_func(nil)
  1 - output([.a]), filter(nil), rowset=256,
      access([.a])
  2 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  3 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select a from (select a from t1 order by a limit 1) group by a;
+------+
| a    |
+------+
+------+
EXPLAIN select /*+no_rewrite*/a from (select a from t1 order by a limit 1) group by a;
Query Plan
==================================================
|ID|OPERATOR      |NAME           |EST. ROWS|COST|
--------------------------------------------------
|0 |MERGE GROUP BY|               |1        |46  |
|1 | SUBPLAN SCAN |ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT  |               |1        |46  |
|3 |   TABLE SCAN |t1             |1        |46  |
==================================================

Outputs & filters:
-------------------------------------
  0 - output([.a]), filter(nil), rowset=256,
      group([.a]), agg_func(nil)
  1 - output([.a]), filter(nil), rowset=256,
      access([.a])
  2 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  3 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select /*+no_rewrite*/a from (select a from t1 order by a limit 1) group by a;
+------+
| a    |
+------+
+------+

EXPLAIN select * from (select * from t1 order by a, (select a from t3));
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SORT           |    |1        |91  |
|1 | SUBPLAN FILTER|    |1        |91  |
|2 |  TABLE SCAN   |t1  |1        |46  |
|3 |  TABLE SCAN   |t3  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  3 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select * from (select * from t1 order by a, (select a from t3));
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a, (select a from t3));
Query Plan
====================================================
|ID|OPERATOR        |NAME           |EST. ROWS|COST|
----------------------------------------------------
|0 |SUBPLAN SCAN    |ANONYMOUS_VIEW1|1        |91  |
|1 | SORT           |               |1        |91  |
|2 |  SUBPLAN FILTER|               |1        |91  |
|3 |   TABLE SCAN   |t1             |1        |46  |
|4 |   TABLE SCAN   |t3             |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a, (select a from t3));
+------+------+------+
| a    | b    | c    |
+------+------+------+
+------+------+------+

##test join view stmt ==> remove stmt
EXPLAIN select * from (select * from t1 order by a), t2;
Query Plan
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |1        |91  |
|1 | TABLE SCAN               |t2  |1        |46  |
|2 | MATERIAL                 |    |1        |46  |
|3 |  TABLE SCAN              |t1  |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

select * from (select * from t1 order by a), t2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a), t2;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|               |1        |91  |
|1 | SUBPLAN SCAN             |ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT                    |               |1        |46  |
|3 |   TABLE SCAN             |t1             |1        |46  |
|4 | MATERIAL                 |               |1        |46  |
|5 |  TABLE SCAN              |t2             |1        |46  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a), t2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN insert into t_temp_join (select * from (select * from t1 order by a), t2);
Query Plan
================================================================
|ID|OPERATOR                    |NAME           |EST. ROWS|COST|
----------------------------------------------------------------
|0 |INSERT                      |               |1        |104 |
|1 | SUBPLAN SCAN               |ANONYMOUS_VIEW2|1        |91  |
|2 |  NESTED-LOOP JOIN CARTESIAN|               |1        |91  |
|3 |   TABLE SCAN               |t2             |1        |46  |
|4 |   MATERIAL                 |               |1        |46  |
|5 |    TABLE SCAN              |t1             |1        |46  |
================================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t_temp_join: ({t_temp_join: (t_temp_join.__pk_increment, t_temp_join.a, t_temp_join.b, t_temp_join.c, t_temp_join.d, t_temp_join.e, t_temp_join.f)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.c)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.b)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW2.c)])
  1 - output([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c], [ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c], [ANONYMOUS_VIEW2.a], [ANONYMOUS_VIEW2.b], [ANONYMOUS_VIEW2.c])
  2 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  3 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256
  5 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)

insert into t_temp_join (select * from (select * from t1 order by a), t2);
EXPLAIN insert /*+*/

select * from (select * from t1 order by a, (select a from t3)), t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your OceanBase version for the right syntax to use near 'select * from (select * from t1 order by a, (select a from t3)), t2' at line 3
insert /*+*/

select * from (select * from t1 order by a, (select a from t3)), t2;
ERROR 42000: You have an error in your SQL syntax; check the manual that corresponds to your OceanBase version for the right syntax to use near 'select * from (select * from t1 order by a, (select a from t3)), t2' at line 3
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a, (select a from t3)), t2;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|               |1        |137 |
|1 | SUBPLAN SCAN             |ANONYMOUS_VIEW1|1        |91  |
|2 |  SORT                    |               |1        |91  |
|3 |   SUBPLAN FILTER         |               |1        |91  |
|4 |    TABLE SCAN            |t1             |1        |46  |
|5 |    TABLE SCAN            |t3             |1        |46  |
|6 | MATERIAL                 |               |1        |46  |
|7 |  TABLE SCAN              |t2             |1        |46  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  4 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  5 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256
  7 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a, (select a from t3)), t2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

EXPLAIN select * from (select * from t1 order by a) v1, (select * from t2 order by a) v2;
Query Plan
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |1        |91  |
|1 | TABLE SCAN               |t1  |1        |46  |
|2 | MATERIAL                 |    |1        |46  |
|3 |  TABLE SCAN              |t2  |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  2 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256
  3 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select * from (select * from t1 order by a) v1, (select * from t2 order by a) v2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a) v1, (select * from t2 order by a) v2;
Query Plan
===================================================
|ID|OPERATOR                  |NAME|EST. ROWS|COST|
---------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|    |1        |91  |
|1 | SUBPLAN SCAN             |v1  |1        |46  |
|2 |  SORT                    |    |1        |46  |
|3 |   TABLE SCAN             |t1  |1        |46  |
|4 | MATERIAL                 |    |1        |46  |
|5 |  SUBPLAN SCAN            |v2  |1        |46  |
|6 |   SORT                   |    |1        |46  |
|7 |    TABLE SCAN            |t2  |1        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([v1.a], [v1.b], [v1.c], [v2.a], [v2.b], [v2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([v1.a], [v1.b], [v1.c]), filter(nil), rowset=256,
      access([v1.a], [v1.b], [v1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([v2.a], [v2.b], [v2.c]), filter(nil), rowset=256
  5 - output([v2.a], [v2.b], [v2.c]), filter(nil), rowset=256,
      access([v2.a], [v2.b], [v2.c])
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256, sort_keys([t2.a, ASC])
  7 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a) v1, (select * from t2 order by a) v2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

EXPLAIN select * from (select * from t1 order by a) v left join t2 on v.a = t2.a;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |HASH OUTER JOIN|    |1        |91  |
|1 | TABLE SCAN    |t1  |1        |46  |
|2 | TABLE SCAN    |t2  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      equal_conds([t1.a = t2.a]), other_conds(nil)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  2 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select * from (select * from t1 order by a) v left join t2 on v.a = t2.a;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a) v left join t2 on v.a = t2.a;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |MERGE OUTER JOIN|    |1        |91  |
|1 | SUBPLAN SCAN   |v   |1        |46  |
|2 |  SORT          |    |1        |46  |
|3 |   TABLE SCAN   |t1  |1        |46  |
|4 | SORT           |    |1        |46  |
|5 |  TABLE SCAN    |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.a], [v.b], [v.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      equal_conds([v.a = t2.a]), other_conds(nil)
  1 - output([v.a], [v.b], [v.c]), filter(nil), rowset=256,
      access([v.a], [v.b], [v.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256, sort_keys([t2.a, ASC])
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a) v left join t2 on v.a = t2.a;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

EXPLAIN select * from (select * from t1 order by a, (select a from t3)) v left join t2 on v.a = t2.a;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH OUTER JOIN |    |1        |137 |
|1 | SUBPLAN SCAN   |v   |1        |91  |
|2 |  SUBPLAN FILTER|    |1        |91  |
|3 |   TABLE SCAN   |t1  |1        |46  |
|4 |   TABLE SCAN   |t3  |1        |46  |
|5 | TABLE SCAN     |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.a], [v.b], [v.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      equal_conds([v.a = t2.a]), other_conds(nil)
  1 - output([v.a], [v.b], [v.c]), filter(nil), rowset=256,
      access([v.a], [v.b], [v.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select * from (select * from t1 order by a, (select a from t3)) v left join t2 on v.a = t2.a;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a) v left join t2 on v.a = t2.a;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |MERGE OUTER JOIN|    |1        |91  |
|1 | SUBPLAN SCAN   |v   |1        |46  |
|2 |  SORT          |    |1        |46  |
|3 |   TABLE SCAN   |t1  |1        |46  |
|4 | SORT           |    |1        |46  |
|5 |  TABLE SCAN    |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.a], [v.b], [v.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      equal_conds([v.a = t2.a]), other_conds(nil)
  1 - output([v.a], [v.b], [v.c]), filter(nil), rowset=256,
      access([v.a], [v.b], [v.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256, sort_keys([t2.a, ASC])
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a) v left join t2 on v.a = t2.a;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

EXPLAIN select * from (select * from t1 order by a) v1 left join (select * from t2 order by a) v2 on v1.a = v2.a;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |HASH OUTER JOIN|    |1        |91  |
|1 | TABLE SCAN    |t1  |1        |46  |
|2 | TABLE SCAN    |t2  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.a], [t1.b], [t1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      equal_conds([t1.a = t2.a]), other_conds(nil)
  1 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  2 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select * from (select * from t1 order by a) v1 left join (select * from t2 order by a) v2 on v1.a = v2.a;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a) v1 left join (select * from t2 order by a) v2 on v1.a = v2.a;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |MERGE OUTER JOIN|    |1        |91  |
|1 | SUBPLAN SCAN   |v1  |1        |46  |
|2 |  SORT          |    |1        |46  |
|3 |   TABLE SCAN   |t1  |1        |46  |
|4 | SUBPLAN SCAN   |v2  |1        |46  |
|5 |  SORT          |    |1        |46  |
|6 |   TABLE SCAN   |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v1.a], [v1.b], [v1.c], [v2.a], [v2.b], [v2.c]), filter(nil), rowset=256,
      equal_conds([v1.a = v2.a]), other_conds(nil)
  1 - output([v1.a], [v1.b], [v1.c]), filter(nil), rowset=256,
      access([v1.a], [v1.b], [v1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([v2.a], [v2.b], [v2.c]), filter(nil), rowset=256,
      access([v2.a], [v2.b], [v2.c])
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256, sort_keys([t2.a, ASC])
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a) v1 left join (select * from t2 order by a) v2 on v1.a = v2.a;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

EXPLAIN select * from (select * from t1 order by a limit 1) v1 left join (select * from t2 order by a) v2 on v1.a = v2.a;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |MERGE OUTER JOIN|    |1        |91  |
|1 | SUBPLAN SCAN   |v1  |1        |46  |
|2 |  TOP-N SORT    |    |1        |46  |
|3 |   TABLE SCAN   |t1  |1        |46  |
|4 | SORT           |    |1        |46  |
|5 |  TABLE SCAN    |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v1.a], [v1.b], [v1.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      equal_conds([v1.a = t2.a]), other_conds(nil)
  1 - output([v1.a], [v1.b], [v1.c]), filter(nil), rowset=256,
      access([v1.a], [v1.b], [v1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256, sort_keys([t2.a, ASC])
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select * from (select * from t1 order by a limit 1) v1 left join (select * from t2 order by a) v2 on v1.a = v2.a;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a limit 1) v1 left join (select * from t2 order by a) v2 on v1.a = v2.a;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |MERGE OUTER JOIN|    |1        |91  |
|1 | SUBPLAN SCAN   |v1  |1        |46  |
|2 |  TOP-N SORT    |    |1        |46  |
|3 |   TABLE SCAN   |t1  |1        |46  |
|4 | SUBPLAN SCAN   |v2  |1        |46  |
|5 |  SORT          |    |1        |46  |
|6 |   TABLE SCAN   |t2  |1        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v1.a], [v1.b], [v1.c], [v2.a], [v2.b], [v2.c]), filter(nil), rowset=256,
      equal_conds([v1.a = v2.a]), other_conds(nil)
  1 - output([v1.a], [v1.b], [v1.c]), filter(nil), rowset=256,
      access([v1.a], [v1.b], [v1.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([v2.a], [v2.b], [v2.c]), filter(nil), rowset=256,
      access([v2.a], [v2.b], [v2.c])
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256, sort_keys([t2.a, ASC])
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a limit 1) v1 left join (select * from t2 order by a) v2 on v1.a = v2.a;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

##test join view stmt ==> can't remove stmt
EXPLAIN select * from (select * from t1 order by (select a from t3)), t2;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|               |1        |137 |
|1 | SUBPLAN SCAN             |ANONYMOUS_VIEW1|1        |91  |
|2 |  SUBPLAN FILTER          |               |1        |91  |
|3 |   TABLE SCAN             |t1             |1        |46  |
|4 |   TABLE SCAN             |t3             |1        |46  |
|5 | MATERIAL                 |               |1        |46  |
|6 |  TABLE SCAN              |t2             |1        |46  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select * from (select * from t1 order by (select a from t3)), t2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by (select a from t3)), t2;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|               |1        |137 |
|1 | SUBPLAN SCAN             |ANONYMOUS_VIEW1|1        |91  |
|2 |  SUBPLAN FILTER          |               |1        |91  |
|3 |   TABLE SCAN             |t1             |1        |46  |
|4 |   TABLE SCAN             |t3             |1        |46  |
|5 | MATERIAL                 |               |1        |46  |
|6 |  TABLE SCAN              |t2             |1        |46  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t3.a]), filter(nil), rowset=256,
      access([t3.a]), partitions(p0)
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256
  6 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by (select a from t3)), t2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

EXPLAIN select * from (select * from t1 order by a limit 1), t2;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|               |1        |91  |
|1 | SUBPLAN SCAN             |ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT              |               |1        |46  |
|3 |   TABLE SCAN             |t1             |1        |46  |
|4 | MATERIAL                 |               |1        |46  |
|5 |  TABLE SCAN              |t2             |1        |46  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select * from (select * from t1 order by a limit 1), t2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+
EXPLAIN select /*+no_rewrite*/* from (select * from t1 order by a limit 1), t2;
Query Plan
==============================================================
|ID|OPERATOR                  |NAME           |EST. ROWS|COST|
--------------------------------------------------------------
|0 |NESTED-LOOP JOIN CARTESIAN|               |1        |91  |
|1 | SUBPLAN SCAN             |ANONYMOUS_VIEW1|1        |46  |
|2 |  TOP-N SORT              |               |1        |46  |
|3 |   TABLE SCAN             |t1             |1        |46  |
|4 | MATERIAL                 |               |1        |46  |
|5 |  TABLE SCAN              |t2             |1        |46  |
==============================================================

Outputs & filters:
-------------------------------------
  0 - output([.a], [.b], [.c], [t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  1 - output([.a], [.b], [.c]), filter(nil), rowset=256,
      access([.a], [.b], [.c])
  2 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256, sort_keys([t1.a, ASC]), topn(1)
  3 - output([t1.a], [t1.b], [t1.c]), filter(nil), rowset=256,
      access([t1.a], [t1.b], [t1.c]), partitions(p0)
  4 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256
  5 - output([t2.a], [t2.b], [t2.c]), filter(nil), rowset=256,
      access([t2.a], [t2.b], [t2.c]), partitions(p0)

select /*+no_rewrite*/* from (select * from t1 order by a limit 1), t2;
+------+------+------+------+------+------+
| a    | b    | c    | a    | b    | c    |
+------+------+------+------+------+------+
+------+------+------+------+------+------+

## bug: https://work.aone.alibaba-inc.com/issue/25008378
drop table if exists t1, t2, t3, t4;
create table t1 (pk int primary key, c1 int, c2 int);
create table t2 (pk int primary key, c1 int, c2 int);
create table t3 (pk int primary key, c1 int, c2 int);
create table t4 (pk int primary key, c1 int, c2 int);

insert/**/ into t3 values (1, 1, 1);

EXPLAIN select * from t3 where not exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t3.c2);
Query Plan
======================================================
|ID|OPERATOR                    |NAME |EST. ROWS|COST|
------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN        |     |1        |137 |
|1 | SUBPLAN SCAN               |VIEW1|1        |91  |
|2 |  NESTED-LOOP JOIN CARTESIAN|     |1        |91  |
|3 |   TABLE SCAN               |t2   |1        |46  |
|4 |   MATERIAL                 |     |1        |46  |
|5 |    TABLE SCAN              |t1   |1        |46  |
|6 | TABLE SCAN                 |t3   |1        |46  |
======================================================

Outputs & filters:
-------------------------------------
  0 - output([t3.pk], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t2.c2 = t3.c2]), other_conds(nil)
  1 - output([VIEW1.t2.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([VIEW1.t2.c2])
  2 - output([t2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  3 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  4 - output(nil), filter(nil), rowset=256
  5 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)
  6 - output([t3.pk], [t3.c2], [t3.c1]), filter(nil), rowset=256,
      access([t3.pk], [t3.c2], [t3.c1]), partitions(p0)

select * from t3 where not exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t3.c2);
+----+------+------+
| pk | c1   | c2   |
+----+------+------+
|  1 |    1 |    1 |
+----+------+------+
EXPLAIN select /*+no_rewrite*/ * from t3 where not exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t3.c2);
Query Plan
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SUBPLAN FILTER             |    |1        |137 |
|1 | TABLE SCAN                |t3  |1        |46  |
|2 | NESTED-LOOP JOIN CARTESIAN|    |1        |91  |
|3 |  TABLE SCAN               |t1  |1        |46  |
|4 |  MATERIAL                 |    |1        |46  |
|5 |   TABLE SCAN              |t2  |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([t3.pk], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_NOT_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t3.pk], [t3.c2], [t3.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t3.pk], [t3.c2], [t3.c1]), partitions(p0)
  2 - output([1]), filter(nil), startup_filter([0]), rowset=256,
      conds(nil), nl_params_(nil)
  3 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)
  4 - output(nil), filter(nil), rowset=256
  5 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)

select /*+no_rewrite*/ * from t3 where not exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t3.c2);
+----+------+------+
| pk | c1   | c2   |
+----+------+------+
|  1 |    1 |    1 |
+----+------+------+

EXPLAIN select * from t3 where exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t3.c2);
Query Plan
======================================================
|ID|OPERATOR                    |NAME |EST. ROWS|COST|
------------------------------------------------------
|0 |HASH RIGHT SEMI JOIN        |     |1        |137 |
|1 | SUBPLAN SCAN               |VIEW1|1        |91  |
|2 |  NESTED-LOOP JOIN CARTESIAN|     |1        |91  |
|3 |   TABLE SCAN               |t2   |1        |46  |
|4 |   MATERIAL                 |     |1        |46  |
|5 |    TABLE SCAN              |t1   |1        |46  |
|6 | TABLE SCAN                 |t3   |1        |46  |
======================================================

Outputs & filters:
-------------------------------------
  0 - output([t3.pk], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t2.c2 = t3.c2]), other_conds(nil)
  1 - output([VIEW1.t2.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([VIEW1.t2.c2])
  2 - output([t2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  3 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  4 - output(nil), filter(nil), rowset=256
  5 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)
  6 - output([t3.pk], [t3.c2], [t3.c1]), filter(nil), rowset=256,
      access([t3.pk], [t3.c2], [t3.c1]), partitions(p0)

select * from t3 where exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t3.c2);
+----+------+------+
| pk | c1   | c2   |
+----+------+------+
+----+------+------+
EXPLAIN select /*+no_rewrite*/ * from t3 where exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t3.c2);
Query Plan
====================================================
|ID|OPERATOR                   |NAME|EST. ROWS|COST|
----------------------------------------------------
|0 |SUBPLAN FILTER             |    |1        |137 |
|1 | TABLE SCAN                |t3  |1        |46  |
|2 | NESTED-LOOP JOIN CARTESIAN|    |1        |91  |
|3 |  TABLE SCAN               |t1  |1        |46  |
|4 |  MATERIAL                 |    |1        |46  |
|5 |   TABLE SCAN              |t2  |1        |46  |
====================================================

Outputs & filters:
-------------------------------------
  0 - output([t3.pk], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t3.pk], [t3.c2], [t3.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t3.pk], [t3.c2], [t3.c1]), partitions(p0)
  2 - output([1]), filter(nil), startup_filter([0]), rowset=256,
      conds(nil), nl_params_(nil)
  3 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)
  4 - output(nil), filter(nil), rowset=256
  5 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)

select /*+no_rewrite*/ * from t3 where exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t3.c2);
+----+------+------+
| pk | c1   | c2   |
+----+------+------+
+----+------+------+

EXPLAIN select * from t3 where not exists (select 1 from t4 where t3.c2 = t4.c2 and exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t4.c2));
Query Plan
========================================================
|ID|OPERATOR                      |NAME |EST. ROWS|COST|
--------------------------------------------------------
|0 |HASH RIGHT ANTI JOIN          |     |1        |182 |
|1 | SUBPLAN SCAN                 |VIEW2|1        |137 |
|2 |  HASH SEMI JOIN              |     |1        |137 |
|3 |   TABLE SCAN                 |t4   |1        |46  |
|4 |   SUBPLAN SCAN               |VIEW1|1        |91  |
|5 |    NESTED-LOOP JOIN CARTESIAN|     |1        |91  |
|6 |     TABLE SCAN               |t2   |1        |46  |
|7 |     MATERIAL                 |     |1        |46  |
|8 |      TABLE SCAN              |t1   |1        |46  |
|9 | TABLE SCAN                   |t3   |1        |46  |
========================================================

Outputs & filters:
-------------------------------------
  0 - output([t3.pk], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      equal_conds([t3.c2 = VIEW2.t4.c2]), other_conds(nil)
  1 - output([VIEW2.t4.c2]), filter(nil), rowset=256,
      access([VIEW2.t4.c2])
  2 - output([t4.c2]), filter(nil), rowset=256,
      equal_conds([VIEW1.t2.c2 = t4.c2]), other_conds(nil)
  3 - output([t4.c2]), filter(nil), rowset=256,
      access([t4.c2]), partitions(p0)
  4 - output([VIEW1.t2.c2]), filter(nil), startup_filter([0]), rowset=256,
      access([VIEW1.t2.c2])
  5 - output([t2.c2]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  6 - output([t2.c2]), filter(nil), rowset=256,
      access([t2.c2]), partitions(p0)
  7 - output(nil), filter(nil), rowset=256
  8 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)
  9 - output([t3.pk], [t3.c2], [t3.c1]), filter(nil), rowset=256,
      access([t3.pk], [t3.c2], [t3.c1]), partitions(p0)

select * from t3 where not exists (select 1 from t4 where t3.c2 = t4.c2 and exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t4.c2));
+----+------+------+
| pk | c1   | c2   |
+----+------+------+
|  1 |    1 |    1 |
+----+------+------+
EXPLAIN select /*+no_rewrite*/ * from t3 where not exists (select 1 from t4 where t3.c2 = t4.c2 and exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t4.c2));
Query Plan
=====================================================
|ID|OPERATOR                    |NAME|EST. ROWS|COST|
-----------------------------------------------------
|0 |SUBPLAN FILTER              |    |1        |182 |
|1 | TABLE SCAN                 |t3  |1        |46  |
|2 | NESTED-LOOP JOIN CARTESIAN |    |1        |137 |
|3 |  NESTED-LOOP JOIN CARTESIAN|    |1        |91  |
|4 |   TABLE SCAN               |t4  |1        |46  |
|5 |   MATERIAL                 |    |1        |46  |
|6 |    TABLE SCAN              |t1  |1        |46  |
|7 |  MATERIAL                  |    |1        |46  |
|8 |   TABLE SCAN               |t2  |1        |46  |
=====================================================

Outputs & filters:
-------------------------------------
  0 - output([t3.pk], [t3.c1], [t3.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_NOT_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output([t3.pk], [t3.c2], [t3.c1]), filter(nil), startup_filter([?]), rowset=256,
      access([t3.pk], [t3.c2], [t3.c1]), partitions(p0)
  2 - output([1]), filter(nil), startup_filter([0]), rowset=256,
      conds(nil), nl_params_(nil)
  3 - output(nil), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  4 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)
  5 - output(nil), filter(nil), rowset=256
  6 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)
  7 - output(nil), filter(nil), rowset=256
  8 - output(nil), filter(nil), rowset=256,
      access(nil), partitions(p0)

select /*+no_rewrite*/ * from t3 where not exists (select 1 from t4 where t3.c2 = t4.c2 and exists (select 1 from t1 left join t2 on t1.c1 = t2.c1 where t2.pk is null and t2.c2 = t4.c2));
+----+------+------+
| pk | c1   | c2   |
+----+------+------+
|  1 |    1 |    1 |
+----+------+------+

drop table t1,t2,t3,t_temp;

##bug:https://work.aone.alibaba-inc.com/issue/25416459
DROP TABLE IF EXISTS `d`, `cc`;

CREATE TABLE `d` (
  `col_varchar_10` varchar(10) DEFAULT NULL,
  `col_varchar` varchar(1) DEFAULT NULL,
  `col_varchar_20_key` varchar(20) DEFAULT NULL,
  `col_varchar_20` varchar(20) DEFAULT NULL,
  `col_varchar_10_key` varchar(10) DEFAULT NULL,
  `col_int` int(11) DEFAULT NULL,
  `col_varchar_key` varchar(1) DEFAULT NULL,
  `col_int_key` int(11) DEFAULT NULL,
  `pk` int(11) NOT NULL,
  PRIMARY KEY (`pk`),
  KEY `idx7` (`pk`, `col_varchar_20_key`) BLOCK_SIZE 16384 GLOBAL,
  KEY `idx5` (`pk`, `col_varchar_10_key`) BLOCK_SIZE 16384 GLOBAL,
  KEY `idx3` (`pk`, `col_varchar_key`) BLOCK_SIZE 16384 GLOBAL,
  KEY `idx1` (`pk`, `col_int_key`) BLOCK_SIZE 16384 GLOBAL
) ;

CREATE TABLE `cc` (
  `col_varchar_key` varchar(1) DEFAULT NULL,
  `col_int` int(11) DEFAULT NULL,
  `col_varchar_20` varchar(20) DEFAULT NULL,
  `col_int_key` int(11) DEFAULT NULL,
  `col_varchar_20_key` varchar(20) DEFAULT NULL,
  `col_varchar` varchar(1) DEFAULT NULL,
  `col_varchar_10_key` varchar(10) DEFAULT NULL,
  `pk` int(11) NOT NULL,
  `col_varchar_10` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`pk`),
  KEY `idx3` (`pk`, `col_varchar_key`) BLOCK_SIZE 16384 GLOBAL,
  KEY `idx1` (`pk`, `col_int_key`) BLOCK_SIZE 16384 GLOBAL,
  KEY `idx7` (`pk`, `col_varchar_20_key`) BLOCK_SIZE 16384 GLOBAL,
  KEY `idx5` (`pk`, `col_varchar_10_key`) BLOCK_SIZE 16384 GLOBAL
) ;

EXPLAIN SELECT DISTINCT MIN(DISTINCT table1 . `col_varchar_10`) AS field1,
                table1 . col_varchar_10_key AS field2,
                table2 . `col_int_key` AS field3,
                table1 . `col_varchar_key` AS field4,
                table2 . col_varchar_20_key AS field5,
                MIN(table1 . `col_varchar_10`) AS field6,
                table1 . col_varchar_20_key AS field7,
                table1 . col_varchar_10_key AS field8
FROM (CC AS table1
      RIGHT OUTER JOIN CC AS table2 ON (table2 . `pk` = table1 . `col_int`))
WHERE (
         (SELECT MAX(SUBQUERY1_t1 . `pk`) AS SUBQUERY1_field1
          FROM (CC AS SUBQUERY1_t1
                INNER JOIN CC AS SUBQUERY1_t2 ON (SUBQUERY1_t2 . `col_int` = SUBQUERY1_t1 . `pk`
                                                  AND SUBQUERY1_t2 . `col_varchar_10_key` >=
                                                    (SELECT MAX(CHILD_SUBQUERY1_t1 . `col_varchar_20`) AS CHILD_SUBQUERY1_field1
                                                     FROM (CC AS CHILD_SUBQUERY1_t1
                                                           INNER JOIN D AS CHILD_SUBQUERY1_t2 ON (CHILD_SUBQUERY1_t2 . `pk` = CHILD_SUBQUERY1_t1 . `col_int`)))))) IS NULL)
  OR table1 . `col_varchar_key` <= 'n'
GROUP BY field2,
         field3,
         field4,
         field5,
         field7,
         field8
ORDER BY 1,
         field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8;
Query Plan
========================================================================
|ID|OPERATOR                         |NAME              |EST. ROWS|COST|
------------------------------------------------------------------------
|0 |SORT                             |                  |1        |192 |
|1 | HASH GROUP BY                   |                  |1        |192 |
|2 |  NESTED-LOOP JOIN               |                  |1        |192 |
|3 |   MERGE OUTER JOIN              |                  |1        |91  |
|4 |    TABLE SCAN                   |table2            |1        |46  |
|5 |    SORT                         |                  |1        |46  |
|6 |     TABLE SCAN                  |table1            |1        |46  |
|7 |   MATERIAL                      |                  |1        |101 |
|8 |    SUBPLAN SCAN                 |VIEW2             |1        |101 |
|9 |     SCALAR GROUP BY             |                  |1        |101 |
|10|      NESTED-LOOP JOIN           |                  |1        |101 |
|11|       NESTED-LOOP JOIN          |                  |1        |99  |
|12|        TABLE SCAN               |SUBQUERY1_t2      |1        |46  |
|13|        MATERIAL                 |                  |1        |53  |
|14|         SUBPLAN SCAN            |VIEW1             |1        |53  |
|15|          SCALAR GROUP BY        |                  |1        |53  |
|16|           NESTED-LOOP JOIN      |                  |1        |53  |
|17|            TABLE SCAN           |CHILD_SUBQUERY1_t1|1        |46  |
|18|            DISTRIBUTED TABLE GET|CHILD_SUBQUERY1_t2|1        |7   |
|19|       DISTRIBUTED TABLE GET     |SUBQUERY1_t1      |1        |7   |
========================================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(table1.col_varchar_10)], [table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [T_FUN_MIN(table1.col_varchar_10)], [table1.col_varchar_20_key], [table1.col_varchar_10_key]), filter(nil), rowset=256, sort_keys([T_FUN_MIN(table1.col_varchar_10), ASC], [table1.col_varchar_10_key, ASC], [table2.col_int_key, ASC], [table1.col_varchar_key, ASC], [table2.col_varchar_20_key, ASC], [table1.col_varchar_20_key, ASC])
  1 - output([T_FUN_MIN(table1.col_varchar_10)], [table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [table1.col_varchar_20_key]), filter(nil), rowset=256,
      group([table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [table1.col_varchar_20_key]), agg_func([T_FUN_MIN(table1.col_varchar_10)])
  2 - output([table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [table1.col_varchar_20_key], [table1.col_varchar_10]), filter(nil), rowset=256,
      conds([(T_OP_IS, VIEW2.SUBQUERY1_field1, NULL, 0) OR table1.col_varchar_key <= 'n']), nl_params_(nil)
  3 - output([table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [table1.col_varchar_20_key], [table1.col_varchar_10]), filter(nil), rowset=256,
      equal_conds([table2.pk = table1.col_int]), other_conds(nil)
  4 - output([table2.pk], [table2.col_int_key], [table2.col_varchar_20_key]), filter(nil), rowset=256,
      access([table2.pk], [table2.col_int_key], [table2.col_varchar_20_key]), partitions(p0)
  5 - output([table1.col_varchar_10_key], [table1.col_varchar_key], [table1.col_varchar_20_key], [table1.col_int], [table1.col_varchar_10]), filter(nil), rowset=256, sort_keys([table1.col_int, ASC])
  6 - output([table1.col_int], [table1.col_varchar_key], [table1.col_varchar_10], [table1.col_varchar_10_key], [table1.col_varchar_20_key]), filter(nil), rowset=256,
      access([table1.col_int], [table1.col_varchar_key], [table1.col_varchar_10], [table1.col_varchar_10_key], [table1.col_varchar_20_key]), partitions(p0)
  7 - output([VIEW2.SUBQUERY1_field1]), filter(nil), rowset=256
  8 - output([VIEW2.SUBQUERY1_field1]), filter(nil), rowset=256,
      access([VIEW2.SUBQUERY1_field1])
  9 - output([T_FUN_MAX(SUBQUERY1_t1.pk)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(SUBQUERY1_t1.pk)])
  10 - output([SUBQUERY1_t1.pk]), filter(nil), rowset=256,
      conds(nil), nl_params_([SUBQUERY1_t2.col_int])
  11 - output([SUBQUERY1_t2.col_int]), filter(nil), rowset=256,
      conds([SUBQUERY1_t2.col_varchar_10_key >= VIEW1.CHILD_SUBQUERY1_field1]), nl_params_(nil)
  12 - output([SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_varchar_10_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_varchar_10_key]), partitions(p0)
  13 - output([VIEW1.CHILD_SUBQUERY1_field1]), filter(nil), rowset=256
  14 - output([VIEW1.CHILD_SUBQUERY1_field1]), filter(nil), rowset=256,
      access([VIEW1.CHILD_SUBQUERY1_field1])
  15 - output([T_FUN_MAX(CHILD_SUBQUERY1_t1.col_varchar_20)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(CHILD_SUBQUERY1_t1.col_varchar_20)])
  16 - output([CHILD_SUBQUERY1_t1.col_varchar_20]), filter(nil), rowset=256,
      conds(nil), nl_params_([CHILD_SUBQUERY1_t1.col_int])
  17 - output([CHILD_SUBQUERY1_t1.col_int], [CHILD_SUBQUERY1_t1.col_varchar_20]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY1_t1.col_int], [CHILD_SUBQUERY1_t1.col_varchar_20]), partitions(p0)
  18 - output(nil), filter(nil), rowset=256,
      access([GROUP_ID]), partitions(p0)
  19 - output([SUBQUERY1_t1.pk]), filter(nil), rowset=256,
      access([GROUP_ID], [SUBQUERY1_t1.pk]), partitions(p0)

SELECT DISTINCT MIN(DISTINCT table1 . `col_varchar_10`) AS field1,
                table1 . col_varchar_10_key AS field2,
                table2 . `col_int_key` AS field3,
                table1 . `col_varchar_key` AS field4,
                table2 . col_varchar_20_key AS field5,
                MIN(table1 . `col_varchar_10`) AS field6,
                table1 . col_varchar_20_key AS field7,
                table1 . col_varchar_10_key AS field8
FROM (CC AS table1
      RIGHT OUTER JOIN CC AS table2 ON (table2 . `pk` = table1 . `col_int`))
WHERE (
         (SELECT MAX(SUBQUERY1_t1 . `pk`) AS SUBQUERY1_field1
          FROM (CC AS SUBQUERY1_t1
                INNER JOIN CC AS SUBQUERY1_t2 ON (SUBQUERY1_t2 . `col_int` = SUBQUERY1_t1 . `pk`
                                                  AND SUBQUERY1_t2 . `col_varchar_10_key` >=
                                                    (SELECT MAX(CHILD_SUBQUERY1_t1 . `col_varchar_20`) AS CHILD_SUBQUERY1_field1
                                                     FROM (CC AS CHILD_SUBQUERY1_t1
                                                           INNER JOIN D AS CHILD_SUBQUERY1_t2 ON (CHILD_SUBQUERY1_t2 . `pk` = CHILD_SUBQUERY1_t1 . `col_int`)))))) IS NULL)
  OR table1 . `col_varchar_key` <= 'n'
GROUP BY field2,
         field3,
         field4,
         field5,
         field7,
         field8
ORDER BY 1,
         field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8;
+--------+--------+--------+--------+--------+--------+--------+--------+
| field1 | field2 | field3 | field4 | field5 | field6 | field7 | field8 |
+--------+--------+--------+--------+--------+--------+--------+--------+
| NULL   | NULL   |   NULL | NULL   | g      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      0 | NULL   | e      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      0 | NULL   | j      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      0 | NULL   | s      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      1 | NULL   | NULL   | NULL   | NULL   | NULL   |
| NULL   | NULL   |      1 | NULL   | a      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      1 | NULL   | f      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      1 | NULL   | n      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      2 | NULL   | r      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      2 | NULL   | s      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      2 | k      | NULL   | NULL   | v      | NULL   |
| NULL   | NULL   |      3 | NULL   | NULL   | NULL   | NULL   | NULL   |
| NULL   | NULL   |      4 | NULL   | m      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      4 | NULL   | o      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      4 | NULL   | x      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      5 | NULL   | m      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      5 | NULL   | v      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      6 | NULL   | NULL   | NULL   | NULL   | NULL   |
| NULL   | NULL   |      7 | NULL   | j      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      8 | NULL   | s      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      9 | NULL   | c      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      9 | NULL   | h      | NULL   | NULL   | NULL   |
| NULL   | k      |      2 | m      | NULL   | NULL   | NULL   | k      |
| NULL   | p      |      6 | h      | NULL   | NULL   | c      | p      |
| NULL   | t      |   NULL | j      | d      | NULL   | x      | t      |
| a      | n      |   NULL | NULL   | d      | a      | r      | n      |
| b      | b      |   NULL | NULL   | NULL   | b      | m      | b      |
| o      | NULL   |      8 | t      | b      | o      | h      | NULL   |
| o      | c      |      5 | n      | q      | o      | m      | c      |
| o      | j      |      6 | g      | NULL   | o      | s      | j      |
| p      | i      |      3 | f      | NULL   | p      | g      | i      |
| q      | g      |   NULL | z      | d      | q      | n      | g      |
| q      | r      |      5 | d      | q      | q      | NULL   | r      |
| s      | NULL   |      6 | f      | NULL   | s      | f      | NULL   |
| x      | i      |      5 | m      | q      | x      | q      | i      |
| x      | i      |      8 | j      | b      | x      | a      | i      |
| y      | i      |      8 | d      | b      | y      | s      | i      |
| z      | h      |      5 | k      | q      | z      | b      | h      |
+--------+--------+--------+--------+--------+--------+--------+--------+

EXPLAIN SELECT /*+no_rewrite*/ DISTINCT MIN(DISTINCT table1 . `col_varchar_10`) AS field1,
                table1 . col_varchar_10_key AS field2,
                table2 . `col_int_key` AS field3,
                table1 . `col_varchar_key` AS field4,
                table2 . col_varchar_20_key AS field5,
                MIN(table1 . `col_varchar_10`) AS field6,
                table1 . col_varchar_20_key AS field7,
                table1 . col_varchar_10_key AS field8
FROM (CC AS table1
      RIGHT OUTER JOIN CC AS table2 ON (table2 . `pk` = table1 . `col_int`))
WHERE (
         (SELECT MAX(SUBQUERY1_t1 . `pk`) AS SUBQUERY1_field1
          FROM (CC AS SUBQUERY1_t1
                INNER JOIN CC AS SUBQUERY1_t2 ON (SUBQUERY1_t2 . `col_int` = SUBQUERY1_t1 . `pk`
                                                  AND SUBQUERY1_t2 . `col_varchar_10_key` >=
                                                    (SELECT MAX(CHILD_SUBQUERY1_t1 . `col_varchar_20`) AS CHILD_SUBQUERY1_field1
                                                     FROM (CC AS CHILD_SUBQUERY1_t1
                                                           INNER JOIN D AS CHILD_SUBQUERY1_t2 ON (CHILD_SUBQUERY1_t2 . `pk` = CHILD_SUBQUERY1_t1 . `col_int`)))))) IS NULL)
  OR table1 . `col_varchar_key` <= 'n'
GROUP BY field2,
         field3,
         field4,
         field5,
         field7,
         field8
ORDER BY 1,
         field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8;
Query Plan
=======================================================================
|ID|OPERATOR                        |NAME              |EST. ROWS|COST|
-----------------------------------------------------------------------
|0 |SORT                            |                  |1        |192 |
|1 | MERGE GROUP BY                 |                  |1        |192 |
|2 |  SORT                          |                  |1        |192 |
|3 |   SUBPLAN FILTER               |                  |1        |192 |
|4 |    MERGE OUTER JOIN            |                  |1        |91  |
|5 |     TABLE SCAN                 |table2            |1        |46  |
|6 |     SORT                       |                  |1        |46  |
|7 |      TABLE SCAN                |table1            |1        |46  |
|8 |    SCALAR GROUP BY             |                  |1        |101 |
|9 |     NESTED-LOOP JOIN           |                  |1        |101 |
|10|      NESTED-LOOP JOIN          |                  |1        |99  |
|11|       TABLE SCAN               |SUBQUERY1_t2      |1        |46  |
|12|       MATERIAL                 |                  |1        |53  |
|13|        SUBPLAN SCAN            |VIEW1             |1        |53  |
|14|         SCALAR GROUP BY        |                  |1        |53  |
|15|          NESTED-LOOP JOIN      |                  |1        |53  |
|16|           TABLE SCAN           |CHILD_SUBQUERY1_t1|1        |46  |
|17|           DISTRIBUTED TABLE GET|CHILD_SUBQUERY1_t2|1        |7   |
|18|      DISTRIBUTED TABLE GET     |SUBQUERY1_t1      |1        |7   |
=======================================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(distinct table1.col_varchar_10)], [table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [T_FUN_MIN(table1.col_varchar_10)], [table1.col_varchar_20_key], [table1.col_varchar_10_key]), filter(nil), rowset=256, sort_keys([T_FUN_MIN(distinct table1.col_varchar_10), ASC], [table1.col_varchar_10_key, ASC], [table2.col_int_key, ASC], [table1.col_varchar_key, ASC], [table2.col_varchar_20_key, ASC], [T_FUN_MIN(table1.col_varchar_10), ASC], [table1.col_varchar_20_key, ASC])
  1 - output([T_FUN_MIN(distinct table1.col_varchar_10)], [table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [T_FUN_MIN(table1.col_varchar_10)], [table1.col_varchar_20_key]), filter(nil), rowset=256,
      group([table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [table1.col_varchar_20_key], [table1.col_varchar_10_key]), agg_func([T_FUN_MIN(distinct table1.col_varchar_10)], [T_FUN_MIN(table1.col_varchar_10)])
  2 - output([table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [table1.col_varchar_20_key], [table1.col_varchar_10]), filter(nil), rowset=256, sort_keys([table1.col_varchar_10_key, ASC], [table2.col_int_key, ASC], [table1.col_varchar_key, ASC], [table2.col_varchar_20_key, ASC], [table1.col_varchar_20_key, ASC], [table1.col_varchar_10_key, ASC])
  3 - output([table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [table1.col_varchar_20_key], [table1.col_varchar_10]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_IS, subquery(1), NULL, 0)]), init_plan_idxs_(nil)
  4 - output([table1.col_varchar_10_key], [table2.col_int_key], [table1.col_varchar_key], [table2.col_varchar_20_key], [table1.col_varchar_20_key], [table1.col_varchar_10]), filter([? OR table1.col_varchar_key <= 'n']), rowset=256,
      equal_conds([table2.pk = table1.col_int]), other_conds(nil)
  5 - output([table2.pk], [table2.col_int_key], [table2.col_varchar_20_key]), filter(nil), rowset=256,
      access([table2.pk], [table2.col_int_key], [table2.col_varchar_20_key]), partitions(p0)
  6 - output([table1.col_varchar_10_key], [table1.col_varchar_key], [table1.col_varchar_20_key], [table1.col_varchar_10], [table1.col_int]), filter(nil), rowset=256, sort_keys([table1.col_int, ASC])
  7 - output([table1.col_int], [table1.col_varchar_key], [table1.col_varchar_10], [table1.col_varchar_10_key], [table1.col_varchar_20_key]), filter(nil), rowset=256,
      access([table1.col_int], [table1.col_varchar_key], [table1.col_varchar_10], [table1.col_varchar_10_key], [table1.col_varchar_20_key]), partitions(p0)
  8 - output([T_FUN_MAX(SUBQUERY1_t1.pk)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(SUBQUERY1_t1.pk)])
  9 - output([SUBQUERY1_t1.pk]), filter(nil), rowset=256,
      conds(nil), nl_params_([SUBQUERY1_t2.col_int])
  10 - output([SUBQUERY1_t2.col_int]), filter(nil), rowset=256,
      conds([SUBQUERY1_t2.col_varchar_10_key >= VIEW1.CHILD_SUBQUERY1_field1]), nl_params_(nil)
  11 - output([SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_varchar_10_key]), filter(nil), rowset=256,
      access([SUBQUERY1_t2.col_int], [SUBQUERY1_t2.col_varchar_10_key]), partitions(p0)
  12 - output([VIEW1.CHILD_SUBQUERY1_field1]), filter(nil), rowset=256
  13 - output([VIEW1.CHILD_SUBQUERY1_field1]), filter(nil), rowset=256,
      access([VIEW1.CHILD_SUBQUERY1_field1])
  14 - output([T_FUN_MAX(CHILD_SUBQUERY1_t1.col_varchar_20)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(CHILD_SUBQUERY1_t1.col_varchar_20)])
  15 - output([CHILD_SUBQUERY1_t1.col_varchar_20]), filter(nil), rowset=256,
      conds(nil), nl_params_([CHILD_SUBQUERY1_t1.col_int])
  16 - output([CHILD_SUBQUERY1_t1.col_int], [CHILD_SUBQUERY1_t1.col_varchar_20]), filter(nil), rowset=256,
      access([CHILD_SUBQUERY1_t1.col_int], [CHILD_SUBQUERY1_t1.col_varchar_20]), partitions(p0)
  17 - output(nil), filter(nil), rowset=256,
      access([GROUP_ID]), partitions(p0)
  18 - output([SUBQUERY1_t1.pk]), filter(nil), rowset=256,
      access([GROUP_ID], [SUBQUERY1_t1.pk]), partitions(p0)

SELECT /*+no_rewrite*/ DISTINCT MIN(DISTINCT table1 . `col_varchar_10`) AS field1,
                table1 . col_varchar_10_key AS field2,
                table2 . `col_int_key` AS field3,
                table1 . `col_varchar_key` AS field4,
                table2 . col_varchar_20_key AS field5,
                MIN(table1 . `col_varchar_10`) AS field6,
                table1 . col_varchar_20_key AS field7,
                table1 . col_varchar_10_key AS field8
FROM (CC AS table1
      RIGHT OUTER JOIN CC AS table2 ON (table2 . `pk` = table1 . `col_int`))
WHERE (
         (SELECT MAX(SUBQUERY1_t1 . `pk`) AS SUBQUERY1_field1
          FROM (CC AS SUBQUERY1_t1
                INNER JOIN CC AS SUBQUERY1_t2 ON (SUBQUERY1_t2 . `col_int` = SUBQUERY1_t1 . `pk`
                                                  AND SUBQUERY1_t2 . `col_varchar_10_key` >=
                                                    (SELECT MAX(CHILD_SUBQUERY1_t1 . `col_varchar_20`) AS CHILD_SUBQUERY1_field1
                                                     FROM (CC AS CHILD_SUBQUERY1_t1
                                                           INNER JOIN D AS CHILD_SUBQUERY1_t2 ON (CHILD_SUBQUERY1_t2 . `pk` = CHILD_SUBQUERY1_t1 . `col_int`)))))) IS NULL)
  OR table1 . `col_varchar_key` <= 'n'
GROUP BY field2,
         field3,
         field4,
         field5,
         field7,
         field8
ORDER BY 1,
         field1,
         field2,
         field3,
         field4,
         field5,
         field6,
         field7,
         field8;
+--------+--------+--------+--------+--------+--------+--------+--------+
| field1 | field2 | field3 | field4 | field5 | field6 | field7 | field8 |
+--------+--------+--------+--------+--------+--------+--------+--------+
| NULL   | NULL   |   NULL | NULL   | g      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      0 | NULL   | e      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      0 | NULL   | j      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      0 | NULL   | s      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      1 | NULL   | NULL   | NULL   | NULL   | NULL   |
| NULL   | NULL   |      1 | NULL   | a      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      1 | NULL   | f      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      1 | NULL   | n      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      2 | NULL   | r      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      2 | NULL   | s      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      2 | k      | NULL   | NULL   | v      | NULL   |
| NULL   | NULL   |      3 | NULL   | NULL   | NULL   | NULL   | NULL   |
| NULL   | NULL   |      4 | NULL   | m      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      4 | NULL   | o      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      4 | NULL   | x      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      5 | NULL   | m      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      5 | NULL   | v      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      6 | NULL   | NULL   | NULL   | NULL   | NULL   |
| NULL   | NULL   |      7 | NULL   | j      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      8 | NULL   | s      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      9 | NULL   | c      | NULL   | NULL   | NULL   |
| NULL   | NULL   |      9 | NULL   | h      | NULL   | NULL   | NULL   |
| NULL   | k      |      2 | m      | NULL   | NULL   | NULL   | k      |
| NULL   | p      |      6 | h      | NULL   | NULL   | c      | p      |
| NULL   | t      |   NULL | j      | d      | NULL   | x      | t      |
| a      | n      |   NULL | NULL   | d      | a      | r      | n      |
| b      | b      |   NULL | NULL   | NULL   | b      | m      | b      |
| o      | NULL   |      8 | t      | b      | o      | h      | NULL   |
| o      | c      |      5 | n      | q      | o      | m      | c      |
| o      | j      |      6 | g      | NULL   | o      | s      | j      |
| p      | i      |      3 | f      | NULL   | p      | g      | i      |
| q      | g      |   NULL | z      | d      | q      | n      | g      |
| q      | r      |      5 | d      | q      | q      | NULL   | r      |
| s      | NULL   |      6 | f      | NULL   | s      | f      | NULL   |
| x      | i      |      5 | m      | q      | x      | q      | i      |
| x      | i      |      8 | j      | b      | x      | a      | i      |
| y      | i      |      8 | d      | b      | y      | s      | i      |
| z      | h      |      5 | k      | q      | z      | b      | h      |
+--------+--------+--------+--------+--------+--------+--------+--------+

##简化case
EXPLAIN SELECT MIN(DISTINCT col_varchar_10), MIN(col_varchar_10) FROM CC WHERE (SELECT /*+unnest*/ MAX(pk) FROM CC) IS NULL;
Query Plan
===========================================
|ID|OPERATOR         |NAME |EST. ROWS|COST|
-------------------------------------------
|0 |SCALAR GROUP BY  |     |1        |46  |
|1 | SUBPLAN SCAN    |VIEW1|0        |46  |
|2 |  WINDOW FUNCTION|     |1        |46  |
|3 |   TABLE SCAN    |cc   |1        |46  |
===========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(VIEW1.cc.col_varchar_10)], [T_FUN_MIN(VIEW1.cc.col_varchar_10)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(VIEW1.cc.col_varchar_10)])
  1 - output([VIEW1.cc.col_varchar_10]), filter([(T_OP_IS, VIEW1.MAX(pk), NULL, 0)]), rowset=256,
      access([VIEW1.MAX(pk)], [VIEW1.cc.col_varchar_10])
  2 - output([T_FUN_MAX(cc.pk)], [cc.col_varchar_10]), filter(nil), rowset=256,
      win_expr(T_FUN_MAX(cc.pk)), partition_by(nil), order_by(nil), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(UNBOUNDED FOLLOWING)
  3 - output([cc.pk], [cc.col_varchar_10]), filter(nil), rowset=256,
      access([cc.pk], [cc.col_varchar_10]), partitions(p0)

SELECT MIN(DISTINCT col_varchar_10), MIN(col_varchar_10) FROM CC WHERE (SELECT /*+unnest*/ MAX(pk) FROM CC) IS NULL;
+------------------------------+---------------------+
| MIN(DISTINCT col_varchar_10) | MIN(col_varchar_10) |
+------------------------------+---------------------+
| NULL                         | NULL                |
+------------------------------+---------------------+
EXPLAIN SELECT /*+no_rewrite*/ MIN(DISTINCT col_varchar_10), MIN(col_varchar_10) FROM CC WHERE (SELECT /*+unnest*/ MAX(pk) FROM CC) IS NULL;
Query Plan
===========================================================
|ID|OPERATOR                   |NAME       |EST. ROWS|COST|
-----------------------------------------------------------
|0 |SCALAR GROUP BY            |           |1        |46  |
|1 | NESTED-LOOP JOIN CARTESIAN|           |0        |46  |
|2 |  SUBPLAN SCAN             |VIEW1      |0        |46  |
|3 |   SCALAR GROUP BY         |           |1        |46  |
|4 |    SUBPLAN SCAN           |VIEW2      |1        |46  |
|5 |     TABLE SCAN            |cc(Reverse)|1        |46  |
|6 |  TABLE SCAN               |cc         |1        |46  |
===========================================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MIN(distinct cc.col_varchar_10)], [T_FUN_MIN(cc.col_varchar_10)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MIN(distinct cc.col_varchar_10)], [T_FUN_MIN(cc.col_varchar_10)])
  1 - output([cc.col_varchar_10]), filter(nil), rowset=256,
      conds(nil), nl_params_(nil)
  2 - output(nil), filter([(T_OP_IS, VIEW1.MAX(pk), NULL, 0)]), rowset=256,
      access([VIEW1.MAX(pk)])
  3 - output([T_FUN_MAX(VIEW2.cc.pk)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_MAX(VIEW2.cc.pk)])
  4 - output([VIEW2.cc.pk]), filter(nil), rowset=256,
      access([VIEW2.cc.pk])
  5 - output([cc.pk]), filter(nil), rowset=256,
      access([cc.pk]), partitions(p0),
      limit(1), offset(nil)
  6 - output([cc.col_varchar_10]), filter(nil), rowset=256,
      access([cc.col_varchar_10]), partitions(p0)

SELECT /*+no_rewrite*/ MIN(DISTINCT col_varchar_10), MIN(col_varchar_10) FROM CC WHERE (SELECT /*+unnest*/ MAX(pk) FROM CC) IS NULL;
+------------------------------+---------------------+
| MIN(DISTINCT col_varchar_10) | MIN(col_varchar_10) |
+------------------------------+---------------------+
| NULL                         | NULL                |
+------------------------------+---------------------+

drop table `d`, `cc`;

##test remove win func after remove distinct in win func
drop table if exists t1;
create table t1(a int, b int);

EXPLAIN select max(distinct a) over(order by a), max(a) over(order by a) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |WINDOW FUNCTION|    |1        |46  |
|1 | SORT          |    |1        |46  |
|2 |  TABLE SCAN   |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(t1.a)], [T_FUN_MAX(t1.a)]), filter(nil), rowset=256,
      win_expr(T_FUN_MAX(t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
  1 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select max(distinct a) over(order by a), max(a) over(order by a) from t1;
+----------------------------------+-------------------------+
| max(distinct a) over(order by a) | max(a) over(order by a) |
+----------------------------------+-------------------------+
|                                1 |                       1 |
|                                2 |                       2 |
|                                3 |                       3 |
|                                4 |                       4 |
+----------------------------------+-------------------------+
EXPLAIN select /*+no_rewrite*/max(distinct a) over(order by a), max(a) over(order by a) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |WINDOW FUNCTION|    |1        |47  |
|1 | SORT          |    |1        |46  |
|2 |  TABLE SCAN   |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(distinct t1.a)], [T_FUN_MAX(t1.a)]), filter(nil), rowset=256,
      win_expr(T_FUN_MAX(distinct t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
      win_expr(T_FUN_MAX(t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
  1 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select /*+no_rewrite*/max(distinct a) over(order by a), max(a) over(order by a) from t1;
+----------------------------------+-------------------------+
| max(distinct a) over(order by a) | max(a) over(order by a) |
+----------------------------------+-------------------------+
|                                1 |                       1 |
|                                2 |                       2 |
|                                3 |                       3 |
|                                4 |                       4 |
+----------------------------------+-------------------------+

EXPLAIN select max(distinct a) over(order by a), max(a) over(order by a), min(a) over(order by a) , min(distinct a) over(order by a) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |WINDOW FUNCTION|    |1        |47  |
|1 | SORT          |    |1        |46  |
|2 |  TABLE SCAN   |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(t1.a)], [T_FUN_MAX(t1.a)], [T_FUN_MIN(t1.a)], [T_FUN_MIN(t1.a)]), filter(nil), rowset=256,
      win_expr(T_FUN_MAX(t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
      win_expr(T_FUN_MIN(t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
  1 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select max(distinct a) over(order by a), max(a) over(order by a), min(a) over(order by a) , min(distinct a) over(order by a) from t1;
+----------------------------------+-------------------------+-------------------------+----------------------------------+
| max(distinct a) over(order by a) | max(a) over(order by a) | min(a) over(order by a) | min(distinct a) over(order by a) |
+----------------------------------+-------------------------+-------------------------+----------------------------------+
|                                1 |                       1 |                       1 |                                1 |
|                                2 |                       2 |                       1 |                                1 |
|                                3 |                       3 |                       1 |                                1 |
|                                4 |                       4 |                       1 |                                1 |
+----------------------------------+-------------------------+-------------------------+----------------------------------+
EXPLAIN select /*+no_rewrite*/max(distinct a) over(order by a), max(a) over(order by a), min(a) over(order by a), min(distinct a) over(order by a) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |WINDOW FUNCTION|    |1        |48  |
|1 | SORT          |    |1        |46  |
|2 |  TABLE SCAN   |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([T_FUN_MAX(distinct t1.a)], [T_FUN_MAX(t1.a)], [T_FUN_MIN(t1.a)], [T_FUN_MIN(distinct t1.a)]), filter(nil), rowset=256,
      win_expr(T_FUN_MAX(distinct t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
      win_expr(T_FUN_MAX(t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
      win_expr(T_FUN_MIN(t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
      win_expr(T_FUN_MIN(distinct t1.a)), partition_by(nil), order_by([t1.a, ASC]), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(CURRENT ROW)
  1 - output([t1.a]), filter(nil), rowset=256, sort_keys([t1.a, ASC])
  2 - output([t1.a]), filter(nil), rowset=256,
      access([t1.a]), partitions(p0)

select /*+no_rewrite*/max(distinct a) over(order by a), max(a) over(order by a), min(a) over(order by a), min(distinct a) over(order by a) from t1;
+----------------------------------+-------------------------+-------------------------+----------------------------------+
| max(distinct a) over(order by a) | max(a) over(order by a) | min(a) over(order by a) | min(distinct a) over(order by a) |
+----------------------------------+-------------------------+-------------------------+----------------------------------+
|                                1 |                       1 |                       1 |                                1 |
|                                2 |                       2 |                       1 |                                1 |
|                                3 |                       3 |                       1 |                                1 |
|                                4 |                       4 |                       1 |                                1 |
+----------------------------------+-------------------------+-------------------------+----------------------------------+

##bug:
drop table if exists t1, t2;
create table t1(a int, b int);
create table t2(a int, b int);

EXPLAIN insert into t1 select * from t2 order by a;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t2             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)])
  1 - output([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b])
  2 - output([t2.a], [t2.b]), filter(nil), rowset=256, sort_keys([t2.a, ASC])
  3 - output([t2.a], [t2.b]), filter(nil), rowset=256,
      access([t2.a], [t2.b]), partitions(p0)

insert into t1 select * from t2 order by a;
select/**/ * from t1;
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
+------+------+
EXPLAIN insert into t1 select * from t2 where a > 1 order by a, b;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |53  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t2             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)])
  1 - output([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b])
  2 - output([t2.a], [t2.b]), filter(nil), rowset=256, sort_keys([t2.a, ASC], [t2.b, ASC])
  3 - output([t2.a], [t2.b]), filter([t2.a > 1]), rowset=256,
      access([t2.a], [t2.b]), partitions(p0)

insert into t1 select * from t2 where a > 1 order by a, b;
select/**/ * from t1;
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    2 |    2 |
|    3 |    3 |
+------+------+
EXPLAIN insert into t1 select * from t2 where a in (select a from t2 order by a) order by a;
Query Plan
=================================================
|ID|OPERATOR     |NAME           |EST. ROWS|COST|
-------------------------------------------------
|0 |INSERT       |               |1        |59  |
|1 | SUBPLAN SCAN|ANONYMOUS_VIEW1|1        |46  |
|2 |  SORT       |               |1        |46  |
|3 |   TABLE SCAN|t2             |1        |46  |
=================================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t1: ({t1: (t1.__pk_increment, t1.a, t1.b)})}]), partitions(p0),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.a)], [column_conv(INT,PS:(11,0),NULL,ANONYMOUS_VIEW1.b)])
  1 - output([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b]), filter(nil), rowset=256,
      access([ANONYMOUS_VIEW1.a], [ANONYMOUS_VIEW1.b])
  2 - output([t2.a], [t2.b]), filter(nil), rowset=256, sort_keys([t2.a, ASC])
  3 - output([t2.a], [t2.b]), filter([(T_OP_IS_NOT, t2.a, NULL, 0)]), rowset=256,
      access([t2.a], [t2.b]), partitions(p0)

insert into t1 select * from t2 where a in (select a from t2 order by a) order by a;
select/**/ * from t1;
+------+------+
| a    | b    |
+------+------+
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
|    2 |    2 |
|    3 |    3 |
|    1 |    1 |
|    2 |    2 |
|    3 |    3 |
+------+------+


************************消除冗余case when**********

drop table if exists t1;
create table t1 (c1 int, c2 int);
EXPLAIN select * from t1 where case when t1.c1 > 2
                            then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                            else t1.c2 = 5 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 2 THEN t1.c2 = 3 ELSE t1.c2 = 5 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select * from t1 where case when t1.c1 > 2
                            then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                            else t1.c2 = 5 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where case when t1.c1 > 2
                                          then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                          else t1.c2 = 5 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 2 THEN CASE WHEN t1.c1 > 2 THEN t1.c2 = 3 ELSE t1.c2 = 4 END ELSE t1.c2 = 5 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/* from t1 where case when t1.c1 > 2
                                          then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                          else t1.c2 = 5 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+

EXPLAIN select * from t1 where case when t1.c1 > 1
                            then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                            when t1.c1 > 2
                            then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                            else t1.c2 = 5 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 1 THEN CASE WHEN t1.c1 > 2 THEN t1.c2 = 3 ELSE t1.c2 = 4 END WHEN t1.c1 > 2 THEN t1.c2 = 3 ELSE t1.c2 = 5 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select * from t1 where case when t1.c1 > 1
                            then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                            when t1.c1 > 2
                            then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                            else t1.c2 = 5 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where case when t1.c1 > 1
                                          then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                          when t1.c1 > 2
                                          then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                          else t1.c2 = 5 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 1 THEN CASE WHEN t1.c1 > 2 THEN t1.c2 = 3 ELSE t1.c2 = 4 END WHEN t1.c1 > 2 THEN CASE WHEN t1.c1 > 2 THEN t1.c2 = 3 ELSE t1.c2 = 4 END ELSE t1.c2 = 5 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/* from t1 where case when t1.c1 > 1
                                          then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                          when t1.c1 > 2
                                          then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                          else t1.c2 = 5 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+

EXPLAIN select * from t1 where case when t1.c1 > 2
                            then (case when t1.c1 > 1
                                       then (case when t1.c1 > 1 then t1.c2 = 3 else t1.c2 = 4 end)
                                       else t1.c2 = 5 end)
                            else t1.c2 = 6 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 2 THEN CASE WHEN t1.c1 > 1 THEN t1.c2 = 3 ELSE t1.c2 = 5 END ELSE t1.c2 = 6 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select * from t1 where case when t1.c1 > 2
                            then (case when t1.c1 > 1
                                       then (case when t1.c1 > 1 then t1.c2 = 3 else t1.c2 = 4 end)
                                       else t1.c2 = 5 end)
                            else t1.c2 = 6 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where case when t1.c1 > 2
                                          then (case when t1.c1 > 1
                                                    then (case when t1.c1 > 1 then t1.c2 = 3 else t1.c2 = 4 end)
                                                    else t1.c2 = 5 end)
                                          else t1.c2 = 6 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 2 THEN CASE WHEN t1.c1 > 1 THEN CASE WHEN t1.c1 > 1 THEN t1.c2 = 3 ELSE t1.c2 = 4 END ELSE t1.c2 = 5 END ELSE t1.c2 = 6 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/* from t1 where case when t1.c1 > 2
                                          then (case when t1.c1 > 1
                                                    then (case when t1.c1 > 1 then t1.c2 = 3 else t1.c2 = 4 end)
                                                    else t1.c2 = 5 end)
                                          else t1.c2 = 6 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+
EXPLAIN select * from t1 where case when t1.c1 > 2
                            then (case when t1.c1 > 2
                                       then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                       else t1.c2 = 5 end)
                            else t1.c2 = 6 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 2 THEN t1.c2 = 3 ELSE t1.c2 = 6 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select * from t1 where case when t1.c1 > 2
                            then (case when t1.c1 > 2
                                       then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                       else t1.c2 = 5 end)
                            else t1.c2 = 6 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where case when t1.c1 > 2
                                          then (case when t1.c1 > 2
                                                    then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                                    else t1.c2 = 5 end)
                                          else t1.c2 = 6 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 2 THEN CASE WHEN t1.c1 > 2 THEN CASE WHEN t1.c1 > 2 THEN t1.c2 = 3 ELSE t1.c2 = 4 END ELSE t1.c2 = 5 END ELSE t1.c2 = 6 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/* from t1 where case when t1.c1 > 2
                                          then (case when t1.c1 > 2
                                                    then (case when t1.c1 > 2 then t1.c2 = 3 else t1.c2 = 4 end)
                                                    else t1.c2 = 5 end)
                                          else t1.c2 = 6 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+
EXPLAIN select * from t1 where case when t1.c1 > 2
                            then (case when t1.c1 > 1
                                       then t1.c2 = 3
                                       when t1.c1 > 2
                                       then t1.c2 = 4
                                       else t1.c2 = 5 end)
                            else t1.c2 = 6 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 2 THEN CASE WHEN t1.c1 > 1 THEN t1.c2 = 3 WHEN t1.c1 > 2 THEN t1.c2 = 4 ELSE t1.c2 = 5 END ELSE t1.c2 = 6 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select * from t1 where case when t1.c1 > 2
                            then (case when t1.c1 > 1
                                       then t1.c2 = 3
                                       when t1.c1 > 2
                                       then t1.c2 = 4
                                       else t1.c2 = 5 end)
                            else t1.c2 = 6 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where case when t1.c1 > 2
                                          then (case when t1.c1 > 1
                                                    then t1.c2 = 3
                                                    when t1.c1 > 2
                                                    then t1.c2 = 4
                                                    else t1.c2 = 5 end)
                                          else t1.c2 = 6 end;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |1        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([CASE WHEN t1.c1 > 2 THEN CASE WHEN t1.c1 > 1 THEN t1.c2 = 3 WHEN t1.c1 > 2 THEN t1.c2 = 4 ELSE t1.c2 = 5 END ELSE t1.c2 = 6 END]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/* from t1 where case when t1.c1 > 2
                                          then (case when t1.c1 > 1
                                                    then t1.c2 = 3
                                                    when t1.c1 > 2
                                                    then t1.c2 = 4
                                                    else t1.c2 = 5 end)
                                          else t1.c2 = 6 end;
+------+------+
| c1   | c2   |
+------+------+
|    3 |    3 |
+------+------+

EXPLAIN select 1
from   (select 40 as c0
        from mysql.time_zone as ref_1
        limit  89) AS subq_0
where  exists (
  select 71 as c0 from mysql.time_zone_name as ref_3 right join mysql.time_zone as ref_4
  on (exists (select subq_0.c0 as c0 from mysql.time_zone_transition ) or subq_0.c0 is not null)
);
Query Plan
=========================================================
|ID|OPERATOR      |NAME                  |EST. ROWS|COST|
---------------------------------------------------------
|0 |SUBPLAN FILTER|                      |1        |91  |
|1 | SUBPLAN SCAN |subq_0                |1        |46  |
|2 |  TABLE SCAN  |__all_tenant_time_zone|1        |46  |
|3 | TABLE SCAN   |__all_tenant_time_zone|1        |46  |
=========================================================

Outputs & filters:
-------------------------------------
  0 - output([1]), filter(nil),
      exec_params_(nil), onetime_exprs_([(T_OP_EXISTS, subquery(1))]), init_plan_idxs_(nil)
  1 - output(nil), filter(nil), startup_filter([?]),
      access(nil)
  2 - output([40]), filter(nil),
      access(nil), partitions(p0),
      limit(89), offset(nil)
  3 - output([71]), filter(nil),
      access(nil), partitions(p0),
      limit(1), offset(nil)

select 1
from   (select 40 as c0
        from mysql.time_zone as ref_1
        limit  89) AS subq_0
where  exists (
  select 71 as c0 from mysql.time_zone_name as ref_3 right join mysql.time_zone as ref_4
  on (exists (select subq_0.c0 as c0 from mysql.time_zone_transition ) or subq_0.c0 is not null)
);
+---+
| 1 |
+---+
+---+

EXPLAIN select subq_1.c10 as c5
from   (select case when ( exists (select ref_2.c2 as c0,
                                          ref_2.c1 as c1
                                   from   mysql.time_zone_transition_type as ref_6)
                      ) then 60 end as c10,
               ref_2.c1 as c12
        from   t1 as ref_2) as subq_1
where  exists (select subq_1.c10 as c0
               from   mysql.time_zone_name as ref_16
                      inner join t2 as ref_17
                      on (subq_1.c12 is not null) );
Query Plan
==========================================================================================
|ID|OPERATOR                       |NAME                                  |EST. ROWS|COST|
------------------------------------------------------------------------------------------
|0 |SUBPLAN FILTER                 |                                      |1        |182 |
|1 | NESTED-LOOP JOIN CARTESIAN    |                                      |1        |137 |
|2 |  TABLE SCAN                   |ref_2                                 |1        |46  |
|3 |  MATERIAL                     |                                      |1        |91  |
|4 |   SUBPLAN SCAN                |VIEW3                                 |1        |91  |
|5 |    LIMIT                      |                                      |1        |91  |
|6 |     NESTED-LOOP JOIN CARTESIAN|                                      |1        |91  |
|7 |      SUBPLAN SCAN             |VIEW1                                 |1        |46  |
|8 |       TABLE SCAN              |__all_tenant_time_zone_name           |1        |46  |
|9 |      MATERIAL                 |                                      |1        |46  |
|10|       SUBPLAN SCAN            |VIEW2                                 |1        |46  |
|11|        TABLE SCAN             |ref_17                                |1        |46  |
|12| TABLE SCAN                    |__all_tenant_time_zone_transition_type|1        |46  |
==========================================================================================

Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN (T_OP_EXISTS, subquery(1)) THEN 60 ELSE NULL END]), filter(nil),
      exec_params_([ref_2.c2], [ref_2.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([ref_2.c2], [ref_2.c1]), filter(nil),
      conds(nil), nl_params_(nil)
  2 - output([ref_2.c2], [ref_2.c1]), filter([(T_OP_IS_NOT, ref_2.c1, NULL, 0)]),
      access([ref_2.c2], [ref_2.c1]), partitions(p0)
  3 - output(nil), filter(nil)
  4 - output(nil), filter(nil),
      access(nil)
  5 - output([1]), filter(nil), limit(1), offset(nil)
  6 - output(nil), filter(nil),
      conds(nil), nl_params_(nil)
  7 - output(nil), filter(nil),
      access(nil)
  8 - output(nil), filter(nil),
      access(nil), partitions(p0),
      limit(1), offset(nil)
  9 - output(nil), filter(nil)
  10 - output(nil), filter(nil),
      access(nil)
  11 - output([1]), filter(nil),
      access(nil), partitions(p0),
      limit(1), offset(nil)
  12 - output([?], [?]), filter(nil),
      access(nil), partitions(p0),
      limit(1), offset(nil)

select subq_1.c10 as c5
from   (select case when ( exists (select ref_2.c2 as c0,
                                          ref_2.c1 as c1
                                   from   mysql.time_zone_transition_type as ref_6)
                      ) then 60 end as c10,
               ref_2.c1 as c12
        from   t1 as ref_2) as subq_1
where  exists (select subq_1.c10 as c0
               from   mysql.time_zone_name as ref_16
                      inner join t2 as ref_17
                      on (subq_1.c12 is not null) );
+------+
| c5   |
+------+
+------+

drop table if exists t1;
drop table if exists t2;

drop table if exists t1, t2;
create table t1 (c1 int, c2 int);
create table t2 (c1 int, c2 int);

EXPLAIN select (select (select 'x' from t2 where t1.c1 = t2.c1) from dual where t1.c2 = 3) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |91  |
|1 | TABLE SCAN    |t1  |1        |46  |
|2 | SUBPLAN FILTER|    |1        |46  |
|3 |  EXPRESSION   |    |1        |1   |
|4 |  TABLE SCAN   |t2  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1], [t1.c2 = 3]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c2], [t1.c1]), filter(nil), rowset=256,
      access([t1.c2], [t1.c1]), partitions(p0)
  2 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  3 - output([1]), filter([?])
      values({1})
  4 - output(['x']), filter([? = t2.c1]), rowset=256,
      access([t2.c1]), partitions(p0)

select (select (select 'x' from t2 where t1.c1 = t2.c1) from dual where t1.c2 = 3) from t1;
+-----------------------------------------------------------------------------+
| (select (select 'x' from t2 where t1.c1 = t2.c1) from dual where t1.c2 = 3) |
+-----------------------------------------------------------------------------+
| NULL                                                                        |
| NULL                                                                        |
| NULL                                                                        |
| NULL                                                                        |
+-----------------------------------------------------------------------------+
EXPLAIN select (select 'x' from t2 where t1.c1 = t2.c1 and t1.c2 = 3) from t1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1], [t1.c2 = 3]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output(['x']), filter([? = t2.c1]), startup_filter([?]), rowset=256,
      access([t2.c1]), partitions(p0)

select (select 'x' from t2 where t1.c1 = t2.c1 and t1.c2 = 3) from t1;
+--------------------------------------------------------+
| (select 'x' from t2 where t1.c1 = t2.c1 and t1.c2 = 3) |
+--------------------------------------------------------+
| NULL                                                   |
| NULL                                                   |
| NULL                                                   |
| NULL                                                   |
+--------------------------------------------------------+

EXPLAIN select (select (select 'x' from t2 where t1.c1 = t2.c1) from dual) from t1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output(['x']), filter([? = t2.c1]), rowset=256,
      access([t2.c1]), partitions(p0)

select (select (select 'x' from t2 where t1.c1 = t2.c1) from dual) from t1;
+-------------------------------------------------------------+
| (select (select 'x' from t2 where t1.c1 = t2.c1) from dual) |
+-------------------------------------------------------------+
| x                                                           |
| x                                                           |
| NULL                                                        |
| NULL                                                        |
+-------------------------------------------------------------+
EXPLAIN select (select 'x' from t2 where t1.c1 = t2.c1) from t1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([subquery(1)]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output(['x']), filter([? = t2.c1]), rowset=256,
      access([t2.c1]), partitions(p0)

select (select 'x' from t2 where t1.c1 = t2.c1) from t1;
+------------------------------------------+
| (select 'x' from t2 where t1.c1 = t2.c1) |
+------------------------------------------+
| x                                        |
| x                                        |
| NULL                                     |
| NULL                                     |
+------------------------------------------+

EXPLAIN select (select case when exists (select 'x' from t2 where t1.c1 = t2.c1) then 'a' else 'b' end) from t1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN (T_OP_EXISTS, subquery(1)) THEN 'a' ELSE 'b' END]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output(['x']), filter([? = t2.c1]), rowset=256,
      access([t2.c1]), partitions(p0),
      limit(1), offset(nil)

select (select case when exists (select 'x' from t2 where t1.c1 = t2.c1) then 'a' else 'b' end) from t1;
+------------------------------------------------------------------------------------------+
| (select case when exists (select 'x' from t2 where t1.c1 = t2.c1) then 'a' else 'b' end) |
+------------------------------------------------------------------------------------------+
| a                                                                                        |
| a                                                                                        |
| b                                                                                        |
| b                                                                                        |
+------------------------------------------------------------------------------------------+
EXPLAIN select case when exists (select 'x' from t2 where t1.c1 = t2.c1) then 'a' else 'b' end from t1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |1        |91  |
|1 | TABLE SCAN   |t1  |1        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([CASE WHEN (T_OP_EXISTS, subquery(1)) THEN 'a' ELSE 'b' END]), filter(nil), rowset=256,
      exec_params_([t1.c1]), onetime_exprs_(nil), init_plan_idxs_(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output(['x']), filter([? = t2.c1]), rowset=256,
      access([t2.c1]), partitions(p0),
      limit(1), offset(nil)

select case when exists (select 'x' from t2 where t1.c1 = t2.c1) then 'a' else 'b' end from t1;
+---------------------------------------------------------------------------------+
| case when exists (select 'x' from t2 where t1.c1 = t2.c1) then 'a' else 'b' end |
+---------------------------------------------------------------------------------+
| a                                                                               |
| a                                                                               |
| b                                                                               |
| b                                                                               |
+---------------------------------------------------------------------------------+

drop table if exists t1, t2;

drop table if exists t1, t2;
create table t1 (pk int, col_char_20 varchar(20));
create table t2 (pk int, col_char_20 varchar(20));

EXPLAIN SELECT coalesce( 1, ( SELECT ( SELECT ( SELECT 1 FROM t1 WHERE   ( col_char_20 <  ( SELECT coalesce( ( SELECT SUM( 1 ) FROM t2 WHERE pk <= 2 ), 1, 1 ) )   )   ) ) ), 1 );
Query Plan
=============================================
|ID|OPERATOR           |NAME |EST. ROWS|COST|
---------------------------------------------
|0 |SUBPLAN FILTER     |     |1        |91  |
|1 | EXPRESSION        |     |1        |1   |
|2 | NESTED-LOOP JOIN  |     |1        |91  |
|3 |  TABLE SCAN       |t1   |1        |46  |
|4 |  MATERIAL         |     |1        |46  |
|5 |   SUBPLAN SCAN    |VIEW1|1        |46  |
|6 |    SCALAR GROUP BY|     |1        |46  |
|7 |     TABLE SCAN    |t2   |1        |46  |
=============================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([coalesce(1, subquery(1), 1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([1]), filter(nil), rowset=256,
      conds([cast(t1.col_char_20, DECIMAL(-1, -1)) < coalesce(VIEW1.SUM( 1 ), cast(1, DECIMAL(20, 0)), cast(1, DECIMAL(20, 0)))]), nl_params_(nil)
  3 - output([t1.col_char_20]), filter(nil), rowset=256,
      access([t1.col_char_20]), partitions(p0)
  4 - output([VIEW1.SUM( 1 )]), filter(nil), rowset=256
  5 - output([VIEW1.SUM( 1 )]), filter(nil), rowset=256,
      access([VIEW1.SUM( 1 )])
  6 - output([T_FUN_SUM(1)]), filter(nil), rowset=256,
      group(nil), agg_func([T_FUN_SUM(1)])
  7 - output(nil), filter([t2.pk <= 2]), rowset=256,
      access([t2.pk]), partitions(p0)

SELECT coalesce( 1, ( SELECT ( SELECT ( SELECT 1 FROM t1 WHERE   ( col_char_20 <  ( SELECT coalesce( ( SELECT SUM( 1 ) FROM t2 WHERE pk <= 2 ), 1, 1 ) )   )   ) ) ), 1 );
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| coalesce( 1, ( SELECT ( SELECT ( SELECT 1 FROM t1 WHERE   ( col_char_20 <  ( SELECT coalesce( ( SELECT SUM( 1 ) FROM t2 WHERE pk <= 2 ), 1, 1 ) )   )   ) ) ), 1 ) |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                                                                  1 |
+--------------------------------------------------------------------------------------------------------------------------------------------------------------------+

drop table if exists t1, t2, t3;
## task: https://work.aone.alibaba-inc.com/issue/38303269 start
explain_protocol: 0
set autocommit=1;
create table t1 (c1 int, c2 int);
create table t2 (c1 int, c2 int);
create table t3 (c1 int, c2 int);
insert into t1 values(1, 1), (2, 2), (NULL, NULL);
insert into t2 values(1, 1), (3, 3);
insert into t3 values(NULL, NULL);

select * from t1;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+
select * from t2;
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    3 |    3 |
+------+------+
select * from t3;
+------+------+
| c1   | c2   |
+------+------+
| NULL | NULL |
+------+------+
explain_protocol: 2
EXPLAIN select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |2        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |2        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
+------+------+

EXPLAIN select * from t1 where not 1 in (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |3        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |2        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([1 != ALL(subquery(1))]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([?]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not 1 in (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not 1 in (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |3        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |2        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([(T_OP_NOT, 1 = ANY(subquery(1)))]), init_plan_idxs_(nil)
  1 - output([t1.c1], [t1.c2]), filter(nil), startup_filter([?]), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not 1 in (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is null);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |0        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([(T_OP_IS, t2.c1, NULL, 0)]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is null);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is null);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |0        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([(T_OP_IS, t2.c1, NULL, 0)]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is null);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+

EXPLAIN select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where not c1 in (select /*+no_unnest*/ c1 from t3));
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |2        |137 |
|1 | TABLE SCAN    |t1  |3        |46  |
|2 | SUBPLAN FILTER|    |1        |91  |
|3 |  TABLE SCAN   |t2  |2        |46  |
|4 |  TABLE SCAN   |t3  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  4 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where not c1 in (select /*+no_unnest*/ c1 from t3));
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where not c1 in (select /*+no_unnest*/ c1 from t3));
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |2        |137 |
|1 | TABLE SCAN    |t1  |3        |46  |
|2 | SUBPLAN FILTER|    |1        |91  |
|3 |  TABLE SCAN   |t2  |2        |46  |
|4 |  TABLE SCAN   |t3  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  3 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)
  4 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where not c1 in (select /*+no_unnest*/ c1 from t3));
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+

EXPLAIN select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+

EXPLAIN insert into t2 values(NULL, NULL);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |1        |13  |
|1 | EXPRESSION       |    |1        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t2: ({t2: (t2.__pk_increment, t2.c1, t2.c2)})}]),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.c1)], [column_conv(INT,PS:(11,0),NULL,__values.c2)])
  1 - output([__values.c1], [__values.c2]), filter(nil)
      values({NULL, NULL})

insert into t2 values(NULL, NULL);
EXPLAIN select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is not null);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([(T_OP_IS_NOT, t2.c1, NULL, 0)]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is not null);
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is not null);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([(T_OP_IS_NOT, t2.c1, NULL, 0)]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is not null);
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
+------+------+

set autocommit=0;
explain_protocol: 0
select stddev(c1) from t1;
+------------+
| stddev(c1) |
+------------+
|        0.5 |
+------------+
explain_protocol: 2
EXPLAIN update t1 set c1 = -2 where not c1 in (select /*+no_unnest*/ c1 from t2 where c1 is not null);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |UPDATE         |    |2        |127 |
|1 | SUBPLAN FILTER|    |2        |91  |
|2 |  TABLE SCAN   |t1  |3        |46  |
|3 |  TABLE SCAN   |t2  |3        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NULL,cast(-2, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)
  3 - output([t2.c1]), filter([(T_OP_IS_NOT, t2.c1, NULL, 0)]), rowset=256,
      access([t2.c1]), partitions(p0)

update t1 set c1 = -2 where not c1 in (select /*+no_unnest*/ c1 from t2 where c1 is not null);
explain_protocol: 0
select stddev(c1) from t1;
+------------+
| stddev(c1) |
+------------+
|        1.5 |
+------------+
rollback;
select stddev(c1) from t1;
+------------+
| stddev(c1) |
+------------+
|        0.5 |
+------------+
explain_protocol: 2
EXPLAIN update /*+no_rewrite*/t1 set c1 = -2 where not c1 in (select /*+no_unnest*/ c1 from t2 where c1 is not null);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |UPDATE         |    |2        |127 |
|1 | SUBPLAN FILTER|    |2        |91  |
|2 |  TABLE SCAN   |t1  |3        |46  |
|3 |  TABLE SCAN   |t2  |3        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}]),
      update([t1.c1=column_conv(INT,PS:(11,0),NULL,cast(-2, INT(-1, 0)))])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)
  3 - output([t2.c1]), filter([(T_OP_IS_NOT, t2.c1, NULL, 0)]), rowset=256,
      access([t2.c1]), partitions(p0)

update /*+no_rewrite*/t1 set c1 = -2 where not c1 in (select /*+no_unnest*/ c1 from t2 where c1 is not null);
explain_protocol: 0
select stddev(c1) from t1;
+------------+
| stddev(c1) |
+------------+
|        1.5 |
+------------+
rollback;

select stddev(c1) from t1;
+------------+
| stddev(c1) |
+------------+
|        0.5 |
+------------+
explain_protocol: 2
EXPLAIN delete from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is not null);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |DELETE         |    |2        |106 |
|1 | SUBPLAN FILTER|    |2        |91  |
|2 |  TABLE SCAN   |t1  |3        |46  |
|3 |  TABLE SCAN   |t2  |3        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)
  3 - output([t2.c1]), filter([(T_OP_IS_NOT, t2.c1, NULL, 0)]), rowset=256,
      access([t2.c1]), partitions(p0)

delete from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is not null);
explain_protocol: 0
select stddev(c1) from t1;
+------------+
| stddev(c1) |
+------------+
|          0 |
+------------+
rollback;
select stddev(c1) from t1;
+------------+
| stddev(c1) |
+------------+
|        0.5 |
+------------+
explain_protocol: 2
EXPLAIN delete /*+no_rewrite*/from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is not null);
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |DELETE         |    |2        |106 |
|1 | SUBPLAN FILTER|    |2        |91  |
|2 |  TABLE SCAN   |t1  |3        |46  |
|3 |  TABLE SCAN   |t2  |3        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil), table_columns([{t1: ({t1: (t1.__pk_increment, t1.c1, t1.c2)})}])
  1 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  2 - output([t1.__pk_increment], [t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1], [t1.c2]), partitions(p0)
  3 - output([t2.c1]), filter([(T_OP_IS_NOT, t2.c1, NULL, 0)]), rowset=256,
      access([t2.c1]), partitions(p0)

delete /*+no_rewrite*/from t1 where not c1 in (select /*+no_unnest*/ c1 from t2 where t2.c1 is not null);
explain_protocol: 0
select stddev(c1) from t1;
+------------+
| stddev(c1) |
+------------+
|          0 |
+------------+
rollback;

explain_protocol: 2
### ============= not c1 not in subquery ==> c1 in subquery
EXPLAIN select * from t1 where not c1 + 1 not in (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 + 1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 + 1 not in (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 + 1 not in (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 + 1 != ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 + 1 not in (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
+------+------+

EXPLAIN select * from t1 where not c1 not in (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 not in (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 not in (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 != ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 not in (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN select * from t1 where not c1 not in (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select * from t1 where not c1 not in (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 not in (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 != ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 not in (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

### ============= not c1 = any subquery ==> c1 != all subquery
EXPLAIN select * from t1 where not c1 + 1 = any (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 + 1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 + 1 = any (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 + 1 = any (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 + 1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 + 1 = any (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN select * from t1 where not c1 = any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 = any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 = any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 = any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+

EXPLAIN select * from t1 where not c1 = any (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 != ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select * from t1 where not c1 = any (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 = any (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 = any (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

###  ============= not c1 != any subquery ==> can not be transformed
EXPLAIN select * from t1 where not c1 != any (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 != ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 != any (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 != any (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 != ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 != any (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

### ============= not c1 != all subquery ==> c1 = any subquery
EXPLAIN select * from t1 where not c1 + 1 != all (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 + 1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 + 1 != all (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    2 |    2 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 + 1 = all (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 + 1 = ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 + 1 = all (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
+------+------+

EXPLAIN select * from t1 where not c1 != all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 != all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 != all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 != ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 != all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN select * from t1 where not c1 != all (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 = ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select * from t1 where not c1 != all (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 != all (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 != ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 != all (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

###  ============= not c1 = all subquery ==> can not be transformed
EXPLAIN select * from t1 where not c1 = all (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 = all (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 = all (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 = ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 = all (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
+------+------+

###  ============= not c1 >= all subquery ==> c1 < any subquery
EXPLAIN select * from t1 where not c1 + 1 >= all (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 + 1 < ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 + 1 >= all (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 + 1 >= all (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 + 1 >= ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 + 1 >= all (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
+------+------+

EXPLAIN select * from t1 where not c1 >= all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 < ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 >= all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 >= all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 >= ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 >= all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN select * from t1 where not c1 >= all (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 < ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select * from t1 where not c1 >= all (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 >= all (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 >= ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 >= all (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

###  ============= not c1 >= any subquery ==> c1 < all subquery
EXPLAIN select * from t1 where not c1 + 1 >= any (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 + 1 < ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 + 1 >= any (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 + 1 >= any (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 + 1 >= ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 + 1 >= any (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN select * from t1 where not c1 >= any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 < ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 >= any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 >= any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 >= ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 >= any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+

EXPLAIN select * from t1 where not c1 >= any (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 < ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select * from t1 where not c1 >= any (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 >= any (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 >= ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 >= any (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

### ============= not c1 > all subquery ==> c1 <= any subquery
EXPLAIN select * from t1 where not c1 + 1 > all (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 + 1 <= ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 + 1 > all (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 + 1 > all (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 + 1 > ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 + 1 > all (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
+------+------+

EXPLAIN select * from t1 where not c1 > all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 <= ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 > all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 > all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 > ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 > all (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN select * from t1 where not c1 > all (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 <= ANY(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select * from t1 where not c1 > all (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 > all (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 > ALL(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 > all (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

### ============= not c1 > any subquery ==> c1 <= all subquery
EXPLAIN select * from t1 where not c1 + 1 > any (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 + 1 <= ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 + 1 > any (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 + 1 > any (select /*+no_unnest*/ c1 from t2);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |3        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 + 1 > ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 + 1 > any (select /*+no_unnest*/ c1 from t2);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

EXPLAIN select * from t1 where not c1 > any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 <= ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select * from t1 where not c1 > any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 > any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t2  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 > ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t2.c1]), filter([t2.c1 < 0]), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 > any (select /*+no_unnest*/ c1 from t2 where t2.c1 < 0);
+------+------+
| c1   | c2   |
+------+------+
|    1 |    1 |
|    2 |    2 |
| NULL | NULL |
+------+------+

EXPLAIN select * from t1 where not c1 > any (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([t1.c1 <= ALL(subquery(1))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select * from t1 where not c1 > any (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+
EXPLAIN select /*+no_rewrite*/* from t1 where not c1 > any (select /*+no_unnest*/ c1 from t3);
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |SUBPLAN FILTER|    |2        |91  |
|1 | TABLE SCAN   |t1  |3        |46  |
|2 | TABLE SCAN   |t3  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [t1.c2]), filter([(T_OP_NOT, t1.c1 > ANY(subquery(1)))]), rowset=256,
      exec_params_(nil), onetime_exprs_(nil), init_plan_idxs_([1])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)
  2 - output([t3.c1]), filter(nil), rowset=256,
      access([t3.c1]), partitions(p0)

select /*+no_rewrite*/* from t1 where not c1 > any (select /*+no_unnest*/ c1 from t3);
+------+------+
| c1   | c2   |
+------+------+
+------+------+

drop table if exists t1, t2, t3;
## task: https://work.aone.alibaba-inc.com/issue/38303269 end
## bug: https://work.aone.alibaba-inc.com/issue/39934374
explain_protocol: 0
drop table if exists t1;
create table t1(c1 int);
insert into t1 values(1);
explain_protocol: 2
EXPLAIN select (SELECT SUM(c1)  FROM t1 GROUP BY c1 WITH ROLLUP) from dual;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |46  |
|1 | EXPRESSION    |    |1        |1   |
|2 | MERGE GROUP BY|    |1        |46  |
|3 |  SORT         |    |1        |46  |
|4 |   TABLE SCAN  |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1]), agg_func([T_FUN_SUM(t1.c1)])
  3 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC])
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select (SELECT SUM(c1)  FROM t1 GROUP BY c1 WITH ROLLUP) from dual;
ERROR 21000: Subquery returns more than 1 row
EXPLAIN select /*+no_rewrie*/(SELECT SUM(c1)  FROM t1 GROUP BY c1 WITH ROLLUP) from dual;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |SUBPLAN FILTER |    |1        |46  |
|1 | EXPRESSION    |    |1        |1   |
|2 | MERGE GROUP BY|    |1        |46  |
|3 |  SORT         |    |1        |46  |
|4 |   TABLE SCAN  |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([?]), filter(nil), rowset=256,
      exec_params_(nil), onetime_exprs_([subquery(1)]), init_plan_idxs_(nil)
  1 - output([1]), filter(nil)
      values({1})
  2 - output([T_FUN_SUM(t1.c1)]), filter(nil), rowset=256,
      group(nil), rollup([t1.c1]), agg_func([T_FUN_SUM(t1.c1)])
  3 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC])
  4 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrie*/(SELECT SUM(c1)  FROM t1 GROUP BY c1 WITH ROLLUP) from dual;
ERROR 21000: Subquery returns more than 1 row
explain_protocol: 0
drop table if exists t1;


************************ group by pruning ************************

explain_protocol: 2
drop table if exists t1, t2;
create table t1 (c1 int);
EXPLAIN insert into t1 values(1);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |1        |13  |
|1 | EXPRESSION       |    |1        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t1: ({t1: (t1.__pk_increment, t1.c1)})}]),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.c1)])
  1 - output([__values.c1]), filter(nil)
      values({1})

insert into t1 values(1);
EXPLAIN insert into t1 values(2);
Query Plan
===========================================
|ID|OPERATOR          |NAME|EST. ROWS|COST|
-------------------------------------------
|0 |DISTRIBUTED INSERT|    |1        |13  |
|1 | EXPRESSION       |    |1        |1   |
===========================================

Outputs & filters:
-------------------------------------
  0 - output(nil), filter(nil),
      columns([{t1: ({t1: (t1.__pk_increment, t1.c1)})}]),
      column_values([T_HIDDEN_PK], [column_conv(INT,PS:(11,0),NULL,__values.c1)])
  1 - output([__values.c1]), filter(nil)
      values({2})

insert into t1 values(2);
create table t2 as select a.c1 c1, b.c1 c2, c.c1 c3 from t1 a, t1 b, t1 c;

EXPLAIN select * from t1;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t1  |2        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from t1;
+------+
| c1   |
+------+
|    1 |
|    2 |
+------+
EXPLAIN select * from t2;
Query Plan
===================================
|ID|OPERATOR  |NAME|EST. ROWS|COST|
-----------------------------------
|0 |TABLE SCAN|t2  |8        |46  |
===================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from t2;
+------+------+------+
| c1   | c2   | c3   |
+------+------+------+
|    1 |    1 |    1 |
|    1 |    1 |    2 |
|    1 |    2 |    1 |
|    1 |    2 |    2 |
|    2 |    1 |    1 |
|    2 |    1 |    2 |
|    2 |    2 |    1 |
|    2 |    2 |    2 |
+------+------+------+

EXPLAIN select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup having c3 = 1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |46  |
|1 | TABLE SCAN  |t2  |1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c3 = 1]), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup having c3 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        1 |
|    1 |    2 |    1 |        1 |
|    2 |    1 |    1 |        1 |
|    2 |    2 |    1 |        1 |
+------+------+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup having c3 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter([t2.c3 = 1]), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup having c3 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        1 |
|    1 |    2 |    1 |        1 |
|    2 |    1 |    1 |        1 |
|    2 |    2 |    1 |        1 |
+------+------+------+----------+

EXPLAIN select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup having c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group([t2.c1]), rollup([t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup having c1 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        1 |
|    1 |    1 |    2 |        1 |
|    1 |    1 | NULL |        2 |
|    1 |    2 |    1 |        1 |
|    1 |    2 |    2 |        1 |
|    1 |    2 | NULL |        2 |
|    1 | NULL | NULL |        4 |
+------+------+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup having c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup having c1 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        1 |
|    1 |    1 |    2 |        1 |
|    1 |    1 | NULL |        2 |
|    1 |    2 |    1 |        1 |
|    1 |    2 |    2 |        1 |
|    1 |    2 | NULL |        2 |
|    1 | NULL | NULL |        4 |
+------+------+------+----------+

EXPLAIN select c1, c2, c3, count(*) from t2 group by c1 desc, c2 asc, c3 desc with rollup having c2 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter([t2.c2 = 1]), rowset=256,
      group([t2.c1], [t2.c2]), rollup([t2.c3]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, DESC])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select c1, c2, c3, count(*) from t2 group by c1 desc, c2 asc, c3 desc with rollup having c2 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    2 |        1 |
|    1 |    1 |    1 |        1 |
|    1 |    1 | NULL |        2 |
|    2 |    1 |    2 |        1 |
|    2 |    1 |    1 |        1 |
|    2 |    1 | NULL |        2 |
+------+------+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1 desc, c2 asc, c3 desc with rollup having c2 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter([t2.c2 = 1]), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, DESC], [t2.c2, ASC], [t2.c3, DESC])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1 desc, c2 asc, c3 desc with rollup having c2 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    2 |    1 |    2 |        1 |
|    2 |    1 |    1 |        1 |
|    2 |    1 | NULL |        2 |
|    1 |    1 |    2 |        1 |
|    1 |    1 |    1 |        1 |
|    1 |    1 | NULL |        2 |
+------+------+------+----------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) where c3 = 1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |1        |46  |
|1 | TABLE SCAN  |t2  |1        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter([t2.c3 = 1]), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) where c3 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        1 |
|    1 |    2 |    1 |        1 |
|    2 |    1 |    1 |        1 |
|    2 |    2 |    1 |        1 |
+------+------+------+----------+
EXPLAIN select /*+no_rewrite*/ * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) where c3 = 1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |47  |
|1 | MERGE GROUP BY|               |8        |47  |
|2 |  SORT         |               |8        |47  |
|3 |   TABLE SCAN  |t2             |8        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [.c2], [.c3], [.count(*)]), filter([.c3 = 1]), rowset=256,
      access([.c3], [.c1], [.c2], [.count(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select /*+no_rewrite*/ * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) where c3 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        1 |
|    1 |    2 |    1 |        1 |
|    2 |    1 |    1 |        1 |
|    2 |    2 |    1 |        1 |
+------+------+------+----------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) where c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group([t2.c1]), rollup([t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) where c1 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        1 |
|    1 |    1 |    2 |        1 |
|    1 |    1 | NULL |        2 |
|    1 |    2 |    1 |        1 |
|    1 |    2 |    2 |        1 |
|    1 |    2 | NULL |        2 |
|    1 | NULL | NULL |        4 |
+------+------+------+----------+
EXPLAIN select /*+no_rewrite*/ * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) where c1 = 1;
Query Plan
===================================================
|ID|OPERATOR       |NAME           |EST. ROWS|COST|
---------------------------------------------------
|0 |SUBPLAN SCAN   |ANONYMOUS_VIEW1|1        |47  |
|1 | MERGE GROUP BY|               |8        |47  |
|2 |  SORT         |               |8        |47  |
|3 |   TABLE SCAN  |t2             |8        |46  |
===================================================

Outputs & filters:
-------------------------------------
  0 - output([.c1], [.c2], [.c3], [.count(*)]), filter([.c1 = 1]), rowset=256,
      access([.c1], [.c2], [.c3], [.count(*)])
  1 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select /*+no_rewrite*/ * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) where c1 = 1;
+------+------+------+----------+
| c1   | c2   | c3   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        1 |
|    1 |    1 |    2 |        1 |
|    1 |    1 | NULL |        2 |
|    1 |    2 |    1 |        1 |
|    1 |    2 |    2 |        1 |
|    1 |    2 | NULL |        2 |
|    1 | NULL | NULL |        4 |
+------+------+------+----------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.c3 = t1.c1;
Query Plan
======================================
|ID|OPERATOR     |NAME|EST. ROWS|COST|
--------------------------------------
|0 |HASH GROUP BY|    |2        |93  |
|1 | HASH JOIN   |    |2        |92  |
|2 |  TABLE SCAN |t1  |2        |46  |
|3 |  TABLE SCAN |t2  |8        |46  |
======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)], [t1.c1]), filter(nil), rowset=256,
      group([t1.__pk_increment], [t2.c1], [t2.c2]), agg_func([T_FUN_COUNT(*)])
  1 - output([t1.__pk_increment], [t2.c1], [t2.c2], [t2.c3], [t1.c1]), filter(nil), rowset=256,
      equal_conds([t2.c3 = t1.c1]), other_conds(nil)
  2 - output([t1.__pk_increment], [t1.c1]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1]), partitions(p0)
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.c3 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    2 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    2 |
|    2 |    1 |    1 |        1 |    1 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    2 |    1 |        1 |    1 |
|    2 |    2 |    2 |        1 |    2 |
+------+------+------+----------+------+
EXPLAIN select * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.c3 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH JOIN       |    |2        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c3 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c3], [v.c1], [v.c2], [v.count(*)]), filter(nil), rowset=256,
      access([v.c3], [v.c1], [v.c2], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.c3 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    2 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    2 |
|    2 |    1 |    1 |        1 |    1 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    2 |    1 |        1 |    1 |
|    2 |    2 |    2 |        1 |    2 |
+------+------+------+----------+------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.c1 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |MERGE JOIN      |    |2        |93  |
|1 | SUBPLAN SCAN   |v   |8        |47  |
|2 |  MERGE GROUP BY|    |8        |47  |
|3 |   SORT         |    |8        |47  |
|4 |    TABLE SCAN  |t2  |8        |46  |
|5 | SORT           |    |2        |46  |
|6 |  TABLE SCAN    |t1  |2        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c1 = t1.c1]), other_conds(nil)
  1 - output([v.c1], [v.c2], [v.c3], [v.count(*)]), filter(nil), rowset=256,
      access([v.c1], [v.c2], [v.c3], [v.count(*)])
  2 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group([t2.c1]), rollup([t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  5 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC])
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.c1 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    1 |
|    1 |    1 | NULL |        2 |    1 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    1 |
|    1 |    2 | NULL |        2 |    1 |
|    1 | NULL | NULL |        4 |    1 |
|    2 |    1 |    1 |        1 |    2 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 |    2 |
|    2 |    2 |    1 |        1 |    2 |
|    2 |    2 |    2 |        1 |    2 |
|    2 |    2 | NULL |        2 |    2 |
|    2 | NULL | NULL |        4 |    2 |
+------+------+------+----------+------+
EXPLAIN select * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.c1 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH JOIN       |    |2        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c1 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c1], [v.c2], [v.c3], [v.count(*)]), filter(nil), rowset=256,
      access([v.c1], [v.c2], [v.c3], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.c1 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    1 |
|    1 |    1 | NULL |        2 |    1 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    1 |
|    1 |    2 | NULL |        2 |    1 |
|    1 | NULL | NULL |        4 |    1 |
|    2 |    1 |    1 |        1 |    2 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 |    2 |
|    2 |    2 |    1 |        1 |    2 |
|    2 |    2 |    2 |        1 |    2 |
|    2 |    2 | NULL |        2 |    2 |
|    2 | NULL | NULL |        4 |    2 |
+------+------+------+----------+------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v left join t1 on v.c3 = t1.c1;
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |HASH RIGHT OUTER JOIN|    |8        |93  |
|1 | TABLE SCAN          |t1  |2        |46  |
|2 | SUBPLAN SCAN        |v   |8        |47  |
|3 |  MERGE GROUP BY     |    |8        |47  |
|4 |   SORT              |    |8        |47  |
|5 |    TABLE SCAN       |t2  |8        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c3 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c3], [v.c1], [v.c2], [v.count(*)]), filter(nil), rowset=256,
      access([v.c3], [v.c1], [v.c2], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v left join t1 on v.c3 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    2 |
|    1 |    1 | NULL |        2 | NULL |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    2 |
|    1 |    2 | NULL |        2 | NULL |
|    1 | NULL | NULL |        4 | NULL |
|    2 |    1 |    1 |        1 |    1 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 | NULL |
|    2 |    2 |    1 |        1 |    1 |
|    2 |    2 |    2 |        1 |    2 |
|    2 |    2 | NULL |        2 | NULL |
|    2 | NULL | NULL |        4 | NULL |
| NULL | NULL | NULL |        8 | NULL |
+------+------+------+----------+------+
EXPLAIN select /*+no_rewrite*/ * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v left join t1 on v.c3 = t1.c1;
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |HASH RIGHT OUTER JOIN|    |8        |93  |
|1 | TABLE SCAN          |t1  |2        |46  |
|2 | SUBPLAN SCAN        |v   |8        |47  |
|3 |  MERGE GROUP BY     |    |8        |47  |
|4 |   SORT              |    |8        |47  |
|5 |    TABLE SCAN       |t2  |8        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c3 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c3], [v.c1], [v.c2], [v.count(*)]), filter(nil), rowset=256,
      access([v.c3], [v.c1], [v.c2], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select /*+no_rewrite*/ * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v left join t1 on v.c3 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    2 |
|    1 |    1 | NULL |        2 | NULL |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    2 |
|    1 |    2 | NULL |        2 | NULL |
|    1 | NULL | NULL |        4 | NULL |
|    2 |    1 |    1 |        1 |    1 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 | NULL |
|    2 |    2 |    1 |        1 |    1 |
|    2 |    2 |    2 |        1 |    2 |
|    2 |    2 | NULL |        2 | NULL |
|    2 | NULL | NULL |        4 | NULL |
| NULL | NULL | NULL |        8 | NULL |
+------+------+------+----------+------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v left join t1 on v.c1 = t1.c1;
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |HASH RIGHT OUTER JOIN|    |8        |93  |
|1 | TABLE SCAN          |t1  |2        |46  |
|2 | SUBPLAN SCAN        |v   |8        |47  |
|3 |  MERGE GROUP BY     |    |8        |47  |
|4 |   SORT              |    |8        |47  |
|5 |    TABLE SCAN       |t2  |8        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c1 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c1], [v.c2], [v.c3], [v.count(*)]), filter(nil), rowset=256,
      access([v.c1], [v.c2], [v.c3], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v left join t1 on v.c1 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    1 |
|    1 |    1 | NULL |        2 |    1 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    1 |
|    1 |    2 | NULL |        2 |    1 |
|    1 | NULL | NULL |        4 |    1 |
|    2 |    1 |    1 |        1 |    2 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 |    2 |
|    2 |    2 |    1 |        1 |    2 |
|    2 |    2 |    2 |        1 |    2 |
|    2 |    2 | NULL |        2 |    2 |
|    2 | NULL | NULL |        4 |    2 |
| NULL | NULL | NULL |        8 | NULL |
+------+------+------+----------+------+
EXPLAIN select /*+no_rewrite*/ * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v left join t1 on v.c1 = t1.c1;
Query Plan
==============================================
|ID|OPERATOR             |NAME|EST. ROWS|COST|
----------------------------------------------
|0 |HASH RIGHT OUTER JOIN|    |8        |93  |
|1 | TABLE SCAN          |t1  |2        |46  |
|2 | SUBPLAN SCAN        |v   |8        |47  |
|3 |  MERGE GROUP BY     |    |8        |47  |
|4 |   SORT              |    |8        |47  |
|5 |    TABLE SCAN       |t2  |8        |46  |
==============================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c1 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c1], [v.c2], [v.c3], [v.count(*)]), filter(nil), rowset=256,
      access([v.c1], [v.c2], [v.c3], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select /*+no_rewrite*/ * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v left join t1 on v.c1 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    1 |
|    1 |    1 | NULL |        2 |    1 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    1 |
|    1 |    2 | NULL |        2 |    1 |
|    1 | NULL | NULL |        4 |    1 |
|    2 |    1 |    1 |        1 |    2 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 |    2 |
|    2 |    2 |    1 |        1 |    2 |
|    2 |    2 |    2 |        1 |    2 |
|    2 |    2 | NULL |        2 |    2 |
|    2 | NULL | NULL |        4 |    2 |
| NULL | NULL | NULL |        8 | NULL |
+------+------+------+----------+------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c3 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH GROUP BY   |    |2        |93  |
|1 | HASH OUTER JOIN|    |2        |92  |
|2 |  TABLE SCAN    |t1  |2        |46  |
|3 |  TABLE SCAN    |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c3], [CASE WHEN (T_OP_IS_NOT, t2.c3, NULL, 0) THEN T_FUN_COUNT(*) ELSE cast(NULL, BIGINT(20, 0)) END], [t1.c1]), filter(nil), rowset=256,
      group([t1.__pk_increment], [t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  1 - output([t1.__pk_increment], [t2.c1], [t2.c2], [t2.c3], [t1.c1]), filter(nil), rowset=256,
      equal_conds([t2.c3 = t1.c1]), other_conds(nil)
  2 - output([t1.__pk_increment], [t1.c1]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1]), partitions(p0)
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c3 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    2 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    2 |
|    2 |    1 |    1 |        1 |    1 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    2 |    1 |        1 |    1 |
|    2 |    2 |    2 |        1 |    2 |
+------+------+------+----------+------+
EXPLAIN select * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c3 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH OUTER JOIN |    |2        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c3 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c3], [v.c1], [v.c2], [v.count(*)]), filter(nil), rowset=256,
      access([v.c3], [v.c1], [v.c2], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c3 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    2 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    2 |
|    2 |    1 |    1 |        1 |    1 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    2 |    1 |        1 |    1 |
|    2 |    2 |    2 |        1 |    2 |
+------+------+------+----------+------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c1 = t1.c1;
Query Plan
===============================================
|ID|OPERATOR              |NAME|EST. ROWS|COST|
-----------------------------------------------
|0 |MERGE RIGHT OUTER JOIN|    |2        |93  |
|1 | SUBPLAN SCAN         |v   |8        |47  |
|2 |  MERGE GROUP BY      |    |8        |47  |
|3 |   SORT               |    |8        |47  |
|4 |    TABLE SCAN        |t2  |8        |46  |
|5 | SORT                 |    |2        |46  |
|6 |  TABLE SCAN          |t1  |2        |46  |
===============================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c1 = t1.c1]), other_conds(nil)
  1 - output([v.c1], [v.c2], [v.c3], [v.count(*)]), filter(nil), rowset=256,
      access([v.c1], [v.c2], [v.c3], [v.count(*)])
  2 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group([t2.c1]), rollup([t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  5 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC])
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c1 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    1 |
|    1 |    1 | NULL |        2 |    1 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    1 |
|    1 |    2 | NULL |        2 |    1 |
|    1 | NULL | NULL |        4 |    1 |
|    2 |    1 |    1 |        1 |    2 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 |    2 |
|    2 |    2 |    1 |        1 |    2 |
|    2 |    2 |    2 |        1 |    2 |
|    2 |    2 | NULL |        2 |    2 |
|    2 | NULL | NULL |        4 |    2 |
+------+------+------+----------+------+
EXPLAIN select * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c1 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH OUTER JOIN |    |2        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c1 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c1], [v.c2], [v.c3], [v.count(*)]), filter(nil), rowset=256,
      access([v.c1], [v.c2], [v.c3], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c1 = t1.c1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    1 |
|    1 |    1 | NULL |        2 |    1 |
|    1 |    2 |    1 |        1 |    1 |
|    1 |    2 |    2 |        1 |    1 |
|    1 |    2 | NULL |        2 |    1 |
|    1 | NULL | NULL |        4 |    1 |
|    2 |    1 |    1 |        1 |    2 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 |    2 |
|    2 |    2 |    1 |        1 |    2 |
|    2 |    2 |    2 |        1 |    2 |
|    2 |    2 | NULL |        2 |    2 |
|    2 | NULL | NULL |        4 |    2 |
+------+------+------+----------+------+

EXPLAIN select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c1 = t1.c1 where v.c2 = 1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |MERGE JOIN      |    |1        |93  |
|1 | SUBPLAN SCAN   |v   |1        |47  |
|2 |  MERGE GROUP BY|    |8        |47  |
|3 |   SORT         |    |8        |47  |
|4 |    TABLE SCAN  |t2  |8        |46  |
|5 | SORT           |    |2        |46  |
|6 |  TABLE SCAN    |t1  |2        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.c1 = t1.c1]), other_conds(nil)
  1 - output([v.c1], [v.c2], [v.c3], [v.count(*)]), filter([v.c2 = 1]), rowset=256,
      access([v.c1], [v.c2], [v.c3], [v.count(*)])
  2 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), rollup([t2.c3]), agg_func([T_FUN_COUNT(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  5 - output([t1.c1]), filter(nil), rowset=256, sort_keys([t1.c1, ASC])
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c1 = t1.c1 where v.c2 = 1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    1 |
|    1 |    1 | NULL |        2 |    1 |
|    2 |    1 |    1 |        1 |    2 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 |    2 |
+------+------+------+----------+------+
EXPLAIN select /*+no_rewrite*/ * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c1 = t1.c1 where v.c2 = 1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH OUTER JOIN |    |1        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.c1], [v.c2], [v.c3], [v.count(*)], [t1.c1]), filter([v.c2 = 1]), rowset=256,
      equal_conds([v.c1 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.c1], [v.c2], [v.c3], [v.count(*)]), filter(nil), rowset=256,
      access([v.c1], [v.c2], [v.c3], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  5 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)

select /*+no_rewrite*/ * from (select /*+no_rewrite*/ c1, c2, c3, count(*) from t2 group by c1, c2, c3 with rollup) v right join t1 on v.c1 = t1.c1 where v.c2 = 1;
+------+------+------+----------+------+
| c1   | c2   | c3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        1 |    1 |
|    1 |    1 |    2 |        1 |    1 |
|    1 |    1 | NULL |        2 |    1 |
|    2 |    1 |    1 |        1 |    2 |
|    2 |    1 |    2 |        1 |    2 |
|    2 |    1 | NULL |        2 |    2 |
+------+------+------+----------+------+

EXPLAIN select * from (select c1 + c2 d1, c2 + c3 d2, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d1 + 1 > t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |6        |93  |
|1 | SUBPLAN SCAN   |v   |8        |47  |
|2 |  MERGE GROUP BY|    |8        |47  |
|3 |   SORT         |    |8        |47  |
|4 |    TABLE SCAN  |t2  |8        |46  |
|5 | MATERIAL       |    |2        |46  |
|6 |  TABLE SCAN    |t1  |2        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      conds([v.d1 + 1 > t1.c1]), nl_params_(nil)
  1 - output([v.d1], [v.d2], [v.count(*)]), filter(nil), rowset=256,
      access([v.d1], [v.d2], [v.count(*)])
  2 - output([t2.c1 + t2.c2], [t2.c2 + t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group([t2.c1], [t2.c2]), rollup([t2.c3]), agg_func([T_FUN_COUNT(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  5 - output([t1.c1]), filter(nil), rowset=256
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select c1 + c2 d1, c2 + c3 d2, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d1 + 1 > t1.c1;
+------+------+----------+------+
| d1   | d2   | count(*) | c1   |
+------+------+----------+------+
|    2 |    2 |        1 |    1 |
|    2 |    2 |        1 |    2 |
|    2 |    3 |        1 |    1 |
|    2 |    3 |        1 |    2 |
|    2 | NULL |        2 |    1 |
|    2 | NULL |        2 |    2 |
|    3 |    3 |        1 |    1 |
|    3 |    3 |        1 |    2 |
|    3 |    4 |        1 |    1 |
|    3 |    4 |        1 |    2 |
|    3 | NULL |        2 |    1 |
|    3 | NULL |        2 |    2 |
|    3 |    2 |        1 |    1 |
|    3 |    2 |        1 |    2 |
|    3 |    3 |        1 |    1 |
|    3 |    3 |        1 |    2 |
|    3 | NULL |        2 |    1 |
|    3 | NULL |        2 |    2 |
|    4 |    3 |        1 |    1 |
|    4 |    3 |        1 |    2 |
|    4 |    4 |        1 |    1 |
|    4 |    4 |        1 |    2 |
|    4 | NULL |        2 |    1 |
|    4 | NULL |        2 |    2 |
+------+------+----------+------+
EXPLAIN select /*+no_rewrite*/ * from (select /*+no_rewrite*/ c1 + c2 d1, c2 + c3 d2, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d1 + 1 > t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |6        |93  |
|1 | SUBPLAN SCAN   |v   |8        |47  |
|2 |  MERGE GROUP BY|    |8        |47  |
|3 |   SORT         |    |8        |47  |
|4 |    TABLE SCAN  |t2  |8        |46  |
|5 | MATERIAL       |    |2        |46  |
|6 |  TABLE SCAN    |t1  |2        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      conds([v.d1 + 1 > t1.c1]), nl_params_(nil)
  1 - output([v.d1], [v.d2], [v.count(*)]), filter(nil), rowset=256,
      access([v.d1], [v.d2], [v.count(*)])
  2 - output([t2.c1 + t2.c2], [t2.c2 + t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  5 - output([t1.c1]), filter(nil), rowset=256
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrite*/ * from (select /*+no_rewrite*/ c1 + c2 d1, c2 + c3 d2, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d1 + 1 > t1.c1;
+------+------+----------+------+
| d1   | d2   | count(*) | c1   |
+------+------+----------+------+
|    2 |    2 |        1 |    1 |
|    2 |    2 |        1 |    2 |
|    2 |    3 |        1 |    1 |
|    2 |    3 |        1 |    2 |
|    2 | NULL |        2 |    1 |
|    2 | NULL |        2 |    2 |
|    3 |    3 |        1 |    1 |
|    3 |    3 |        1 |    2 |
|    3 |    4 |        1 |    1 |
|    3 |    4 |        1 |    2 |
|    3 | NULL |        2 |    1 |
|    3 | NULL |        2 |    2 |
|    3 |    2 |        1 |    1 |
|    3 |    2 |        1 |    2 |
|    3 |    3 |        1 |    1 |
|    3 |    3 |        1 |    2 |
|    3 | NULL |        2 |    1 |
|    3 | NULL |        2 |    2 |
|    4 |    3 |        1 |    1 |
|    4 |    3 |        1 |    2 |
|    4 |    4 |        1 |    1 |
|    4 |    4 |        1 |    2 |
|    4 | NULL |        2 |    1 |
|    4 | NULL |        2 |    2 |
+------+------+----------+------+

EXPLAIN select * from (select c1 + c2 d1, c2 + c3 d2, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d2 + 1 > t1.c1;
Query Plan
==========================================
|ID|OPERATOR         |NAME|EST. ROWS|COST|
------------------------------------------
|0 |HASH GROUP BY    |    |6        |93  |
|1 | NESTED-LOOP JOIN|    |6        |92  |
|2 |  TABLE SCAN     |t2  |8        |46  |
|3 |  MATERIAL       |    |2        |46  |
|4 |   TABLE SCAN    |t1  |2        |46  |
==========================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1 + t2.c2], [t2.c2 + t2.c3], [T_FUN_COUNT(*)], [t1.c1]), filter(nil), rowset=256,
      group([t1.__pk_increment], [t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  1 - output([t1.__pk_increment], [t2.c1], [t2.c2], [t2.c3], [t2.c2 + t2.c3], [t1.c1]), filter(nil), rowset=256,
      conds([t2.c2 + t2.c3 + 1 > t1.c1]), nl_params_(nil)
  2 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  3 - output([t1.__pk_increment], [t1.c1]), filter(nil), rowset=256
  4 - output([t1.__pk_increment], [t1.c1]), filter(nil), rowset=256,
      access([t1.__pk_increment], [t1.c1]), partitions(p0)

select * from (select c1 + c2 d1, c2 + c3 d2, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d2 + 1 > t1.c1;
+------+------+----------+------+
| d1   | d2   | count(*) | c1   |
+------+------+----------+------+
|    2 |    2 |        1 |    1 |
|    2 |    2 |        1 |    2 |
|    2 |    3 |        1 |    1 |
|    2 |    3 |        1 |    2 |
|    3 |    3 |        1 |    1 |
|    3 |    3 |        1 |    2 |
|    3 |    4 |        1 |    1 |
|    3 |    4 |        1 |    2 |
|    3 |    2 |        1 |    1 |
|    3 |    2 |        1 |    2 |
|    3 |    3 |        1 |    1 |
|    3 |    3 |        1 |    2 |
|    4 |    3 |        1 |    1 |
|    4 |    3 |        1 |    2 |
|    4 |    4 |        1 |    1 |
|    4 |    4 |        1 |    2 |
+------+------+----------+------+
EXPLAIN select * from (select /*+no_rewrite*/ c1 + c2 d1, c2 + c3 d2, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d2 + 1 > t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |6        |93  |
|1 | SUBPLAN SCAN   |v   |8        |47  |
|2 |  MERGE GROUP BY|    |8        |47  |
|3 |   SORT         |    |8        |47  |
|4 |    TABLE SCAN  |t2  |8        |46  |
|5 | MATERIAL       |    |2        |46  |
|6 |  TABLE SCAN    |t1  |2        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      conds([v.d2 + 1 > t1.c1]), nl_params_(nil)
  1 - output([v.d2], [v.d1], [v.count(*)]), filter(nil), rowset=256,
      access([v.d2], [v.d1], [v.count(*)])
  2 - output([t2.c1 + t2.c2], [t2.c2 + t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  5 - output([t1.c1]), filter(nil), rowset=256
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select /*+no_rewrite*/ c1 + c2 d1, c2 + c3 d2, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d2 + 1 > t1.c1;
+------+------+----------+------+
| d1   | d2   | count(*) | c1   |
+------+------+----------+------+
|    2 |    2 |        1 |    1 |
|    2 |    2 |        1 |    2 |
|    2 |    3 |        1 |    1 |
|    2 |    3 |        1 |    2 |
|    3 |    3 |        1 |    1 |
|    3 |    3 |        1 |    2 |
|    3 |    4 |        1 |    1 |
|    3 |    4 |        1 |    2 |
|    3 |    2 |        1 |    1 |
|    3 |    2 |        1 |    2 |
|    3 |    3 |        1 |    1 |
|    3 |    3 |        1 |    2 |
|    4 |    3 |        1 |    1 |
|    4 |    3 |        1 |    2 |
|    4 |    4 |        1 |    1 |
|    4 |    4 |        1 |    2 |
+------+------+----------+------+

EXPLAIN select * from (select c1 d1, nvl(c2,0) d2, c3 d3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d2 + 1 > t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |6        |93  |
|1 | SUBPLAN SCAN   |v   |8        |47  |
|2 |  MERGE GROUP BY|    |8        |47  |
|3 |   SORT         |    |8        |47  |
|4 |    TABLE SCAN  |t2  |8        |46  |
|5 | MATERIAL       |    |2        |46  |
|6 |  TABLE SCAN    |t1  |2        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.d3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      conds([v.d2 + 1 > t1.c1]), nl_params_(nil)
  1 - output([v.d2], [v.d1], [v.d3], [v.count(*)]), filter(nil), rowset=256,
      access([v.d2], [v.d1], [v.d3], [v.count(*)])
  2 - output([t2.c1], [nvl(cast(t2.c2, BIGINT(1, 0)), 0)], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  5 - output([t1.c1]), filter(nil), rowset=256
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select c1 d1, nvl(c2,0) d2, c3 d3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d2 + 1 > t1.c1;
+------+----+------+----------+------+
| d1   | d2 | d3   | count(*) | c1   |
+------+----+------+----------+------+
|    1 |  1 |    1 |        1 |    1 |
|    1 |  1 |    2 |        1 |    1 |
|    1 |  1 | NULL |        2 |    1 |
|    1 |  2 |    1 |        1 |    1 |
|    1 |  2 |    1 |        1 |    2 |
|    1 |  2 |    2 |        1 |    1 |
|    1 |  2 |    2 |        1 |    2 |
|    1 |  2 | NULL |        2 |    1 |
|    1 |  2 | NULL |        2 |    2 |
|    2 |  1 |    1 |        1 |    1 |
|    2 |  1 |    2 |        1 |    1 |
|    2 |  1 | NULL |        2 |    1 |
|    2 |  2 |    1 |        1 |    1 |
|    2 |  2 |    1 |        1 |    2 |
|    2 |  2 |    2 |        1 |    1 |
|    2 |  2 |    2 |        1 |    2 |
|    2 |  2 | NULL |        2 |    1 |
|    2 |  2 | NULL |        2 |    2 |
+------+----+------+----------+------+
EXPLAIN select * from (select /*+no_rewrite*/ c1 d1, nvl(c2,0) d2, c3 d3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d2 + 1 > t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |NESTED-LOOP JOIN|    |6        |93  |
|1 | SUBPLAN SCAN   |v   |8        |47  |
|2 |  MERGE GROUP BY|    |8        |47  |
|3 |   SORT         |    |8        |47  |
|4 |    TABLE SCAN  |t2  |8        |46  |
|5 | MATERIAL       |    |2        |46  |
|6 |  TABLE SCAN    |t1  |2        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.d3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      conds([v.d2 + 1 > t1.c1]), nl_params_(nil)
  1 - output([v.d2], [v.d1], [v.d3], [v.count(*)]), filter(nil), rowset=256,
      access([v.d2], [v.d1], [v.d3], [v.count(*)])
  2 - output([t2.c1], [nvl(cast(t2.c2, BIGINT(1, 0)), 0)], [t2.c3], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c3]), agg_func([T_FUN_COUNT(*)])
  3 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c3, ASC])
  4 - output([t2.c1], [t2.c2], [t2.c3]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2], [t2.c3]), partitions(p0)
  5 - output([t1.c1]), filter(nil), rowset=256
  6 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select * from (select /*+no_rewrite*/ c1 d1, nvl(c2,0) d2, c3 d3, count(*) from t2 group by c1, c2, c3 with rollup) v join t1 on v.d2 + 1 > t1.c1;
+------+----+------+----------+------+
| d1   | d2 | d3   | count(*) | c1   |
+------+----+------+----------+------+
|    1 |  1 |    1 |        1 |    1 |
|    1 |  1 |    2 |        1 |    1 |
|    1 |  1 | NULL |        2 |    1 |
|    1 |  2 |    1 |        1 |    1 |
|    1 |  2 |    1 |        1 |    2 |
|    1 |  2 |    2 |        1 |    1 |
|    1 |  2 |    2 |        1 |    2 |
|    1 |  2 | NULL |        2 |    1 |
|    1 |  2 | NULL |        2 |    2 |
|    2 |  1 |    1 |        1 |    1 |
|    2 |  1 |    2 |        1 |    1 |
|    2 |  1 | NULL |        2 |    1 |
|    2 |  2 |    1 |        1 |    1 |
|    2 |  2 |    1 |        1 |    2 |
|    2 |  2 |    2 |        1 |    1 |
|    2 |  2 |    2 |        1 |    2 |
|    2 |  2 | NULL |        2 |    1 |
|    2 |  2 | NULL |        2 |    2 |
+------+----+------+----------+------+

EXPLAIN select c1, c1, count(*) from t2 group by c1, c1 with rollup having c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c1], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group([t2.c1]), rollup([t2.c1]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c1, ASC])
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select c1, c1, count(*) from t2 group by c1, c1 with rollup having c1 = 1;
+------+------+----------+
| c1   | c1   | count(*) |
+------+------+----------+
|    1 |    1 |        4 |
|    1 |    1 |        4 |
+------+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, c1, count(*) from t2 group by c1, c1 with rollup having c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c1], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group(nil), rollup([t2.c1], [t2.c1]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c1, ASC])
  2 - output([t2.c1]), filter(nil), rowset=256,
      access([t2.c1]), partitions(p0)

select /*+no_rewrite*/ c1, c1, count(*) from t2 group by c1, c1 with rollup having c1 = 1;
+------+------+----------+
| c1   | c1   | count(*) |
+------+------+----------+
|    1 |    1 |        4 |
|    1 |    1 |        4 |
+------+------+----------+

EXPLAIN select c1, c2, c1, count(*) from t2 group by c1, c2, c1 with rollup having c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c1], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group([t2.c1]), rollup([t2.c2], [t2.c1]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c1, ASC])
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select c1, c2, c1, count(*) from t2 group by c1, c2, c1 with rollup having c1 = 1;
+------+------+------+----------+
| c1   | c2   | c1   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        2 |
|    1 |    1 |    1 |        2 |
|    1 |    2 |    1 |        2 |
|    1 |    2 |    1 |        2 |
|    1 | NULL |    1 |        4 |
+------+------+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, c2, c1, count(*) from t2 group by c1, c2, c1 with rollup having c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c1], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c1]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c1, ASC])
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select /*+no_rewrite*/ c1, c2, c1, count(*) from t2 group by c1, c2, c1 with rollup having c1 = 1;
+------+------+------+----------+
| c1   | c2   | c1   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        2 |
|    1 |    1 |    1 |        2 |
|    1 |    2 |    1 |        2 |
|    1 |    2 |    1 |        2 |
|    1 | NULL |    1 |        4 |
+------+------+------+----------+

EXPLAIN select c1, c2, c1, count(*) from t2 group by c1, c2, c1 with rollup having c2 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c1], [T_FUN_COUNT(*)]), filter([t2.c2 = 1]), rowset=256,
      group([t2.c1], [t2.c2]), rollup([t2.c1]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c1, ASC])
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select c1, c2, c1, count(*) from t2 group by c1, c2, c1 with rollup having c2 = 1;
+------+------+------+----------+
| c1   | c2   | c1   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        2 |
|    1 |    1 |    1 |        2 |
|    2 |    1 |    2 |        2 |
|    2 |    1 |    2 |        2 |
+------+------+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, c2, c1, count(*) from t2 group by c1, c2, c1 with rollup having c2 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c1], [T_FUN_COUNT(*)]), filter([t2.c2 = 1]), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c1]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c1, ASC])
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select /*+no_rewrite*/ c1, c2, c1, count(*) from t2 group by c1, c2, c1 with rollup having c2 = 1;
+------+------+------+----------+
| c1   | c2   | c1   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        2 |
|    1 |    1 |    1 |        2 |
|    2 |    1 |    2 |        2 |
|    2 |    1 |    2 |        2 |
+------+------+------+----------+

EXPLAIN select c1, c2, c1, count(*) from t2 group by c1, c1, c2, c1 with rollup having c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c1], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group([t2.c1]), rollup([t2.c1], [t2.c2], [t2.c1]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c1, ASC], [t2.c2, ASC], [t2.c1, ASC])
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select c1, c2, c1, count(*) from t2 group by c1, c1, c2, c1 with rollup having c1 = 1;
+------+------+------+----------+
| c1   | c2   | c1   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        2 |
|    1 |    1 |    1 |        2 |
|    1 |    2 |    1 |        2 |
|    1 |    2 |    1 |        2 |
|    1 | NULL |    1 |        4 |
|    1 | NULL |    1 |        4 |
+------+------+------+----------+
EXPLAIN select /*+no_rewrite*/ c1, c2, c1, count(*) from t2 group by c1, c1, c2, c1 with rollup having c1 = 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |47  |
|1 | SORT         |    |8        |47  |
|2 |  TABLE SCAN  |t2  |8        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t2.c1], [t2.c2], [t2.c1], [T_FUN_COUNT(*)]), filter([t2.c1 = 1]), rowset=256,
      group(nil), rollup([t2.c1], [t2.c1], [t2.c2], [t2.c1]), agg_func([T_FUN_COUNT(*)])
  1 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c1, ASC], [t2.c2, ASC], [t2.c1, ASC])
  2 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select /*+no_rewrite*/ c1, c2, c1, count(*) from t2 group by c1, c1, c2, c1 with rollup having c1 = 1;
+------+------+------+----------+
| c1   | c2   | c1   | count(*) |
+------+------+------+----------+
|    1 |    1 |    1 |        2 |
|    1 |    1 |    1 |        2 |
|    1 |    2 |    1 |        2 |
|    1 |    2 |    1 |        2 |
|    1 | NULL |    1 |        4 |
|    1 | NULL |    1 |        4 |
+------+------+------+----------+

EXPLAIN select * from (select c1 d1, c2 d2, c1 d3, count(*) from t2 group by c1, c2, c1 with rollup) v join t1 where v.d3 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH JOIN       |    |2        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.d3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.d3 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.d3], [v.d1], [v.d2], [v.count(*)]), filter(nil), rowset=256,
      access([v.d3], [v.d1], [v.d2], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c1]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c1, ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from (select c1 d1, c2 d2, c1 d3, count(*) from t2 group by c1, c2, c1 with rollup) v join t1 where v.d3 = t1.c1;
+------+------+------+----------+------+
| d1   | d2   | d3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        2 |    1 |
|    1 |    1 |    1 |        2 |    1 |
|    1 |    2 |    1 |        2 |    1 |
|    1 |    2 |    1 |        2 |    1 |
|    1 | NULL |    1 |        4 |    1 |
|    2 |    1 |    2 |        2 |    2 |
|    2 |    1 |    2 |        2 |    2 |
|    2 |    2 |    2 |        2 |    2 |
|    2 |    2 |    2 |        2 |    2 |
|    2 | NULL |    2 |        4 |    2 |
+------+------+------+----------+------+
EXPLAIN select * from (select /*+no_rewrite*/ c1 d1, c2 d2, c1 d3, count(*) from t2 group by c1, c2, c1 with rollup) v join t1 where v.d3 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH JOIN       |    |2        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.d3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.d3 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.d3], [v.d1], [v.d2], [v.count(*)]), filter(nil), rowset=256,
      access([v.d3], [v.d1], [v.d2], [v.count(*)])
  3 - output([t2.c1], [t2.c2], [t2.c1], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1], [t2.c2], [t2.c1]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1], [t2.c2]), filter(nil), rowset=256, sort_keys([t2.c1, ASC], [t2.c2, ASC], [t2.c1, ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from (select /*+no_rewrite*/ c1 d1, c2 d2, c1 d3, count(*) from t2 group by c1, c2, c1 with rollup) v join t1 where v.d3 = t1.c1;
+------+------+------+----------+------+
| d1   | d2   | d3   | count(*) | c1   |
+------+------+------+----------+------+
|    1 |    1 |    1 |        2 |    1 |
|    1 |    1 |    1 |        2 |    1 |
|    1 |    2 |    1 |        2 |    1 |
|    1 |    2 |    1 |        2 |    1 |
|    1 | NULL |    1 |        4 |    1 |
|    2 |    1 |    2 |        2 |    2 |
|    2 |    1 |    2 |        2 |    2 |
|    2 |    2 |    2 |        2 |    2 |
|    2 |    2 |    2 |        2 |    2 |
|    2 | NULL |    2 |        4 |    2 |
+------+------+------+----------+------+

EXPLAIN select * from (select c1+1 d1, c2 d2, c1+1 d3, count(*) from t2 group by c1+1, c2, c1+1 with rollup) v join t1 where v.d3 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH JOIN       |    |2        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.d3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.d3 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.d3], [v.d1], [v.d2], [v.count(*)]), filter(nil), rowset=256,
      access([v.d3], [v.d1], [v.d2], [v.count(*)])
  3 - output([t2.c1 + 1], [t2.c2], [t2.c1 + 1], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1 + 1], [t2.c2], [t2.c1 + 1]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1 + 1], [t2.c2], [t2.c1 + 1]), filter(nil), rowset=256, sort_keys([t2.c1 + 1, ASC], [t2.c2, ASC], [t2.c1 + 1, ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from (select c1+1 d1, c2 d2, c1+1 d3, count(*) from t2 group by c1+1, c2, c1+1 with rollup) v join t1 where v.d3 = t1.c1;
+------+------+------+----------+------+
| d1   | d2   | d3   | count(*) | c1   |
+------+------+------+----------+------+
|    2 |    1 |    2 |        2 |    2 |
|    2 |    1 |    2 |        2 |    2 |
|    2 |    2 |    2 |        2 |    2 |
|    2 |    2 |    2 |        2 |    2 |
|    2 | NULL |    2 |        4 |    2 |
+------+------+------+----------+------+
EXPLAIN select * from (select /*+no_rewrite*/ c1+1 d1, c2 d2, c1+1 d3, count(*) from t2 group by c1+1, c2, c1+1 with rollup) v join t1 where v.d3 = t1.c1;
Query Plan
=========================================
|ID|OPERATOR        |NAME|EST. ROWS|COST|
-----------------------------------------
|0 |HASH JOIN       |    |2        |93  |
|1 | TABLE SCAN     |t1  |2        |46  |
|2 | SUBPLAN SCAN   |v   |8        |47  |
|3 |  MERGE GROUP BY|    |8        |47  |
|4 |   SORT         |    |8        |47  |
|5 |    TABLE SCAN  |t2  |8        |46  |
=========================================

Outputs & filters:
-------------------------------------
  0 - output([v.d1], [v.d2], [v.d3], [v.count(*)], [t1.c1]), filter(nil), rowset=256,
      equal_conds([v.d3 = t1.c1]), other_conds(nil)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)
  2 - output([v.d3], [v.d1], [v.d2], [v.count(*)]), filter(nil), rowset=256,
      access([v.d3], [v.d1], [v.d2], [v.count(*)])
  3 - output([t2.c1 + 1], [t2.c2], [t2.c1 + 1], [T_FUN_COUNT(*)]), filter(nil), rowset=256,
      group(nil), rollup([t2.c1 + 1], [t2.c2], [t2.c1 + 1]), agg_func([T_FUN_COUNT(*)])
  4 - output([t2.c1 + 1], [t2.c2], [t2.c1 + 1]), filter(nil), rowset=256, sort_keys([t2.c1 + 1, ASC], [t2.c2, ASC], [t2.c1 + 1, ASC])
  5 - output([t2.c1], [t2.c2]), filter(nil), rowset=256,
      access([t2.c1], [t2.c2]), partitions(p0)

select * from (select /*+no_rewrite*/ c1+1 d1, c2 d2, c1+1 d3, count(*) from t2 group by c1+1, c2, c1+1 with rollup) v join t1 where v.d3 = t1.c1;
+------+------+------+----------+------+
| d1   | d2   | d3   | count(*) | c1   |
+------+------+------+----------+------+
|    2 |    1 |    2 |        2 |    2 |
|    2 |    1 |    2 |        2 |    2 |
|    2 |    2 |    2 |        2 |    2 |
|    2 |    2 |    2 |        2 |    2 |
|    2 | NULL |    2 |        4 |    2 |
+------+------+------+----------+------+

explain_protocol: 0
drop table if exists t1, t2;
## bug: https://work.aone.alibaba-inc.com/issue/41301461
drop table if exists t1;
create table t1(c1 int primary key, c2 int);
insert into t1 values(1, 1);
select count(*) from t1;
+----------+
| count(*) |
+----------+
|        1 |
+----------+
explain_protocol: 2
EXPLAIN select c1, ntile(cast('a' as float)) over (partition by c1 order by c1) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |WINDOW FUNCTION|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_WIN_FUN_NTILE((cast(cast('a', FLOAT(0, -1)), DOUBLE(-1, -1))))]), filter(nil), rowset=256,
      win_expr(T_WIN_FUN_NTILE((cast(cast('a', FLOAT(0, -1)), DOUBLE(-1, -1))))), partition_by([t1.c1]), order_by(nil), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(UNBOUNDED FOLLOWING)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select c1, ntile(cast('a' as float)) over (partition by c1 order by c1) from t1;
ERROR HY000: Invalid argument
EXPLAIN select /*+no_rewrie*/ c1, ntile(cast('a' as float)) over (partition by c1 order by c1) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |WINDOW FUNCTION|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_WIN_FUN_NTILE((cast(cast('a', FLOAT(0, -1)), DOUBLE(-1, -1))))]), filter(nil), rowset=256,
      win_expr(T_WIN_FUN_NTILE((cast(cast('a', FLOAT(0, -1)), DOUBLE(-1, -1))))), partition_by([t1.c1]), order_by(nil), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(UNBOUNDED FOLLOWING)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrie*/ c1, ntile(cast('a' as float)) over (partition by c1 order by c1) from t1;
ERROR HY000: Invalid argument

EXPLAIN select c1, ntile(cast(2 as float)) over (partition by c1 order by c1) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |WINDOW FUNCTION|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_WIN_FUN_NTILE((cast(cast(2, FLOAT(0, -1)), DOUBLE(-1, -1))))]), filter(nil), rowset=256,
      win_expr(T_WIN_FUN_NTILE((cast(cast(2, FLOAT(0, -1)), DOUBLE(-1, -1))))), partition_by([t1.c1]), order_by(nil), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(UNBOUNDED FOLLOWING)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select c1, ntile(cast(2 as float)) over (partition by c1 order by c1) from t1;
+----+------------------------------------------------------------+
| c1 | ntile(cast(2 as float)) over (partition by c1 order by c1) |
+----+------------------------------------------------------------+
|  1 |                                                          1 |
+----+------------------------------------------------------------+
EXPLAIN select /*+no_rewrie*/ c1, ntile(cast(2 as float)) over (partition by c1 order by c1) from t1;
Query Plan
========================================
|ID|OPERATOR       |NAME|EST. ROWS|COST|
----------------------------------------
|0 |WINDOW FUNCTION|    |1        |46  |
|1 | TABLE SCAN    |t1  |1        |46  |
========================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_WIN_FUN_NTILE((cast(cast(2, FLOAT(0, -1)), DOUBLE(-1, -1))))]), filter(nil), rowset=256,
      win_expr(T_WIN_FUN_NTILE((cast(cast(2, FLOAT(0, -1)), DOUBLE(-1, -1))))), partition_by([t1.c1]), order_by(nil), window_type(RANGE), upper(UNBOUNDED PRECEDING), lower(UNBOUNDED FOLLOWING)
  1 - output([t1.c1]), filter(nil), rowset=256,
      access([t1.c1]), partitions(p0)

select /*+no_rewrie*/ c1, ntile(cast(2 as float)) over (partition by c1 order by c1) from t1;
+----+------------------------------------------------------------+
| c1 | ntile(cast(2 as float)) over (partition by c1 order by c1) |
+----+------------------------------------------------------------+
|  1 |                                                          1 |
+----+------------------------------------------------------------+
explain_protocol: 0
drop table if exists t1;

##bug:https://work.aone.alibaba-inc.com/issue/43881024
drop table if exists t1;
create table t1(c1 int, c2 int);
insert into t1 values(2,2);
select count(*) from t1;
explain_protocol: 2
result_format: 4
EXPLAIN select c1,sum(c1) from t1 group by c1,c2 with rollup having sum(c1) > 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |46  |
|1 | SORT         |    |1        |46  |
|2 |  TABLE SCAN  |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_SUM(t1.c1)]), filter([T_FUN_SUM(t1.c1) > cast(1, DECIMAL(1, 0))]), rowset=256,
      group(nil), rollup([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c1)])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select c1,sum(c1) from t1 group by c1,c2 with rollup having sum(c1) > 1;
+------+---------+
| c1   | sum(c1) |
+------+---------+
|    2 |       2 |
|    2 |       2 |
| NULL |       2 |
+------+---------+
EXPLAIN select /*+no_rewrite*/c1,sum(c1) from t1 group by c1,c2 with rollup having sum(c1) > 1;
Query Plan
=======================================
|ID|OPERATOR      |NAME|EST. ROWS|COST|
---------------------------------------
|0 |MERGE GROUP BY|    |1        |46  |
|1 | SORT         |    |1        |46  |
|2 |  TABLE SCAN  |t1  |1        |46  |
=======================================

Outputs & filters:
-------------------------------------
  0 - output([t1.c1], [T_FUN_SUM(t1.c1)]), filter([T_FUN_SUM(t1.c1) > cast(1, DECIMAL(1, 0))]), rowset=256,
      group(nil), rollup([t1.c1], [t1.c2]), agg_func([T_FUN_SUM(t1.c1)])
  1 - output([t1.c1], [t1.c2]), filter(nil), rowset=256, sort_keys([t1.c1, ASC], [t1.c2, ASC])
  2 - output([t1.c1], [t1.c2]), filter(nil), rowset=256,
      access([t1.c1], [t1.c2]), partitions(p0)

select /*+no_rewrite*/c1,sum(c1) from t1 group by c1,c2 with rollup having sum(c1) > 1;
+------+---------+
| c1   | sum(c1) |
+------+---------+
|    2 |       2 |
|    2 |       2 |
| NULL |       2 |
+------+---------+
explain_protocol: 0
drop table if exists t1;

USE DB_SIMPLIFY;
drop database DB_SIMPLIFY;
alter system set _enable_record_rollback_trans_log=true;
ERROR 42000: System config unknown
set autocommit = 1;
